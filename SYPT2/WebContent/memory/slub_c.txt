Linux/mm/slub.c

  1 /*
  2  * SLUB: A slab allocator that limits cache line use instead of queuing
  3  * objects in per cpu and per node lists.
  4  *
  5  * The allocator synchronizes using per slab locks or atomic operatios
  6  * and only uses a centralized lock to manage a pool of partial slabs.
  7  *
  8  * (C) 2007 SGI, Christoph Lameter
  9  * (C) 2011 Linux Foundation, Christoph Lameter
 10  */
 11 
 12 #include <linux/mm.h>
 13 #include <linux/swap.h> /* struct reclaim_state */
 14 #include <linux/module.h>
 15 #include <linux/bit_spinlock.h>
 16 #include <linux/interrupt.h>
 17 #include <linux/bitops.h>
 18 #include <linux/slab.h>
 19 #include "slab.h"
 20 #include <linux/proc_fs.h>
 21 #include <linux/notifier.h>
 22 #include <linux/seq_file.h>
 23 #include <linux/kmemcheck.h>
 24 #include <linux/cpu.h>
 25 #include <linux/cpuset.h>
 26 #include <linux/mempolicy.h>
 27 #include <linux/ctype.h>
 28 #include <linux/debugobjects.h>
 29 #include <linux/kallsyms.h>
 30 #include <linux/memory.h>
 31 #include <linux/math64.h>
 32 #include <linux/fault-inject.h>
 33 #include <linux/stacktrace.h>
 34 #include <linux/prefetch.h>
 35 #include <linux/memcontrol.h>
 36 
 37 #include <trace/events/kmem.h>
 38 
 39 #include "internal.h"
 40 
 41 /*
 42  * Lock order:
 43  *   1. slab_mutex (Global Mutex)
 44  *   2. node->list_lock
 45  *   3. slab_lock(page) (Only on some arches and for debugging)
 46  *
 47  *   slab_mutex
 48  *
 49  *   The role of the slab_mutex is to protect the list of all the slabs
 50  *   and to synchronize major metadata changes to slab cache structures.
 51  *
 52  *   The slab_lock is only used for debugging and on arches that do not
 53  *   have the ability to do a cmpxchg_double. It only protects the second
 54  *   double word in the page struct. Meaning
 55  *      A. page->freelist       -> List of object free in a page
 56  *      B. page->counters       -> Counters of objects
 57  *      C. page->frozen         -> frozen state
 58  *
 59  *   If a slab is frozen then it is exempt from list management. It is not
 60  *   on any list. The processor that froze the slab is the one who can
 61  *   perform list operations on the page. Other processors may put objects
 62  *   onto the freelist but the processor that froze the slab is the only
 63  *   one that can retrieve the objects from the page's freelist.
 64  *
 65  *   The list_lock protects the partial and full list on each node and
 66  *   the partial slab counter. If taken then no new slabs may be added or
 67  *   removed from the lists nor make the number of partial slabs be modified.
 68  *   (Note that the total number of slabs is an atomic value that may be
 69  *   modified without taking the list lock).
 70  *
 71  *   The list_lock is a centralized lock and thus we avoid taking it as
 72  *   much as possible. As long as SLUB does not have to handle partial
 73  *   slabs, operations can continue without any centralized lock. F.e.
 74  *   allocating a long series of objects that fill up slabs does not require
 75  *   the list lock.
 76  *   Interrupts are disabled during allocation and deallocation in order to
 77  *   make the slab allocator safe to use in the context of an irq. In addition
 78  *   interrupts are disabled to ensure that the processor does not change
 79  *   while handling per_cpu slabs, due to kernel preemption.
 80  *
 81  * SLUB assigns one slab for allocation to each processor.
 82  * Allocations only occur from these slabs called cpu slabs.
 83  *
 84  * Slabs with free elements are kept on a partial list and during regular
 85  * operations no list for full slabs is used. If an object in a full slab is
 86  * freed then the slab will show up again on the partial lists.
 87  * We track full slabs for debugging purposes though because otherwise we
 88  * cannot scan all objects.
 89  *
 90  * Slabs are freed when they become empty. Teardown and setup is
 91  * minimal so we rely on the page allocators per cpu caches for
 92  * fast frees and allocs.
 93  *
 94  * Overloading of page flags that are otherwise used for LRU management.
 95  *
 96  * PageActive           The slab is frozen and exempt from list processing.
 97  *                      This means that the slab is dedicated to a purpose
 98  *                      such as satisfying allocations for a specific
 99  *                      processor. Objects may be freed in the slab while
100  *                      it is frozen but slab_free will then skip the usual
101  *                      list operations. It is up to the processor holding
102  *                      the slab to integrate the slab into the slab lists
103  *                      when the slab is no longer needed.
104  *
105  *                      One use of this flag is to mark slabs that are
106  *                      used for allocations. Then such a slab becomes a cpu
107  *                      slab. The cpu slab may be equipped with an additional
108  *                      freelist that allows lockless access to
109  *                      free objects in addition to the regular freelist
110  *                      that requires the slab lock.
111  *
112  * PageError            Slab requires special handling due to debug
113  *                      options set. This moves slab handling out of
114  *                      the fast path and disables lockless freelists.
115  */
116 
117 static inline int kmem_cache_debug(struct kmem_cache *s)
118 {
119 #ifdef CONFIG_SLUB_DEBUG
120         return unlikely(s->flags & SLAB_DEBUG_FLAGS);
121 #else
122         return 0;
123 #endif
124 }
125 
126 static inline bool kmem_cache_has_cpu_partial(struct kmem_cache *s)
127 {
128 #ifdef CONFIG_SLUB_CPU_PARTIAL
129         return !kmem_cache_debug(s);
130 #else
131         return false;
132 #endif
133 }
134 
135 /*
136  * Issues still to be resolved:
137  *
138  * - Support PAGE_ALLOC_DEBUG. Should be easy to do.
139  *
140  * - Variable sizing of the per node arrays
141  */
142 
143 /* Enable to test recovery from slab corruption on boot */
144 #undef SLUB_RESILIENCY_TEST
145 
146 /* Enable to log cmpxchg failures */
147 #undef SLUB_DEBUG_CMPXCHG
148 
149 /*
150  * Mininum number of partial slabs. These will be left on the partial
151  * lists even if they are empty. kmem_cache_shrink may reclaim them.
152  */
153 #define MIN_PARTIAL 5
154 
155 /*
156  * Maximum number of desirable partial slabs.
157  * The existence of more partial slabs makes kmem_cache_shrink
158  * sort the partial list by the number of objects in use.
159  */
160 #define MAX_PARTIAL 10
161 
162 #define DEBUG_DEFAULT_FLAGS (SLAB_DEBUG_FREE | SLAB_RED_ZONE | \
163                                 SLAB_POISON | SLAB_STORE_USER)
164 
165 /*
166  * Debugging flags that require metadata to be stored in the slab.  These get
167  * disabled when slub_debug=O is used and a cache's min order increases with
168  * metadata.
169  */
170 #define DEBUG_METADATA_FLAGS (SLAB_RED_ZONE | SLAB_POISON | SLAB_STORE_USER)
171 
172 #define OO_SHIFT        16
173 #define OO_MASK         ((1 << OO_SHIFT) - 1)
174 #define MAX_OBJS_PER_PAGE       32767 /* since page.objects is u15 */
175 
176 /* Internal SLUB flags */
177 #define __OBJECT_POISON         0x80000000UL /* Poison object */
178 #define __CMPXCHG_DOUBLE        0x40000000UL /* Use cmpxchg_double */
179 
180 #ifdef CONFIG_SMP
181 static struct notifier_block slab_notifier;
182 #endif
183 
184 /*
185  * Tracking user of a slab.
186  */
187 #define TRACK_ADDRS_COUNT 16
188 struct track {
189         unsigned long addr;     /* Called from address */
190 #ifdef CONFIG_STACKTRACE
191         unsigned long addrs[TRACK_ADDRS_COUNT]; /* Called from address */
192 #endif
193         int cpu;                /* Was running on cpu */
194         int pid;                /* Pid context */
195         unsigned long when;     /* When did the operation occur */
196 };
197 
198 enum track_item { TRACK_ALLOC, TRACK_FREE };
199 
200 #ifdef CONFIG_SYSFS
201 static int sysfs_slab_add(struct kmem_cache *);
202 static int sysfs_slab_alias(struct kmem_cache *, const char *);
203 static void memcg_propagate_slab_attrs(struct kmem_cache *s);
204 #else
205 static inline int sysfs_slab_add(struct kmem_cache *s) { return 0; }
206 static inline int sysfs_slab_alias(struct kmem_cache *s, const char *p)
207                                                         { return 0; }
208 static inline void memcg_propagate_slab_attrs(struct kmem_cache *s) { }
209 #endif
210 
211 static inline void stat(const struct kmem_cache *s, enum stat_item si)
212 {
213 #ifdef CONFIG_SLUB_STATS
214         /*
215          * The rmw is racy on a preemptible kernel but this is acceptable, so
216          * avoid this_cpu_add()'s irq-disable overhead.
217          */
218         raw_cpu_inc(s->cpu_slab->stat[si]);
219 #endif
220 }
221 
222 /********************************************************************
223  *                      Core slab cache functions
224  *******************************************************************/
225 
226 /* Verify that a pointer has an address that is valid within a slab page */
227 static inline int check_valid_pointer(struct kmem_cache *s,
228                                 struct page *page, const void *object)
229 {
230         void *base;
231 
232         if (!object)
233                 return 1;
234 
235         base = page_address(page);
236         if (object < base || object >= base + page->objects * s->size ||
237                 (object - base) % s->size) {
238                 return 0;
239         }
240 
241         return 1;
242 }
243 
244 static inline void *get_freepointer(struct kmem_cache *s, void *object)
245 {
246         return *(void **)(object + s->offset);
247 }
248 
249 static void prefetch_freepointer(const struct kmem_cache *s, void *object)
250 {
251         prefetch(object + s->offset);
252 }
253 
254 static inline void *get_freepointer_safe(struct kmem_cache *s, void *object)
255 {
256         void *p;
257 
258 #ifdef CONFIG_DEBUG_PAGEALLOC
259         probe_kernel_read(&p, (void **)(object + s->offset), sizeof(p));
260 #else
261         p = get_freepointer(s, object);
262 #endif
263         return p;
264 }
265 
266 static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)
267 {
268         *(void **)(object + s->offset) = fp;
269 }
270 
271 /* Loop over all objects in a slab */
272 #define for_each_object(__p, __s, __addr, __objects) \
273         for (__p = (__addr); __p < (__addr) + (__objects) * (__s)->size;\
274                         __p += (__s)->size)
275 
276 #define for_each_object_idx(__p, __idx, __s, __addr, __objects) \
277         for (__p = (__addr), __idx = 1; __idx <= __objects;\
278                         __p += (__s)->size, __idx++)
279 
280 /* Determine object index from a given position */
281 static inline int slab_index(void *p, struct kmem_cache *s, void *addr)
282 {
283         return (p - addr) / s->size;
284 }
285 
286 static inline size_t slab_ksize(const struct kmem_cache *s)
287 {
288 #ifdef CONFIG_SLUB_DEBUG
289         /*
290          * Debugging requires use of the padding between object
291          * and whatever may come after it.
292          */
293         if (s->flags & (SLAB_RED_ZONE | SLAB_POISON))
294                 return s->object_size;
295 
296 #endif
297         /*
298          * If we have the need to store the freelist pointer
299          * back there or track user information then we can
300          * only use the space before that information.
301          */
302         if (s->flags & (SLAB_DESTROY_BY_RCU | SLAB_STORE_USER))
303                 return s->inuse;
304         /*
305          * Else we can use all the padding etc for the allocation
306          */
307         return s->size;
308 }
309 
310 static inline int order_objects(int order, unsigned long size, int reserved)
311 {
312         return ((PAGE_SIZE << order) - reserved) / size;
313 }
314 
315 static inline struct kmem_cache_order_objects oo_make(int order,
316                 unsigned long size, int reserved)
317 {
318         struct kmem_cache_order_objects x = {
319                 (order << OO_SHIFT) + order_objects(order, size, reserved)
320         };
321 
322         return x;
323 }
324 
325 static inline int oo_order(struct kmem_cache_order_objects x)
326 {
327         return x.x >> OO_SHIFT;
328 }
329 
330 static inline int oo_objects(struct kmem_cache_order_objects x)
331 {
332         return x.x & OO_MASK;
333 }
334 
335 /*
336  * Per slab locking using the pagelock
337  */
338 static __always_inline void slab_lock(struct page *page)
339 {
340         bit_spin_lock(PG_locked, &page->flags);
341 }
342 
343 static __always_inline void slab_unlock(struct page *page)
344 {
345         __bit_spin_unlock(PG_locked, &page->flags);
346 }
347 
348 static inline void set_page_slub_counters(struct page *page, unsigned long counters_new)
349 {
350         struct page tmp;
351         tmp.counters = counters_new;
352         /*
353          * page->counters can cover frozen/inuse/objects as well
354          * as page->_count.  If we assign to ->counters directly
355          * we run the risk of losing updates to page->_count, so
356          * be careful and only assign to the fields we need.
357          */
358         page->frozen  = tmp.frozen;
359         page->inuse   = tmp.inuse;
360         page->objects = tmp.objects;
361 }
362 
363 /* Interrupts must be disabled (for the fallback code to work right) */
364 static inline bool __cmpxchg_double_slab(struct kmem_cache *s, struct page *page,
365                 void *freelist_old, unsigned long counters_old,
366                 void *freelist_new, unsigned long counters_new,
367                 const char *n)
368 {
369         VM_BUG_ON(!irqs_disabled());
370 #if defined(CONFIG_HAVE_CMPXCHG_DOUBLE) && \
371     defined(CONFIG_HAVE_ALIGNED_STRUCT_PAGE)
372         if (s->flags & __CMPXCHG_DOUBLE) {
373                 if (cmpxchg_double(&page->freelist, &page->counters,
374                                    freelist_old, counters_old,
375                                    freelist_new, counters_new))
376                         return 1;
377         } else
378 #endif
379         {
380                 slab_lock(page);
381                 if (page->freelist == freelist_old &&
382                                         page->counters == counters_old) {
383                         page->freelist = freelist_new;
384                         set_page_slub_counters(page, counters_new);
385                         slab_unlock(page);
386                         return 1;
387                 }
388                 slab_unlock(page);
389         }
390 
391         cpu_relax();
392         stat(s, CMPXCHG_DOUBLE_FAIL);
393 
394 #ifdef SLUB_DEBUG_CMPXCHG
395         pr_info("%s %s: cmpxchg double redo ", n, s->name);
396 #endif
397 
398         return 0;
399 }
400 
401 static inline bool cmpxchg_double_slab(struct kmem_cache *s, struct page *page,
402                 void *freelist_old, unsigned long counters_old,
403                 void *freelist_new, unsigned long counters_new,
404                 const char *n)
405 {
406 #if defined(CONFIG_HAVE_CMPXCHG_DOUBLE) && \
407     defined(CONFIG_HAVE_ALIGNED_STRUCT_PAGE)
408         if (s->flags & __CMPXCHG_DOUBLE) {
409                 if (cmpxchg_double(&page->freelist, &page->counters,
410                                    freelist_old, counters_old,
411                                    freelist_new, counters_new))
412                         return 1;
413         } else
414 #endif
415         {
416                 unsigned long flags;
417 
418                 local_irq_save(flags);
419                 slab_lock(page);
420                 if (page->freelist == freelist_old &&
421                                         page->counters == counters_old) {
422                         page->freelist = freelist_new;
423                         set_page_slub_counters(page, counters_new);
424                         slab_unlock(page);
425                         local_irq_restore(flags);
426                         return 1;
427                 }
428                 slab_unlock(page);
429                 local_irq_restore(flags);
430         }
431 
432         cpu_relax();
433         stat(s, CMPXCHG_DOUBLE_FAIL);
434 
435 #ifdef SLUB_DEBUG_CMPXCHG
436         pr_info("%s %s: cmpxchg double redo ", n, s->name);
437 #endif
438 
439         return 0;
440 }
441 
442 #ifdef CONFIG_SLUB_DEBUG
443 /*
444  * Determine a map of object in use on a page.
445  *
446  * Node listlock must be held to guarantee that the page does
447  * not vanish from under us.
448  */
449 static void get_map(struct kmem_cache *s, struct page *page, unsigned long *map)
450 {
451         void *p;
452         void *addr = page_address(page);
453 
454         for (p = page->freelist; p; p = get_freepointer(s, p))
455                 set_bit(slab_index(p, s, addr), map);
456 }
457 
458 /*
459  * Debug settings:
460  */
461 #ifdef CONFIG_SLUB_DEBUG_ON
462 static int slub_debug = DEBUG_DEFAULT_FLAGS;
463 #else
464 static int slub_debug;
465 #endif
466 
467 static char *slub_debug_slabs;
468 static int disable_higher_order_debug;
469 
470 /*
471  * Object debugging
472  */
473 static void print_section(char *text, u8 *addr, unsigned int length)
474 {
475         print_hex_dump(KERN_ERR, text, DUMP_PREFIX_ADDRESS, 16, 1, addr,
476                         length, 1);
477 }
478 
479 static struct track *get_track(struct kmem_cache *s, void *object,
480         enum track_item alloc)
481 {
482         struct track *p;
483 
484         if (s->offset)
485                 p = object + s->offset + sizeof(void *);
486         else
487                 p = object + s->inuse;
488 
489         return p + alloc;
490 }
491 
492 static void set_track(struct kmem_cache *s, void *object,
493                         enum track_item alloc, unsigned long addr)
494 {
495         struct track *p = get_track(s, object, alloc);
496 
497         if (addr) {
498 #ifdef CONFIG_STACKTRACE
499                 struct stack_trace trace;
500                 int i;
501 
502                 trace.nr_entries = 0;
503                 trace.max_entries = TRACK_ADDRS_COUNT;
504                 trace.entries = p->addrs;
505                 trace.skip = 3;
506                 save_stack_trace(&trace);
507 
508                 /* See rant in lockdep.c */
509                 if (trace.nr_entries != 0 &&
510                     trace.entries[trace.nr_entries - 1] == ULONG_MAX)
511                         trace.nr_entries--;
512 
513                 for (i = trace.nr_entries; i < TRACK_ADDRS_COUNT; i++)
514                         p->addrs[i] = 0;
515 #endif
516                 p->addr = addr;
517                 p->cpu = smp_processor_id();
518                 p->pid = current->pid;
519                 p->when = jiffies;
520         } else
521                 memset(p, 0, sizeof(struct track));
522 }
523 
524 static void init_tracking(struct kmem_cache *s, void *object)
525 {
526         if (!(s->flags & SLAB_STORE_USER))
527                 return;
528 
529         set_track(s, object, TRACK_FREE, 0UL);
530         set_track(s, object, TRACK_ALLOC, 0UL);
531 }
532 
533 static void print_track(const char *s, struct track *t)
534 {
535         if (!t->addr)
536                 return;
537 
538         pr_err("INFO: %s in %pS age=%lu cpu=%u pid=%d\n",
539                s, (void *)t->addr, jiffies - t->when, t->cpu, t->pid);
540 #ifdef CONFIG_STACKTRACE
541         {
542                 int i;
543                 for (i = 0; i < TRACK_ADDRS_COUNT; i++)
544                         if (t->addrs[i])
545                                 pr_err("\t%pS\n", (void *)t->addrs[i]);
546                         else
547                                 break;
548         }
549 #endif
550 }
551 
552 static void print_tracking(struct kmem_cache *s, void *object)
553 {
554         if (!(s->flags & SLAB_STORE_USER))
555                 return;
556 
557         print_track("Allocated", get_track(s, object, TRACK_ALLOC));
558         print_track("Freed", get_track(s, object, TRACK_FREE));
559 }
560 
561 static void print_page_info(struct page *page)
562 {
563         pr_err("INFO: Slab 0x%p objects=%u used=%u fp=0x%p flags=0x%04lx\n",
564                page, page->objects, page->inuse, page->freelist, page->flags);
565 
566 }
567 
568 static void slab_bug(struct kmem_cache *s, char *fmt, ...)
569 {
570         struct va_format vaf;
571         va_list args;
572 
573         va_start(args, fmt);
574         vaf.fmt = fmt;
575         vaf.va = &args;
576         pr_err("=============================================================================\n");
577         pr_err("BUG %s (%s): %pV\n", s->name, print_tainted(), &vaf);
578         pr_err("-----------------------------------------------------------------------------\n\n");
579 
580         add_taint(TAINT_BAD_PAGE, LOCKDEP_NOW_UNRELIABLE);
581         va_end(args);
582 }
583 
584 static void slab_fix(struct kmem_cache *s, char *fmt, ...)
585 {
586         struct va_format vaf;
587         va_list args;
588 
589         va_start(args, fmt);
590         vaf.fmt = fmt;
591         vaf.va = &args;
592         pr_err("FIX %s: %pV\n", s->name, &vaf);
593         va_end(args);
594 }
595 
596 static void print_trailer(struct kmem_cache *s, struct page *page, u8 *p)
597 {
598         unsigned int off;       /* Offset of last byte */
599         u8 *addr = page_address(page);
600 
601         print_tracking(s, p);
602 
603         print_page_info(page);
604 
605         pr_err("INFO: Object 0x%p @offset=%tu fp=0x%p\n\n",
606                p, p - addr, get_freepointer(s, p));
607 
608         if (p > addr + 16)
609                 print_section("Bytes b4 ", p - 16, 16);
610 
611         print_section("Object ", p, min_t(unsigned long, s->object_size,
612                                 PAGE_SIZE));
613         if (s->flags & SLAB_RED_ZONE)
614                 print_section("Redzone ", p + s->object_size,
615                         s->inuse - s->object_size);
616 
617         if (s->offset)
618                 off = s->offset + sizeof(void *);
619         else
620                 off = s->inuse;
621 
622         if (s->flags & SLAB_STORE_USER)
623                 off += 2 * sizeof(struct track);
624 
625         if (off != s->size)
626                 /* Beginning of the filler is the free pointer */
627                 print_section("Padding ", p + off, s->size - off);
628 
629         dump_stack();
630 }
631 
632 static void object_err(struct kmem_cache *s, struct page *page,
633                         u8 *object, char *reason)
634 {
635         slab_bug(s, "%s", reason);
636         print_trailer(s, page, object);
637 }
638 
639 static void slab_err(struct kmem_cache *s, struct page *page,
640                         const char *fmt, ...)
641 {
642         va_list args;
643         char buf[100];
644 
645         va_start(args, fmt);
646         vsnprintf(buf, sizeof(buf), fmt, args);
647         va_end(args);
648         slab_bug(s, "%s", buf);
649         print_page_info(page);
650         dump_stack();
651 }
652 
653 static void init_object(struct kmem_cache *s, void *object, u8 val)
654 {
655         u8 *p = object;
656 
657         if (s->flags & __OBJECT_POISON) {
658                 memset(p, POISON_FREE, s->object_size - 1);
659                 p[s->object_size - 1] = POISON_END;
660         }
661 
662         if (s->flags & SLAB_RED_ZONE)
663                 memset(p + s->object_size, val, s->inuse - s->object_size);
664 }
665 
666 static void restore_bytes(struct kmem_cache *s, char *message, u8 data,
667                                                 void *from, void *to)
668 {
669         slab_fix(s, "Restoring 0x%p-0x%p=0x%x\n", from, to - 1, data);
670         memset(from, data, to - from);
671 }
672 
673 static int check_bytes_and_report(struct kmem_cache *s, struct page *page,
674                         u8 *object, char *what,
675                         u8 *start, unsigned int value, unsigned int bytes)
676 {
677         u8 *fault;
678         u8 *end;
679 
680         fault = memchr_inv(start, value, bytes);
681         if (!fault)
682                 return 1;
683 
684         end = start + bytes;
685         while (end > fault && end[-1] == value)
686                 end--;
687 
688         slab_bug(s, "%s overwritten", what);
689         pr_err("INFO: 0x%p-0x%p. First byte 0x%x instead of 0x%x\n",
690                                         fault, end - 1, fault[0], value);
691         print_trailer(s, page, object);
692 
693         restore_bytes(s, what, value, fault, end);
694         return 0;
695 }
696 
697 /*
698  * Object layout:
699  *
700  * object address
701  *      Bytes of the object to be managed.
702  *      If the freepointer may overlay the object then the free
703  *      pointer is the first word of the object.
704  *
705  *      Poisoning uses 0x6b (POISON_FREE) and the last byte is
706  *      0xa5 (POISON_END)
707  *
708  * object + s->object_size
709  *      Padding to reach word boundary. This is also used for Redzoning.
710  *      Padding is extended by another word if Redzoning is enabled and
711  *      object_size == inuse.
712  *
713  *      We fill with 0xbb (RED_INACTIVE) for inactive objects and with
714  *      0xcc (RED_ACTIVE) for objects in use.
715  *
716  * object + s->inuse
717  *      Meta data starts here.
718  *
719  *      A. Free pointer (if we cannot overwrite object on free)
720  *      B. Tracking data for SLAB_STORE_USER
721  *      C. Padding to reach required alignment boundary or at mininum
722  *              one word if debugging is on to be able to detect writes
723  *              before the word boundary.
724  *
725  *      Padding is done using 0x5a (POISON_INUSE)
726  *
727  * object + s->size
728  *      Nothing is used beyond s->size.
729  *
730  * If slabcaches are merged then the object_size and inuse boundaries are mostly
731  * ignored. And therefore no slab options that rely on these boundaries
732  * may be used with merged slabcaches.
733  */
734 
735 static int check_pad_bytes(struct kmem_cache *s, struct page *page, u8 *p)
736 {
737         unsigned long off = s->inuse;   /* The end of info */
738 
739         if (s->offset)
740                 /* Freepointer is placed after the object. */
741                 off += sizeof(void *);
742 
743         if (s->flags & SLAB_STORE_USER)
744                 /* We also have user information there */
745                 off += 2 * sizeof(struct track);
746 
747         if (s->size == off)
748                 return 1;
749 
750         return check_bytes_and_report(s, page, p, "Object padding",
751                                 p + off, POISON_INUSE, s->size - off);
752 }
753 
754 /* Check the pad bytes at the end of a slab page */
755 static int slab_pad_check(struct kmem_cache *s, struct page *page)
756 {
757         u8 *start;
758         u8 *fault;
759         u8 *end;
760         int length;
761         int remainder;
762 
763         if (!(s->flags & SLAB_POISON))
764                 return 1;
765 
766         start = page_address(page);
767         length = (PAGE_SIZE << compound_order(page)) - s->reserved;
768         end = start + length;
769         remainder = length % s->size;
770         if (!remainder)
771                 return 1;
772 
773         fault = memchr_inv(end - remainder, POISON_INUSE, remainder);
774         if (!fault)
775                 return 1;
776         while (end > fault && end[-1] == POISON_INUSE)
777                 end--;
778 
779         slab_err(s, page, "Padding overwritten. 0x%p-0x%p", fault, end - 1);
780         print_section("Padding ", end - remainder, remainder);
781 
782         restore_bytes(s, "slab padding", POISON_INUSE, end - remainder, end);
783         return 0;
784 }
785 
786 static int check_object(struct kmem_cache *s, struct page *page,
787                                         void *object, u8 val)
788 {
789         u8 *p = object;
790         u8 *endobject = object + s->object_size;
791 
792         if (s->flags & SLAB_RED_ZONE) {
793                 if (!check_bytes_and_report(s, page, object, "Redzone",
794                         endobject, val, s->inuse - s->object_size))
795                         return 0;
796         } else {
797                 if ((s->flags & SLAB_POISON) && s->object_size < s->inuse) {
798                         check_bytes_and_report(s, page, p, "Alignment padding",
799                                 endobject, POISON_INUSE,
800                                 s->inuse - s->object_size);
801                 }
802         }
803 
804         if (s->flags & SLAB_POISON) {
805                 if (val != SLUB_RED_ACTIVE && (s->flags & __OBJECT_POISON) &&
806                         (!check_bytes_and_report(s, page, p, "Poison", p,
807                                         POISON_FREE, s->object_size - 1) ||
808                          !check_bytes_and_report(s, page, p, "Poison",
809                                 p + s->object_size - 1, POISON_END, 1)))
810                         return 0;
811                 /*
812                  * check_pad_bytes cleans up on its own.
813                  */
814                 check_pad_bytes(s, page, p);
815         }
816 
817         if (!s->offset && val == SLUB_RED_ACTIVE)
818                 /*
819                  * Object and freepointer overlap. Cannot check
820                  * freepointer while object is allocated.
821                  */
822                 return 1;
823 
824         /* Check free pointer validity */
825         if (!check_valid_pointer(s, page, get_freepointer(s, p))) {
826                 object_err(s, page, p, "Freepointer corrupt");
827                 /*
828                  * No choice but to zap it and thus lose the remainder
829                  * of the free objects in this slab. May cause
830                  * another error because the object count is now wrong.
831                  */
832                 set_freepointer(s, p, NULL);
833                 return 0;
834         }
835         return 1;
836 }
837 
838 static int check_slab(struct kmem_cache *s, struct page *page)
839 {
840         int maxobj;
841 
842         VM_BUG_ON(!irqs_disabled());
843 
844         if (!PageSlab(page)) {
845                 slab_err(s, page, "Not a valid slab page");
846                 return 0;
847         }
848 
849         maxobj = order_objects(compound_order(page), s->size, s->reserved);
850         if (page->objects > maxobj) {
851                 slab_err(s, page, "objects %u > max %u",
852                         s->name, page->objects, maxobj);
853                 return 0;
854         }
855         if (page->inuse > page->objects) {
856                 slab_err(s, page, "inuse %u > max %u",
857                         s->name, page->inuse, page->objects);
858                 return 0;
859         }
860         /* Slab_pad_check fixes things up after itself */
861         slab_pad_check(s, page);
862         return 1;
863 }
864 
865 /*
866  * Determine if a certain object on a page is on the freelist. Must hold the
867  * slab lock to guarantee that the chains are in a consistent state.
868  */
869 static int on_freelist(struct kmem_cache *s, struct page *page, void *search)
870 {
871         int nr = 0;
872         void *fp;
873         void *object = NULL;
874         unsigned long max_objects;
875 
876         fp = page->freelist;
877         while (fp && nr <= page->objects) {
878                 if (fp == search)
879                         return 1;
880                 if (!check_valid_pointer(s, page, fp)) {
881                         if (object) {
882                                 object_err(s, page, object,
883                                         "Freechain corrupt");
884                                 set_freepointer(s, object, NULL);
885                         } else {
886                                 slab_err(s, page, "Freepointer corrupt");
887                                 page->freelist = NULL;
888                                 page->inuse = page->objects;
889                                 slab_fix(s, "Freelist cleared");
890                                 return 0;
891                         }
892                         break;
893                 }
894                 object = fp;
895                 fp = get_freepointer(s, object);
896                 nr++;
897         }
898 
899         max_objects = order_objects(compound_order(page), s->size, s->reserved);
900         if (max_objects > MAX_OBJS_PER_PAGE)
901                 max_objects = MAX_OBJS_PER_PAGE;
902 
903         if (page->objects != max_objects) {
904                 slab_err(s, page, "Wrong number of objects. Found %d but "
905                         "should be %d", page->objects, max_objects);
906                 page->objects = max_objects;
907                 slab_fix(s, "Number of objects adjusted.");
908         }
909         if (page->inuse != page->objects - nr) {
910                 slab_err(s, page, "Wrong object count. Counter is %d but "
911                         "counted were %d", page->inuse, page->objects - nr);
912                 page->inuse = page->objects - nr;
913                 slab_fix(s, "Object count adjusted.");
914         }
915         return search == NULL;
916 }
917 
918 static void trace(struct kmem_cache *s, struct page *page, void *object,
919                                                                 int alloc)
920 {
921         if (s->flags & SLAB_TRACE) {
922                 pr_info("TRACE %s %s 0x%p inuse=%d fp=0x%p\n",
923                         s->name,
924                         alloc ? "alloc" : "free",
925                         object, page->inuse,
926                         page->freelist);
927 
928                 if (!alloc)
929                         print_section("Object ", (void *)object,
930                                         s->object_size);
931 
932                 dump_stack();
933         }
934 }
935 
936 /*
937  * Tracking of fully allocated slabs for debugging purposes.
938  */
939 static void add_full(struct kmem_cache *s,
940         struct kmem_cache_node *n, struct page *page)
941 {
942         if (!(s->flags & SLAB_STORE_USER))
943                 return;
944 
945         lockdep_assert_held(&n->list_lock);
946         list_add(&page->lru, &n->full);
947 }
948 
949 static void remove_full(struct kmem_cache *s, struct kmem_cache_node *n, struct page *page)
950 {
951         if (!(s->flags & SLAB_STORE_USER))
952                 return;
953 
954         lockdep_assert_held(&n->list_lock);
955         list_del(&page->lru);
956 }
957 
958 /* Tracking of the number of slabs for debugging purposes */
959 static inline unsigned long slabs_node(struct kmem_cache *s, int node)
960 {
961         struct kmem_cache_node *n = get_node(s, node);
962 
963         return atomic_long_read(&n->nr_slabs);
964 }
965 
966 static inline unsigned long node_nr_slabs(struct kmem_cache_node *n)
967 {
968         return atomic_long_read(&n->nr_slabs);
969 }
970 
971 static inline void inc_slabs_node(struct kmem_cache *s, int node, int objects)
972 {
973         struct kmem_cache_node *n = get_node(s, node);
974 
975         /*
976          * May be called early in order to allocate a slab for the
977          * kmem_cache_node structure. Solve the chicken-egg
978          * dilemma by deferring the increment of the count during
979          * bootstrap (see early_kmem_cache_node_alloc).
980          */
981         if (likely(n)) {
982                 atomic_long_inc(&n->nr_slabs);
983                 atomic_long_add(objects, &n->total_objects);
984         }
985 }
986 static inline void dec_slabs_node(struct kmem_cache *s, int node, int objects)
987 {
988         struct kmem_cache_node *n = get_node(s, node);
989 
990         atomic_long_dec(&n->nr_slabs);
991         atomic_long_sub(objects, &n->total_objects);
992 }
993 
994 /* Object debug checks for alloc/free paths */
995 static void setup_object_debug(struct kmem_cache *s, struct page *page,
996                                                                 void *object)
997 {
998         if (!(s->flags & (SLAB_STORE_USER|SLAB_RED_ZONE|__OBJECT_POISON)))
999                 return;
1000 
1001         init_object(s, object, SLUB_RED_INACTIVE);
1002         init_tracking(s, object);
1003 }
1004 
1005 static noinline int alloc_debug_processing(struct kmem_cache *s,
1006                                         struct page *page,
1007                                         void *object, unsigned long addr)
1008 {
1009         if (!check_slab(s, page))
1010                 goto bad;
1011 
1012         if (!check_valid_pointer(s, page, object)) {
1013                 object_err(s, page, object, "Freelist Pointer check fails");
1014                 goto bad;
1015         }
1016 
1017         if (!check_object(s, page, object, SLUB_RED_INACTIVE))
1018                 goto bad;
1019 
1020         /* Success perform special debug activities for allocs */
1021         if (s->flags & SLAB_STORE_USER)
1022                 set_track(s, object, TRACK_ALLOC, addr);
1023         trace(s, page, object, 1);
1024         init_object(s, object, SLUB_RED_ACTIVE);
1025         return 1;
1026 
1027 bad:
1028         if (PageSlab(page)) {
1029                 /*
1030                  * If this is a slab page then lets do the best we can
1031                  * to avoid issues in the future. Marking all objects
1032                  * as used avoids touching the remaining objects.
1033                  */
1034                 slab_fix(s, "Marking all objects used");
1035                 page->inuse = page->objects;
1036                 page->freelist = NULL;
1037         }
1038         return 0;
1039 }
1040 
1041 static noinline struct kmem_cache_node *free_debug_processing(
1042         struct kmem_cache *s, struct page *page, void *object,
1043         unsigned long addr, unsigned long *flags)
1044 {
1045         struct kmem_cache_node *n = get_node(s, page_to_nid(page));
1046 
1047         spin_lock_irqsave(&n->list_lock, *flags);
1048         slab_lock(page);
1049 
1050         if (!check_slab(s, page))
1051                 goto fail;
1052 
1053         if (!check_valid_pointer(s, page, object)) {
1054                 slab_err(s, page, "Invalid object pointer 0x%p", object);
1055                 goto fail;
1056         }
1057 
1058         if (on_freelist(s, page, object)) {
1059                 object_err(s, page, object, "Object already free");
1060                 goto fail;
1061         }
1062 
1063         if (!check_object(s, page, object, SLUB_RED_ACTIVE))
1064                 goto out;
1065 
1066         if (unlikely(s != page->slab_cache)) {
1067                 if (!PageSlab(page)) {
1068                         slab_err(s, page, "Attempt to free object(0x%p) "
1069                                 "outside of slab", object);
1070                 } else if (!page->slab_cache) {
1071                         pr_err("SLUB <none>: no slab for object 0x%p.\n",
1072                                object);
1073                         dump_stack();
1074                 } else
1075                         object_err(s, page, object,
1076                                         "page slab pointer corrupt.");
1077                 goto fail;
1078         }
1079 
1080         if (s->flags & SLAB_STORE_USER)
1081                 set_track(s, object, TRACK_FREE, addr);
1082         trace(s, page, object, 0);
1083         init_object(s, object, SLUB_RED_INACTIVE);
1084 out:
1085         slab_unlock(page);
1086         /*
1087          * Keep node_lock to preserve integrity
1088          * until the object is actually freed
1089          */
1090         return n;
1091 
1092 fail:
1093         slab_unlock(page);
1094         spin_unlock_irqrestore(&n->list_lock, *flags);
1095         slab_fix(s, "Object at 0x%p not freed", object);
1096         return NULL;
1097 }
1098 
1099 static int __init setup_slub_debug(char *str)
1100 {
1101         slub_debug = DEBUG_DEFAULT_FLAGS;
1102         if (*str++ != '=' || !*str)
1103                 /*
1104                  * No options specified. Switch on full debugging.
1105                  */
1106                 goto out;
1107 
1108         if (*str == ',')
1109                 /*
1110                  * No options but restriction on slabs. This means full
1111                  * debugging for slabs matching a pattern.
1112                  */
1113                 goto check_slabs;
1114 
1115         if (tolower(*str) == 'o') {
1116                 /*
1117                  * Avoid enabling debugging on caches if its minimum order
1118                  * would increase as a result.
1119                  */
1120                 disable_higher_order_debug = 1;
1121                 goto out;
1122         }
1123 
1124         slub_debug = 0;
1125         if (*str == '-')
1126                 /*
1127                  * Switch off all debugging measures.
1128                  */
1129                 goto out;
1130 
1131         /*
1132          * Determine which debug features should be switched on
1133          */
1134         for (; *str && *str != ','; str++) {
1135                 switch (tolower(*str)) {
1136                 case 'f':
1137                         slub_debug |= SLAB_DEBUG_FREE;
1138                         break;
1139                 case 'z':
1140                         slub_debug |= SLAB_RED_ZONE;
1141                         break;
1142                 case 'p':
1143                         slub_debug |= SLAB_POISON;
1144                         break;
1145                 case 'u':
1146                         slub_debug |= SLAB_STORE_USER;
1147                         break;
1148                 case 't':
1149                         slub_debug |= SLAB_TRACE;
1150                         break;
1151                 case 'a':
1152                         slub_debug |= SLAB_FAILSLAB;
1153                         break;
1154                 default:
1155                         pr_err("slub_debug option '%c' unknown. skipped\n",
1156                                *str);
1157                 }
1158         }
1159 
1160 check_slabs:
1161         if (*str == ',')
1162                 slub_debug_slabs = str + 1;
1163 out:
1164         return 1;
1165 }
1166 
1167 __setup("slub_debug", setup_slub_debug);
1168 
1169 unsigned long kmem_cache_flags(unsigned long object_size,
1170         unsigned long flags, const char *name,
1171         void (*ctor)(void *))
1172 {
1173         /*
1174          * Enable debugging if selected on the kernel commandline.
1175          */
1176         if (slub_debug && (!slub_debug_slabs || (name &&
1177                 !strncmp(slub_debug_slabs, name, strlen(slub_debug_slabs)))))
1178                 flags |= slub_debug;
1179 
1180         return flags;
1181 }
1182 #else
1183 static inline void setup_object_debug(struct kmem_cache *s,
1184                         struct page *page, void *object) {}
1185 
1186 static inline int alloc_debug_processing(struct kmem_cache *s,
1187         struct page *page, void *object, unsigned long addr) { return 0; }
1188 
1189 static inline struct kmem_cache_node *free_debug_processing(
1190         struct kmem_cache *s, struct page *page, void *object,
1191         unsigned long addr, unsigned long *flags) { return NULL; }
1192 
1193 static inline int slab_pad_check(struct kmem_cache *s, struct page *page)
1194                         { return 1; }
1195 static inline int check_object(struct kmem_cache *s, struct page *page,
1196                         void *object, u8 val) { return 1; }
1197 static inline void add_full(struct kmem_cache *s, struct kmem_cache_node *n,
1198                                         struct page *page) {}
1199 static inline void remove_full(struct kmem_cache *s, struct kmem_cache_node *n,
1200                                         struct page *page) {}
1201 unsigned long kmem_cache_flags(unsigned long object_size,
1202         unsigned long flags, const char *name,
1203         void (*ctor)(void *))
1204 {
1205         return flags;
1206 }
1207 #define slub_debug 0
1208 
1209 #define disable_higher_order_debug 0
1210 
1211 static inline unsigned long slabs_node(struct kmem_cache *s, int node)
1212                                                         { return 0; }
1213 static inline unsigned long node_nr_slabs(struct kmem_cache_node *n)
1214                                                         { return 0; }
1215 static inline void inc_slabs_node(struct kmem_cache *s, int node,
1216                                                         int objects) {}
1217 static inline void dec_slabs_node(struct kmem_cache *s, int node,
1218                                                         int objects) {}
1219 
1220 #endif /* CONFIG_SLUB_DEBUG */
1221 
1222 /*
1223  * Hooks for other subsystems that check memory allocations. In a typical
1224  * production configuration these hooks all should produce no code at all.
1225  */
1226 static inline void kmalloc_large_node_hook(void *ptr, size_t size, gfp_t flags)
1227 {
1228         kmemleak_alloc(ptr, size, 1, flags);
1229 }
1230 
1231 static inline void kfree_hook(const void *x)
1232 {
1233         kmemleak_free(x);
1234 }
1235 
1236 static inline int slab_pre_alloc_hook(struct kmem_cache *s, gfp_t flags)
1237 {
1238         flags &= gfp_allowed_mask;
1239         lockdep_trace_alloc(flags);
1240         might_sleep_if(flags & __GFP_WAIT);
1241 
1242         return should_failslab(s->object_size, flags, s->flags);
1243 }
1244 
1245 static inline void slab_post_alloc_hook(struct kmem_cache *s,
1246                                         gfp_t flags, void *object)
1247 {
1248         flags &= gfp_allowed_mask;
1249         kmemcheck_slab_alloc(s, flags, object, slab_ksize(s));
1250         kmemleak_alloc_recursive(object, s->object_size, 1, s->flags, flags);
1251 }
1252 
1253 static inline void slab_free_hook(struct kmem_cache *s, void *x)
1254 {
1255         kmemleak_free_recursive(x, s->flags);
1256 
1257         /*
1258          * Trouble is that we may no longer disable interrupts in the fast path
1259          * So in order to make the debug calls that expect irqs to be
1260          * disabled we need to disable interrupts temporarily.
1261          */
1262 #if defined(CONFIG_KMEMCHECK) || defined(CONFIG_LOCKDEP)
1263         {
1264                 unsigned long flags;
1265 
1266                 local_irq_save(flags);
1267                 kmemcheck_slab_free(s, x, s->object_size);
1268                 debug_check_no_locks_freed(x, s->object_size);
1269                 local_irq_restore(flags);
1270         }
1271 #endif
1272         if (!(s->flags & SLAB_DEBUG_OBJECTS))
1273                 debug_check_no_obj_freed(x, s->object_size);
1274 }
1275 
1276 /*
1277  * Slab allocation and freeing
1278  */
1279 static inline struct page *alloc_slab_page(struct kmem_cache *s,
1280                 gfp_t flags, int node, struct kmem_cache_order_objects oo)
1281 {
1282         struct page *page;
1283         int order = oo_order(oo);
1284 
1285         flags |= __GFP_NOTRACK;
1286 
1287         if (memcg_charge_slab(s, flags, order))
1288                 return NULL;
1289 
1290         if (node == NUMA_NO_NODE)
1291                 page = alloc_pages(flags, order);
1292         else
1293                 page = alloc_pages_exact_node(node, flags, order);
1294 
1295         if (!page)
1296                 memcg_uncharge_slab(s, order);
1297 
1298         return page;
1299 }
1300 
1301 static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
1302 {
1303         struct page *page;
1304         struct kmem_cache_order_objects oo = s->oo;
1305         gfp_t alloc_gfp;
1306 
1307         flags &= gfp_allowed_mask;
1308 
1309         if (flags & __GFP_WAIT)
1310                 local_irq_enable();
1311 
1312         flags |= s->allocflags;
1313 
1314         /*
1315          * Let the initial higher-order allocation fail under memory pressure
1316          * so we fall-back to the minimum order allocation.
1317          */
1318         alloc_gfp = (flags | __GFP_NOWARN | __GFP_NORETRY) & ~__GFP_NOFAIL;
1319 
1320         page = alloc_slab_page(s, alloc_gfp, node, oo);
1321         if (unlikely(!page)) {
1322                 oo = s->min;
1323                 alloc_gfp = flags;
1324                 /*
1325                  * Allocation may have failed due to fragmentation.
1326                  * Try a lower order alloc if possible
1327                  */
1328                 page = alloc_slab_page(s, alloc_gfp, node, oo);
1329 
1330                 if (page)
1331                         stat(s, ORDER_FALLBACK);
1332         }
1333 
1334         if (kmemcheck_enabled && page
1335                 && !(s->flags & (SLAB_NOTRACK | DEBUG_DEFAULT_FLAGS))) {
1336                 int pages = 1 << oo_order(oo);
1337 
1338                 kmemcheck_alloc_shadow(page, oo_order(oo), alloc_gfp, node);
1339 
1340                 /*
1341                  * Objects from caches that have a constructor don't get
1342                  * cleared when they're allocated, so we need to do it here.
1343                  */
1344                 if (s->ctor)
1345                         kmemcheck_mark_uninitialized_pages(page, pages);
1346                 else
1347                         kmemcheck_mark_unallocated_pages(page, pages);
1348         }
1349 
1350         if (flags & __GFP_WAIT)
1351                 local_irq_disable();
1352         if (!page)
1353                 return NULL;
1354 
1355         page->objects = oo_objects(oo);
1356         mod_zone_page_state(page_zone(page),
1357                 (s->flags & SLAB_RECLAIM_ACCOUNT) ?
1358                 NR_SLAB_RECLAIMABLE : NR_SLAB_UNRECLAIMABLE,
1359                 1 << oo_order(oo));
1360 
1361         return page;
1362 }
1363 
1364 static void setup_object(struct kmem_cache *s, struct page *page,
1365                                 void *object)
1366 {
1367         setup_object_debug(s, page, object);
1368         if (unlikely(s->ctor))
1369                 s->ctor(object);
1370 }
1371 
1372 static struct page *new_slab(struct kmem_cache *s, gfp_t flags, int node)
1373 {
1374         struct page *page;
1375         void *start;
1376         void *p;
1377         int order;
1378         int idx;
1379 
1380         BUG_ON(flags & GFP_SLAB_BUG_MASK);
1381 
1382         page = allocate_slab(s,
1383                 flags & (GFP_RECLAIM_MASK | GFP_CONSTRAINT_MASK), node);
1384         if (!page)
1385                 goto out;
1386 
1387         order = compound_order(page);
1388         inc_slabs_node(s, page_to_nid(page), page->objects);
1389         page->slab_cache = s;
1390         __SetPageSlab(page);
1391         if (page->pfmemalloc)
1392                 SetPageSlabPfmemalloc(page);
1393 
1394         start = page_address(page);
1395 
1396         if (unlikely(s->flags & SLAB_POISON))
1397                 memset(start, POISON_INUSE, PAGE_SIZE << order);
1398 
1399         for_each_object_idx(p, idx, s, start, page->objects) {
1400                 setup_object(s, page, p);
1401                 if (likely(idx < page->objects))
1402                         set_freepointer(s, p, p + s->size);
1403                 else
1404                         set_freepointer(s, p, NULL);
1405         }
1406 
1407         page->freelist = start;
1408         page->inuse = page->objects;
1409         page->frozen = 1;
1410 out:
1411         return page;
1412 }
1413 
1414 static void __free_slab(struct kmem_cache *s, struct page *page)
1415 {
1416         int order = compound_order(page);
1417         int pages = 1 << order;
1418 
1419         if (kmem_cache_debug(s)) {
1420                 void *p;
1421 
1422                 slab_pad_check(s, page);
1423                 for_each_object(p, s, page_address(page),
1424                                                 page->objects)
1425                         check_object(s, page, p, SLUB_RED_INACTIVE);
1426         }
1427 
1428         kmemcheck_free_shadow(page, compound_order(page));
1429 
1430         mod_zone_page_state(page_zone(page),
1431                 (s->flags & SLAB_RECLAIM_ACCOUNT) ?
1432                 NR_SLAB_RECLAIMABLE : NR_SLAB_UNRECLAIMABLE,
1433                 -pages);
1434 
1435         __ClearPageSlabPfmemalloc(page);
1436         __ClearPageSlab(page);
1437 
1438         page_mapcount_reset(page);
1439         if (current->reclaim_state)
1440                 current->reclaim_state->reclaimed_slab += pages;
1441         __free_pages(page, order);
1442         memcg_uncharge_slab(s, order);
1443 }
1444 
1445 #define need_reserve_slab_rcu                                           \
1446         (sizeof(((struct page *)NULL)->lru) < sizeof(struct rcu_head))
1447 
1448 static void rcu_free_slab(struct rcu_head *h)
1449 {
1450         struct page *page;
1451 
1452         if (need_reserve_slab_rcu)
1453                 page = virt_to_head_page(h);
1454         else
1455                 page = container_of((struct list_head *)h, struct page, lru);
1456 
1457         __free_slab(page->slab_cache, page);
1458 }
1459 
1460 static void free_slab(struct kmem_cache *s, struct page *page)
1461 {
1462         if (unlikely(s->flags & SLAB_DESTROY_BY_RCU)) {
1463                 struct rcu_head *head;
1464 
1465                 if (need_reserve_slab_rcu) {
1466                         int order = compound_order(page);
1467                         int offset = (PAGE_SIZE << order) - s->reserved;
1468 
1469                         VM_BUG_ON(s->reserved != sizeof(*head));
1470                         head = page_address(page) + offset;
1471                 } else {
1472                         /*
1473                          * RCU free overloads the RCU head over the LRU
1474                          */
1475                         head = (void *)&page->lru;
1476                 }
1477 
1478                 call_rcu(head, rcu_free_slab);
1479         } else
1480                 __free_slab(s, page);
1481 }
1482 
1483 static void discard_slab(struct kmem_cache *s, struct page *page)
1484 {
1485         dec_slabs_node(s, page_to_nid(page), page->objects);
1486         free_slab(s, page);
1487 }
1488 
1489 /*
1490  * Management of partially allocated slabs.
1491  */
1492 static inline void
1493 __add_partial(struct kmem_cache_node *n, struct page *page, int tail)
1494 {
1495         n->nr_partial++;
1496         if (tail == DEACTIVATE_TO_TAIL)
1497                 list_add_tail(&page->lru, &n->partial);
1498         else
1499                 list_add(&page->lru, &n->partial);
1500 }
1501 
1502 static inline void add_partial(struct kmem_cache_node *n,
1503                                 struct page *page, int tail)
1504 {
1505         lockdep_assert_held(&n->list_lock);
1506         __add_partial(n, page, tail);
1507 }
1508 
1509 static inline void
1510 __remove_partial(struct kmem_cache_node *n, struct page *page)
1511 {
1512         list_del(&page->lru);
1513         n->nr_partial--;
1514 }
1515 
1516 static inline void remove_partial(struct kmem_cache_node *n,
1517                                         struct page *page)
1518 {
1519         lockdep_assert_held(&n->list_lock);
1520         __remove_partial(n, page);
1521 }
1522 
1523 /*
1524  * Remove slab from the partial list, freeze it and
1525  * return the pointer to the freelist.
1526  *
1527  * Returns a list of objects or NULL if it fails.
1528  */
1529 static inline void *acquire_slab(struct kmem_cache *s,
1530                 struct kmem_cache_node *n, struct page *page,
1531                 int mode, int *objects)
1532 {
1533         void *freelist;
1534         unsigned long counters;
1535         struct page new;
1536 
1537         lockdep_assert_held(&n->list_lock);
1538 
1539         /*
1540          * Zap the freelist and set the frozen bit.
1541          * The old freelist is the list of objects for the
1542          * per cpu allocation list.
1543          */
1544         freelist = page->freelist;
1545         counters = page->counters;
1546         new.counters = counters;
1547         *objects = new.objects - new.inuse;
1548         if (mode) {
1549                 new.inuse = page->objects;
1550                 new.freelist = NULL;
1551         } else {
1552                 new.freelist = freelist;
1553         }
1554 
1555         VM_BUG_ON(new.frozen);
1556         new.frozen = 1;
1557 
1558         if (!__cmpxchg_double_slab(s, page,
1559                         freelist, counters,
1560                         new.freelist, new.counters,
1561                         "acquire_slab"))
1562                 return NULL;
1563 
1564         remove_partial(n, page);
1565         WARN_ON(!freelist);
1566         return freelist;
1567 }
1568 
1569 static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain);
1570 static inline bool pfmemalloc_match(struct page *page, gfp_t gfpflags);
1571 
1572 /*
1573  * Try to allocate a partial slab from a specific node.
1574  */
1575 static void *get_partial_node(struct kmem_cache *s, struct kmem_cache_node *n,
1576                                 struct kmem_cache_cpu *c, gfp_t flags)
1577 {
1578         struct page *page, *page2;
1579         void *object = NULL;
1580         int available = 0;
1581         int objects;
1582 
1583         /*
1584          * Racy check. If we mistakenly see no partial slabs then we
1585          * just allocate an empty slab. If we mistakenly try to get a
1586          * partial slab and there is none available then get_partials()
1587          * will return NULL.
1588          */
1589         if (!n || !n->nr_partial)
1590                 return NULL;
1591 
1592         spin_lock(&n->list_lock);
1593         list_for_each_entry_safe(page, page2, &n->partial, lru) {
1594                 void *t;
1595 
1596                 if (!pfmemalloc_match(page, flags))
1597                         continue;
1598 
1599                 t = acquire_slab(s, n, page, object == NULL, &objects);
1600                 if (!t)
1601                         break;
1602 
1603                 available += objects;
1604                 if (!object) {
1605                         c->page = page;
1606                         stat(s, ALLOC_FROM_PARTIAL);
1607                         object = t;
1608                 } else {
1609                         put_cpu_partial(s, page, 0);
1610                         stat(s, CPU_PARTIAL_NODE);
1611                 }
1612                 if (!kmem_cache_has_cpu_partial(s)
1613                         || available > s->cpu_partial / 2)
1614                         break;
1615 
1616         }
1617         spin_unlock(&n->list_lock);
1618         return object;
1619 }
1620 
1621 /*
1622  * Get a page from somewhere. Search in increasing NUMA distances.
1623  */
1624 static void *get_any_partial(struct kmem_cache *s, gfp_t flags,
1625                 struct kmem_cache_cpu *c)
1626 {
1627 #ifdef CONFIG_NUMA
1628         struct zonelist *zonelist;
1629         struct zoneref *z;
1630         struct zone *zone;
1631         enum zone_type high_zoneidx = gfp_zone(flags);
1632         void *object;
1633         unsigned int cpuset_mems_cookie;
1634 
1635         /*
1636          * The defrag ratio allows a configuration of the tradeoffs between
1637          * inter node defragmentation and node local allocations. A lower
1638          * defrag_ratio increases the tendency to do local allocations
1639          * instead of attempting to obtain partial slabs from other nodes.
1640          *
1641          * If the defrag_ratio is set to 0 then kmalloc() always
1642          * returns node local objects. If the ratio is higher then kmalloc()
1643          * may return off node objects because partial slabs are obtained
1644          * from other nodes and filled up.
1645          *
1646          * If /sys/kernel/slab/xx/defrag_ratio is set to 100 (which makes
1647          * defrag_ratio = 1000) then every (well almost) allocation will
1648          * first attempt to defrag slab caches on other nodes. This means
1649          * scanning over all nodes to look for partial slabs which may be
1650          * expensive if we do it every time we are trying to find a slab
1651          * with available objects.
1652          */
1653         if (!s->remote_node_defrag_ratio ||
1654                         get_cycles() % 1024 > s->remote_node_defrag_ratio)
1655                 return NULL;
1656 
1657         do {
1658                 cpuset_mems_cookie = read_mems_allowed_begin();
1659                 zonelist = node_zonelist(mempolicy_slab_node(), flags);
1660                 for_each_zone_zonelist(zone, z, zonelist, high_zoneidx) {
1661                         struct kmem_cache_node *n;
1662 
1663                         n = get_node(s, zone_to_nid(zone));
1664 
1665                         if (n && cpuset_zone_allowed_hardwall(zone, flags) &&
1666                                         n->nr_partial > s->min_partial) {
1667                                 object = get_partial_node(s, n, c, flags);
1668                                 if (object) {
1669                                         /*
1670                                          * Don't check read_mems_allowed_retry()
1671                                          * here - if mems_allowed was updated in
1672                                          * parallel, that was a harmless race
1673                                          * between allocation and the cpuset
1674                                          * update
1675                                          */
1676                                         return object;
1677                                 }
1678                         }
1679                 }
1680         } while (read_mems_allowed_retry(cpuset_mems_cookie));
1681 #endif
1682         return NULL;
1683 }
1684 
1685 /*
1686  * Get a partial page, lock it and return it.
1687  */
1688 static void *get_partial(struct kmem_cache *s, gfp_t flags, int node,
1689                 struct kmem_cache_cpu *c)
1690 {
1691         void *object;
1692         int searchnode = node;
1693 
1694         if (node == NUMA_NO_NODE)
1695                 searchnode = numa_mem_id();
1696         else if (!node_present_pages(node))
1697                 searchnode = node_to_mem_node(node);
1698 
1699         object = get_partial_node(s, get_node(s, searchnode), c, flags);
1700         if (object || node != NUMA_NO_NODE)
1701                 return object;
1702 
1703         return get_any_partial(s, flags, c);
1704 }
1705 
1706 #ifdef CONFIG_PREEMPT
1707 /*
1708  * Calculate the next globally unique transaction for disambiguiation
1709  * during cmpxchg. The transactions start with the cpu number and are then
1710  * incremented by CONFIG_NR_CPUS.
1711  */
1712 #define TID_STEP  roundup_pow_of_two(CONFIG_NR_CPUS)
1713 #else
1714 /*
1715  * No preemption supported therefore also no need to check for
1716  * different cpus.
1717  */
1718 #define TID_STEP 1
1719 #endif
1720 
1721 static inline unsigned long next_tid(unsigned long tid)
1722 {
1723         return tid + TID_STEP;
1724 }
1725 
1726 static inline unsigned int tid_to_cpu(unsigned long tid)
1727 {
1728         return tid % TID_STEP;
1729 }
1730 
1731 static inline unsigned long tid_to_event(unsigned long tid)
1732 {
1733         return tid / TID_STEP;
1734 }
1735 
1736 static inline unsigned int init_tid(int cpu)
1737 {
1738         return cpu;
1739 }
1740 
1741 static inline void note_cmpxchg_failure(const char *n,
1742                 const struct kmem_cache *s, unsigned long tid)
1743 {
1744 #ifdef SLUB_DEBUG_CMPXCHG
1745         unsigned long actual_tid = __this_cpu_read(s->cpu_slab->tid);
1746 
1747         pr_info("%s %s: cmpxchg redo ", n, s->name);
1748 
1749 #ifdef CONFIG_PREEMPT
1750         if (tid_to_cpu(tid) != tid_to_cpu(actual_tid))
1751                 pr_warn("due to cpu change %d -> %d\n",
1752                         tid_to_cpu(tid), tid_to_cpu(actual_tid));
1753         else
1754 #endif
1755         if (tid_to_event(tid) != tid_to_event(actual_tid))
1756                 pr_warn("due to cpu running other code. Event %ld->%ld\n",
1757                         tid_to_event(tid), tid_to_event(actual_tid));
1758         else
1759                 pr_warn("for unknown reason: actual=%lx was=%lx target=%lx\n",
1760                         actual_tid, tid, next_tid(tid));
1761 #endif
1762         stat(s, CMPXCHG_DOUBLE_CPU_FAIL);
1763 }
1764 
1765 static void init_kmem_cache_cpus(struct kmem_cache *s)
1766 {
1767         int cpu;
1768 
1769         for_each_possible_cpu(cpu)
1770                 per_cpu_ptr(s->cpu_slab, cpu)->tid = init_tid(cpu);
1771 }
1772 
1773 /*
1774  * Remove the cpu slab
1775  */
1776 static void deactivate_slab(struct kmem_cache *s, struct page *page,
1777                                 void *freelist)
1778 {
1779         enum slab_modes { M_NONE, M_PARTIAL, M_FULL, M_FREE };
1780         struct kmem_cache_node *n = get_node(s, page_to_nid(page));
1781         int lock = 0;
1782         enum slab_modes l = M_NONE, m = M_NONE;
1783         void *nextfree;
1784         int tail = DEACTIVATE_TO_HEAD;
1785         struct page new;
1786         struct page old;
1787 
1788         if (page->freelist) {
1789                 stat(s, DEACTIVATE_REMOTE_FREES);
1790                 tail = DEACTIVATE_TO_TAIL;
1791         }
1792 
1793         /*
1794          * Stage one: Free all available per cpu objects back
1795          * to the page freelist while it is still frozen. Leave the
1796          * last one.
1797          *
1798          * There is no need to take the list->lock because the page
1799          * is still frozen.
1800          */
1801         while (freelist && (nextfree = get_freepointer(s, freelist))) {
1802                 void *prior;
1803                 unsigned long counters;
1804 
1805                 do {
1806                         prior = page->freelist;
1807                         counters = page->counters;
1808                         set_freepointer(s, freelist, prior);
1809                         new.counters = counters;
1810                         new.inuse--;
1811                         VM_BUG_ON(!new.frozen);
1812 
1813                 } while (!__cmpxchg_double_slab(s, page,
1814                         prior, counters,
1815                         freelist, new.counters,
1816                         "drain percpu freelist"));
1817 
1818                 freelist = nextfree;
1819         }
1820 
1821         /*
1822          * Stage two: Ensure that the page is unfrozen while the
1823          * list presence reflects the actual number of objects
1824          * during unfreeze.
1825          *
1826          * We setup the list membership and then perform a cmpxchg
1827          * with the count. If there is a mismatch then the page
1828          * is not unfrozen but the page is on the wrong list.
1829          *
1830          * Then we restart the process which may have to remove
1831          * the page from the list that we just put it on again
1832          * because the number of objects in the slab may have
1833          * changed.
1834          */
1835 redo:
1836 
1837         old.freelist = page->freelist;
1838         old.counters = page->counters;
1839         VM_BUG_ON(!old.frozen);
1840 
1841         /* Determine target state of the slab */
1842         new.counters = old.counters;
1843         if (freelist) {
1844                 new.inuse--;
1845                 set_freepointer(s, freelist, old.freelist);
1846                 new.freelist = freelist;
1847         } else
1848                 new.freelist = old.freelist;
1849 
1850         new.frozen = 0;
1851 
1852         if (!new.inuse && n->nr_partial >= s->min_partial)
1853                 m = M_FREE;
1854         else if (new.freelist) {
1855                 m = M_PARTIAL;
1856                 if (!lock) {
1857                         lock = 1;
1858                         /*
1859                          * Taking the spinlock removes the possiblity
1860                          * that acquire_slab() will see a slab page that
1861                          * is frozen
1862                          */
1863                         spin_lock(&n->list_lock);
1864                 }
1865         } else {
1866                 m = M_FULL;
1867                 if (kmem_cache_debug(s) && !lock) {
1868                         lock = 1;
1869                         /*
1870                          * This also ensures that the scanning of full
1871                          * slabs from diagnostic functions will not see
1872                          * any frozen slabs.
1873                          */
1874                         spin_lock(&n->list_lock);
1875                 }
1876         }
1877 
1878         if (l != m) {
1879 
1880                 if (l == M_PARTIAL)
1881 
1882                         remove_partial(n, page);
1883 
1884                 else if (l == M_FULL)
1885 
1886                         remove_full(s, n, page);
1887 
1888                 if (m == M_PARTIAL) {
1889 
1890                         add_partial(n, page, tail);
1891                         stat(s, tail);
1892 
1893                 } else if (m == M_FULL) {
1894 
1895                         stat(s, DEACTIVATE_FULL);
1896                         add_full(s, n, page);
1897 
1898                 }
1899         }
1900 
1901         l = m;
1902         if (!__cmpxchg_double_slab(s, page,
1903                                 old.freelist, old.counters,
1904                                 new.freelist, new.counters,
1905                                 "unfreezing slab"))
1906                 goto redo;
1907 
1908         if (lock)
1909                 spin_unlock(&n->list_lock);
1910 
1911         if (m == M_FREE) {
1912                 stat(s, DEACTIVATE_EMPTY);
1913                 discard_slab(s, page);
1914                 stat(s, FREE_SLAB);
1915         }
1916 }
1917 
1918 /*
1919  * Unfreeze all the cpu partial slabs.
1920  *
1921  * This function must be called with interrupts disabled
1922  * for the cpu using c (or some other guarantee must be there
1923  * to guarantee no concurrent accesses).
1924  */
1925 static void unfreeze_partials(struct kmem_cache *s,
1926                 struct kmem_cache_cpu *c)
1927 {
1928 #ifdef CONFIG_SLUB_CPU_PARTIAL
1929         struct kmem_cache_node *n = NULL, *n2 = NULL;
1930         struct page *page, *discard_page = NULL;
1931 
1932         while ((page = c->partial)) {
1933                 struct page new;
1934                 struct page old;
1935 
1936                 c->partial = page->next;
1937 
1938                 n2 = get_node(s, page_to_nid(page));
1939                 if (n != n2) {
1940                         if (n)
1941                                 spin_unlock(&n->list_lock);
1942 
1943                         n = n2;
1944                         spin_lock(&n->list_lock);
1945                 }
1946 
1947                 do {
1948 
1949                         old.freelist = page->freelist;
1950                         old.counters = page->counters;
1951                         VM_BUG_ON(!old.frozen);
1952 
1953                         new.counters = old.counters;
1954                         new.freelist = old.freelist;
1955 
1956                         new.frozen = 0;
1957 
1958                 } while (!__cmpxchg_double_slab(s, page,
1959                                 old.freelist, old.counters,
1960                                 new.freelist, new.counters,
1961                                 "unfreezing slab"));
1962 
1963                 if (unlikely(!new.inuse && n->nr_partial >= s->min_partial)) {
1964                         page->next = discard_page;
1965                         discard_page = page;
1966                 } else {
1967                         add_partial(n, page, DEACTIVATE_TO_TAIL);
1968                         stat(s, FREE_ADD_PARTIAL);
1969                 }
1970         }
1971 
1972         if (n)
1973                 spin_unlock(&n->list_lock);
1974 
1975         while (discard_page) {
1976                 page = discard_page;
1977                 discard_page = discard_page->next;
1978 
1979                 stat(s, DEACTIVATE_EMPTY);
1980                 discard_slab(s, page);
1981                 stat(s, FREE_SLAB);
1982         }
1983 #endif
1984 }
1985 
1986 /*
1987  * Put a page that was just frozen (in __slab_free) into a partial page
1988  * slot if available. This is done without interrupts disabled and without
1989  * preemption disabled. The cmpxchg is racy and may put the partial page
1990  * onto a random cpus partial slot.
1991  *
1992  * If we did not find a slot then simply move all the partials to the
1993  * per node partial list.
1994  */
1995 static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
1996 {
1997 #ifdef CONFIG_SLUB_CPU_PARTIAL
1998         struct page *oldpage;
1999         int pages;
2000         int pobjects;
2001 
2002         do {
2003                 pages = 0;
2004                 pobjects = 0;
2005                 oldpage = this_cpu_read(s->cpu_slab->partial);
2006 
2007                 if (oldpage) {
2008                         pobjects = oldpage->pobjects;
2009                         pages = oldpage->pages;
2010                         if (drain && pobjects > s->cpu_partial) {
2011                                 unsigned long flags;
2012                                 /*
2013                                  * partial array is full. Move the existing
2014                                  * set to the per node partial list.
2015                                  */
2016                                 local_irq_save(flags);
2017                                 unfreeze_partials(s, this_cpu_ptr(s->cpu_slab));
2018                                 local_irq_restore(flags);
2019                                 oldpage = NULL;
2020                                 pobjects = 0;
2021                                 pages = 0;
2022                                 stat(s, CPU_PARTIAL_DRAIN);
2023                         }
2024                 }
2025 
2026                 pages++;
2027                 pobjects += page->objects - page->inuse;
2028 
2029                 page->pages = pages;
2030                 page->pobjects = pobjects;
2031                 page->next = oldpage;
2032 
2033         } while (this_cpu_cmpxchg(s->cpu_slab->partial, oldpage, page)
2034                                                                 != oldpage);
2035 #endif
2036 }
2037 
2038 static inline void flush_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)
2039 {
2040         stat(s, CPUSLAB_FLUSH);
2041         deactivate_slab(s, c->page, c->freelist);
2042 
2043         c->tid = next_tid(c->tid);
2044         c->page = NULL;
2045         c->freelist = NULL;
2046 }
2047 
2048 /*
2049  * Flush cpu slab.
2050  *
2051  * Called from IPI handler with interrupts disabled.
2052  */
2053 static inline void __flush_cpu_slab(struct kmem_cache *s, int cpu)
2054 {
2055         struct kmem_cache_cpu *c = per_cpu_ptr(s->cpu_slab, cpu);
2056 
2057         if (likely(c)) {
2058                 if (c->page)
2059                         flush_slab(s, c);
2060 
2061                 unfreeze_partials(s, c);
2062         }
2063 }
2064 
2065 static void flush_cpu_slab(void *d)
2066 {
2067         struct kmem_cache *s = d;
2068 
2069         __flush_cpu_slab(s, smp_processor_id());
2070 }
2071 
2072 static bool has_cpu_slab(int cpu, void *info)
2073 {
2074         struct kmem_cache *s = info;
2075         struct kmem_cache_cpu *c = per_cpu_ptr(s->cpu_slab, cpu);
2076 
2077         return c->page || c->partial;
2078 }
2079 
2080 static void flush_all(struct kmem_cache *s)
2081 {
2082         on_each_cpu_cond(has_cpu_slab, flush_cpu_slab, s, 1, GFP_ATOMIC);
2083 }
2084 
2085 /*
2086  * Check if the objects in a per cpu structure fit numa
2087  * locality expectations.
2088  */
2089 static inline int node_match(struct page *page, int node)
2090 {
2091 #ifdef CONFIG_NUMA
2092         if (!page || (node != NUMA_NO_NODE && page_to_nid(page) != node))
2093                 return 0;
2094 #endif
2095         return 1;
2096 }
2097 
2098 #ifdef CONFIG_SLUB_DEBUG
2099 static int count_free(struct page *page)
2100 {
2101         return page->objects - page->inuse;
2102 }
2103 
2104 static inline unsigned long node_nr_objs(struct kmem_cache_node *n)
2105 {
2106         return atomic_long_read(&n->total_objects);
2107 }
2108 #endif /* CONFIG_SLUB_DEBUG */
2109 
2110 #if defined(CONFIG_SLUB_DEBUG) || defined(CONFIG_SYSFS)
2111 static unsigned long count_partial(struct kmem_cache_node *n,
2112                                         int (*get_count)(struct page *))
2113 {
2114         unsigned long flags;
2115         unsigned long x = 0;
2116         struct page *page;
2117 
2118         spin_lock_irqsave(&n->list_lock, flags);
2119         list_for_each_entry(page, &n->partial, lru)
2120                 x += get_count(page);
2121         spin_unlock_irqrestore(&n->list_lock, flags);
2122         return x;
2123 }
2124 #endif /* CONFIG_SLUB_DEBUG || CONFIG_SYSFS */
2125 
2126 static noinline void
2127 slab_out_of_memory(struct kmem_cache *s, gfp_t gfpflags, int nid)
2128 {
2129 #ifdef CONFIG_SLUB_DEBUG
2130         static DEFINE_RATELIMIT_STATE(slub_oom_rs, DEFAULT_RATELIMIT_INTERVAL,
2131                                       DEFAULT_RATELIMIT_BURST);
2132         int node;
2133         struct kmem_cache_node *n;
2134 
2135         if ((gfpflags & __GFP_NOWARN) || !__ratelimit(&slub_oom_rs))
2136                 return;
2137 
2138         pr_warn("SLUB: Unable to allocate memory on node %d (gfp=0x%x)\n",
2139                 nid, gfpflags);
2140         pr_warn("  cache: %s, object size: %d, buffer size: %d, default order: %d, min order: %d\n",
2141                 s->name, s->object_size, s->size, oo_order(s->oo),
2142                 oo_order(s->min));
2143 
2144         if (oo_order(s->min) > get_order(s->object_size))
2145                 pr_warn("  %s debugging increased min order, use slub_debug=O to disable.\n",
2146                         s->name);
2147 
2148         for_each_kmem_cache_node(s, node, n) {
2149                 unsigned long nr_slabs;
2150                 unsigned long nr_objs;
2151                 unsigned long nr_free;
2152 
2153                 nr_free  = count_partial(n, count_free);
2154                 nr_slabs = node_nr_slabs(n);
2155                 nr_objs  = node_nr_objs(n);
2156 
2157                 pr_warn("  node %d: slabs: %ld, objs: %ld, free: %ld\n",
2158                         node, nr_slabs, nr_objs, nr_free);
2159         }
2160 #endif
2161 }
2162 
2163 static inline void *new_slab_objects(struct kmem_cache *s, gfp_t flags,
2164                         int node, struct kmem_cache_cpu **pc)
2165 {
2166         void *freelist;
2167         struct kmem_cache_cpu *c = *pc;
2168         struct page *page;
2169 
2170         freelist = get_partial(s, flags, node, c);
2171 
2172         if (freelist)
2173                 return freelist;
2174 
2175         page = new_slab(s, flags, node);
2176         if (page) {
2177                 c = raw_cpu_ptr(s->cpu_slab);
2178                 if (c->page)
2179                         flush_slab(s, c);
2180 
2181                 /*
2182                  * No other reference to the page yet so we can
2183                  * muck around with it freely without cmpxchg
2184                  */
2185                 freelist = page->freelist;
2186                 page->freelist = NULL;
2187 
2188                 stat(s, ALLOC_SLAB);
2189                 c->page = page;
2190                 *pc = c;
2191         } else
2192                 freelist = NULL;
2193 
2194         return freelist;
2195 }
2196 
2197 static inline bool pfmemalloc_match(struct page *page, gfp_t gfpflags)
2198 {
2199         if (unlikely(PageSlabPfmemalloc(page)))
2200                 return gfp_pfmemalloc_allowed(gfpflags);
2201 
2202         return true;
2203 }
2204 
2205 /*
2206  * Check the page->freelist of a page and either transfer the freelist to the
2207  * per cpu freelist or deactivate the page.
2208  *
2209  * The page is still frozen if the return value is not NULL.
2210  *
2211  * If this function returns NULL then the page has been unfrozen.
2212  *
2213  * This function must be called with interrupt disabled.
2214  */
2215 static inline void *get_freelist(struct kmem_cache *s, struct page *page)
2216 {
2217         struct page new;
2218         unsigned long counters;
2219         void *freelist;
2220 
2221         do {
2222                 freelist = page->freelist;
2223                 counters = page->counters;
2224 
2225                 new.counters = counters;
2226                 VM_BUG_ON(!new.frozen);
2227 
2228                 new.inuse = page->objects;
2229                 new.frozen = freelist != NULL;
2230 
2231         } while (!__cmpxchg_double_slab(s, page,
2232                 freelist, counters,
2233                 NULL, new.counters,
2234                 "get_freelist"));
2235 
2236         return freelist;
2237 }
2238 
2239 /*
2240  * Slow path. The lockless freelist is empty or we need to perform
2241  * debugging duties.
2242  *
2243  * Processing is still very fast if new objects have been freed to the
2244  * regular freelist. In that case we simply take over the regular freelist
2245  * as the lockless freelist and zap the regular freelist.
2246  *
2247  * If that is not working then we fall back to the partial lists. We take the
2248  * first element of the freelist as the object to allocate now and move the
2249  * rest of the freelist to the lockless freelist.
2250  *
2251  * And if we were unable to get a new slab from the partial slab lists then
2252  * we need to allocate a new slab. This is the slowest path since it involves
2253  * a call to the page allocator and the setup of a new slab.
2254  */
2255 static void *__slab_alloc(struct kmem_cache *s, gfp_t gfpflags, int node,
2256                           unsigned long addr, struct kmem_cache_cpu *c)
2257 {
2258         void *freelist;
2259         struct page *page;
2260         unsigned long flags;
2261 
2262         local_irq_save(flags);
2263 #ifdef CONFIG_PREEMPT
2264         /*
2265          * We may have been preempted and rescheduled on a different
2266          * cpu before disabling interrupts. Need to reload cpu area
2267          * pointer.
2268          */
2269         c = this_cpu_ptr(s->cpu_slab);
2270 #endif
2271 
2272         page = c->page;
2273         if (!page)
2274                 goto new_slab;
2275 redo:
2276 
2277         if (unlikely(!node_match(page, node))) {
2278                 int searchnode = node;
2279 
2280                 if (node != NUMA_NO_NODE && !node_present_pages(node))
2281                         searchnode = node_to_mem_node(node);
2282 
2283                 if (unlikely(!node_match(page, searchnode))) {
2284                         stat(s, ALLOC_NODE_MISMATCH);
2285                         deactivate_slab(s, page, c->freelist);
2286                         c->page = NULL;
2287                         c->freelist = NULL;
2288                         goto new_slab;
2289                 }
2290         }
2291 
2292         /*
2293          * By rights, we should be searching for a slab page that was
2294          * PFMEMALLOC but right now, we are losing the pfmemalloc
2295          * information when the page leaves the per-cpu allocator
2296          */
2297         if (unlikely(!pfmemalloc_match(page, gfpflags))) {
2298                 deactivate_slab(s, page, c->freelist);
2299                 c->page = NULL;
2300                 c->freelist = NULL;
2301                 goto new_slab;
2302         }
2303 
2304         /* must check again c->freelist in case of cpu migration or IRQ */
2305         freelist = c->freelist;
2306         if (freelist)
2307                 goto load_freelist;
2308 
2309         freelist = get_freelist(s, page);
2310 
2311         if (!freelist) {
2312                 c->page = NULL;
2313                 stat(s, DEACTIVATE_BYPASS);
2314                 goto new_slab;
2315         }
2316 
2317         stat(s, ALLOC_REFILL);
2318 
2319 load_freelist:
2320         /*
2321          * freelist is pointing to the list of objects to be used.
2322          * page is pointing to the page from which the objects are obtained.
2323          * That page must be frozen for per cpu allocations to work.
2324          */
2325         VM_BUG_ON(!c->page->frozen);
2326         c->freelist = get_freepointer(s, freelist);
2327         c->tid = next_tid(c->tid);
2328         local_irq_restore(flags);
2329         return freelist;
2330 
2331 new_slab:
2332 
2333         if (c->partial) {
2334                 page = c->page = c->partial;
2335                 c->partial = page->next;
2336                 stat(s, CPU_PARTIAL_ALLOC);
2337                 c->freelist = NULL;
2338                 goto redo;
2339         }
2340 
2341         freelist = new_slab_objects(s, gfpflags, node, &c);
2342 
2343         if (unlikely(!freelist)) {
2344                 slab_out_of_memory(s, gfpflags, node);
2345                 local_irq_restore(flags);
2346                 return NULL;
2347         }
2348 
2349         page = c->page;
2350         if (likely(!kmem_cache_debug(s) && pfmemalloc_match(page, gfpflags)))
2351                 goto load_freelist;
2352 
2353         /* Only entered in the debug case */
2354         if (kmem_cache_debug(s) &&
2355                         !alloc_debug_processing(s, page, freelist, addr))
2356                 goto new_slab;  /* Slab failed checks. Next slab needed */
2357 
2358         deactivate_slab(s, page, get_freepointer(s, freelist));
2359         c->page = NULL;
2360         c->freelist = NULL;
2361         local_irq_restore(flags);
2362         return freelist;
2363 }
2364 
2365 /*
2366  * Inlined fastpath so that allocation functions (kmalloc, kmem_cache_alloc)
2367  * have the fastpath folded into their functions. So no function call
2368  * overhead for requests that can be satisfied on the fastpath.
2369  *
2370  * The fastpath works by first checking if the lockless freelist can be used.
2371  * If not then __slab_alloc is called for slow processing.
2372  *
2373  * Otherwise we can simply pick the next object from the lockless free list.
2374  */
2375 static __always_inline void *slab_alloc_node(struct kmem_cache *s,
2376                 gfp_t gfpflags, int node, unsigned long addr)
2377 {
2378         void **object;
2379         struct kmem_cache_cpu *c;
2380         struct page *page;
2381         unsigned long tid;
2382 
2383         if (slab_pre_alloc_hook(s, gfpflags))
2384                 return NULL;
2385 
2386         s = memcg_kmem_get_cache(s, gfpflags);
2387 redo:
2388         /*
2389          * Must read kmem_cache cpu data via this cpu ptr. Preemption is
2390          * enabled. We may switch back and forth between cpus while
2391          * reading from one cpu area. That does not matter as long
2392          * as we end up on the original cpu again when doing the cmpxchg.
2393          *
2394          * Preemption is disabled for the retrieval of the tid because that
2395          * must occur from the current processor. We cannot allow rescheduling
2396          * on a different processor between the determination of the pointer
2397          * and the retrieval of the tid.
2398          */
2399         preempt_disable();
2400         c = this_cpu_ptr(s->cpu_slab);
2401 
2402         /*
2403          * The transaction ids are globally unique per cpu and per operation on
2404          * a per cpu queue. Thus they can be guarantee that the cmpxchg_double
2405          * occurs on the right processor and that there was no operation on the
2406          * linked list in between.
2407          */
2408         tid = c->tid;
2409         preempt_enable();
2410 
2411         object = c->freelist;
2412         page = c->page;
2413         if (unlikely(!object || !node_match(page, node))) {
2414                 object = __slab_alloc(s, gfpflags, node, addr, c);
2415                 stat(s, ALLOC_SLOWPATH);
2416         } else {
2417                 void *next_object = get_freepointer_safe(s, object);
2418 
2419                 /*
2420                  * The cmpxchg will only match if there was no additional
2421                  * operation and if we are on the right processor.
2422                  *
2423                  * The cmpxchg does the following atomically (without lock
2424                  * semantics!)
2425                  * 1. Relocate first pointer to the current per cpu area.
2426                  * 2. Verify that tid and freelist have not been changed
2427                  * 3. If they were not changed replace tid and freelist
2428                  *
2429                  * Since this is without lock semantics the protection is only
2430                  * against code executing on this cpu *not* from access by
2431                  * other cpus.
2432                  */
2433                 if (unlikely(!this_cpu_cmpxchg_double(
2434                                 s->cpu_slab->freelist, s->cpu_slab->tid,
2435                                 object, tid,
2436                                 next_object, next_tid(tid)))) {
2437 
2438                         note_cmpxchg_failure("slab_alloc", s, tid);
2439                         goto redo;
2440                 }
2441                 prefetch_freepointer(s, next_object);
2442                 stat(s, ALLOC_FASTPATH);
2443         }
2444 
2445         if (unlikely(gfpflags & __GFP_ZERO) && object)
2446                 memset(object, 0, s->object_size);
2447 
2448         slab_post_alloc_hook(s, gfpflags, object);
2449 
2450         return object;
2451 }
2452 
2453 static __always_inline void *slab_alloc(struct kmem_cache *s,
2454                 gfp_t gfpflags, unsigned long addr)
2455 {
2456         return slab_alloc_node(s, gfpflags, NUMA_NO_NODE, addr);
2457 }
2458 
2459 void *kmem_cache_alloc(struct kmem_cache *s, gfp_t gfpflags)
2460 {
2461         void *ret = slab_alloc(s, gfpflags, _RET_IP_);
2462 
2463         trace_kmem_cache_alloc(_RET_IP_, ret, s->object_size,
2464                                 s->size, gfpflags);
2465 
2466         return ret;
2467 }
2468 EXPORT_SYMBOL(kmem_cache_alloc);
2469 
2470 #ifdef CONFIG_TRACING
2471 void *kmem_cache_alloc_trace(struct kmem_cache *s, gfp_t gfpflags, size_t size)
2472 {
2473         void *ret = slab_alloc(s, gfpflags, _RET_IP_);
2474         trace_kmalloc(_RET_IP_, ret, size, s->size, gfpflags);
2475         return ret;
2476 }
2477 EXPORT_SYMBOL(kmem_cache_alloc_trace);
2478 #endif
2479 
2480 #ifdef CONFIG_NUMA
2481 void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t gfpflags, int node)
2482 {
2483         void *ret = slab_alloc_node(s, gfpflags, node, _RET_IP_);
2484 
2485         trace_kmem_cache_alloc_node(_RET_IP_, ret,
2486                                     s->object_size, s->size, gfpflags, node);
2487 
2488         return ret;
2489 }
2490 EXPORT_SYMBOL(kmem_cache_alloc_node);
2491 
2492 #ifdef CONFIG_TRACING
2493 void *kmem_cache_alloc_node_trace(struct kmem_cache *s,
2494                                     gfp_t gfpflags,
2495                                     int node, size_t size)
2496 {
2497         void *ret = slab_alloc_node(s, gfpflags, node, _RET_IP_);
2498 
2499         trace_kmalloc_node(_RET_IP_, ret,
2500                            size, s->size, gfpflags, node);
2501         return ret;
2502 }
2503 EXPORT_SYMBOL(kmem_cache_alloc_node_trace);
2504 #endif
2505 #endif
2506 
2507 /*
2508  * Slow patch handling. This may still be called frequently since objects
2509  * have a longer lifetime than the cpu slabs in most processing loads.
2510  *
2511  * So we still attempt to reduce cache line usage. Just take the slab
2512  * lock and free the item. If there is no additional partial page
2513  * handling required then we can return immediately.
2514  */
2515 static void __slab_free(struct kmem_cache *s, struct page *page,
2516                         void *x, unsigned long addr)
2517 {
2518         void *prior;
2519         void **object = (void *)x;
2520         int was_frozen;
2521         struct page new;
2522         unsigned long counters;
2523         struct kmem_cache_node *n = NULL;
2524         unsigned long uninitialized_var(flags);
2525 
2526         stat(s, FREE_SLOWPATH);
2527 
2528         if (kmem_cache_debug(s) &&
2529                 !(n = free_debug_processing(s, page, x, addr, &flags)))
2530                 return;
2531 
2532         do {
2533                 if (unlikely(n)) {
2534                         spin_unlock_irqrestore(&n->list_lock, flags);
2535                         n = NULL;
2536                 }
2537                 prior = page->freelist;
2538                 counters = page->counters;
2539                 set_freepointer(s, object, prior);
2540                 new.counters = counters;
2541                 was_frozen = new.frozen;
2542                 new.inuse--;
2543                 if ((!new.inuse || !prior) && !was_frozen) {
2544 
2545                         if (kmem_cache_has_cpu_partial(s) && !prior) {
2546 
2547                                 /*
2548                                  * Slab was on no list before and will be
2549                                  * partially empty
2550                                  * We can defer the list move and instead
2551                                  * freeze it.
2552                                  */
2553                                 new.frozen = 1;
2554 
2555                         } else { /* Needs to be taken off a list */
2556 
2557                                 n = get_node(s, page_to_nid(page));
2558                                 /*
2559                                  * Speculatively acquire the list_lock.
2560                                  * If the cmpxchg does not succeed then we may
2561                                  * drop the list_lock without any processing.
2562                                  *
2563                                  * Otherwise the list_lock will synchronize with
2564                                  * other processors updating the list of slabs.
2565                                  */
2566                                 spin_lock_irqsave(&n->list_lock, flags);
2567 
2568                         }
2569                 }
2570 
2571         } while (!cmpxchg_double_slab(s, page,
2572                 prior, counters,
2573                 object, new.counters,
2574                 "__slab_free"));
2575 
2576         if (likely(!n)) {
2577 
2578                 /*
2579                  * If we just froze the page then put it onto the
2580                  * per cpu partial list.
2581                  */
2582                 if (new.frozen && !was_frozen) {
2583                         put_cpu_partial(s, page, 1);
2584                         stat(s, CPU_PARTIAL_FREE);
2585                 }
2586                 /*
2587                  * The list lock was not taken therefore no list
2588                  * activity can be necessary.
2589                  */
2590                 if (was_frozen)
2591                         stat(s, FREE_FROZEN);
2592                 return;
2593         }
2594 
2595         if (unlikely(!new.inuse && n->nr_partial >= s->min_partial))
2596                 goto slab_empty;
2597 
2598         /*
2599          * Objects left in the slab. If it was not on the partial list before
2600          * then add it.
2601          */
2602         if (!kmem_cache_has_cpu_partial(s) && unlikely(!prior)) {
2603                 if (kmem_cache_debug(s))
2604                         remove_full(s, n, page);
2605                 add_partial(n, page, DEACTIVATE_TO_TAIL);
2606                 stat(s, FREE_ADD_PARTIAL);
2607         }
2608         spin_unlock_irqrestore(&n->list_lock, flags);
2609         return;
2610 
2611 slab_empty:
2612         if (prior) {
2613                 /*
2614                  * Slab on the partial list.
2615                  */
2616                 remove_partial(n, page);
2617                 stat(s, FREE_REMOVE_PARTIAL);
2618         } else {
2619                 /* Slab must be on the full list */
2620                 remove_full(s, n, page);
2621         }
2622 
2623         spin_unlock_irqrestore(&n->list_lock, flags);
2624         stat(s, FREE_SLAB);
2625         discard_slab(s, page);
2626 }
2627 
2628 /*
2629  * Fastpath with forced inlining to produce a kfree and kmem_cache_free that
2630  * can perform fastpath freeing without additional function calls.
2631  *
2632  * The fastpath is only possible if we are freeing to the current cpu slab
2633  * of this processor. This typically the case if we have just allocated
2634  * the item before.
2635  *
2636  * If fastpath is not possible then fall back to __slab_free where we deal
2637  * with all sorts of special processing.
2638  */
2639 static __always_inline void slab_free(struct kmem_cache *s,
2640                         struct page *page, void *x, unsigned long addr)
2641 {
2642         void **object = (void *)x;
2643         struct kmem_cache_cpu *c;
2644         unsigned long tid;
2645 
2646         slab_free_hook(s, x);
2647 
2648 redo:
2649         /*
2650          * Determine the currently cpus per cpu slab.
2651          * The cpu may change afterward. However that does not matter since
2652          * data is retrieved via this pointer. If we are on the same cpu
2653          * during the cmpxchg then the free will succedd.
2654          */
2655         preempt_disable();
2656         c = this_cpu_ptr(s->cpu_slab);
2657 
2658         tid = c->tid;
2659         preempt_enable();
2660 
2661         if (likely(page == c->page)) {
2662                 set_freepointer(s, object, c->freelist);
2663 
2664                 if (unlikely(!this_cpu_cmpxchg_double(
2665                                 s->cpu_slab->freelist, s->cpu_slab->tid,
2666                                 c->freelist, tid,
2667                                 object, next_tid(tid)))) {
2668 
2669                         note_cmpxchg_failure("slab_free", s, tid);
2670                         goto redo;
2671                 }
2672                 stat(s, FREE_FASTPATH);
2673         } else
2674                 __slab_free(s, page, x, addr);
2675 
2676 }
2677 
2678 void kmem_cache_free(struct kmem_cache *s, void *x)
2679 {
2680         s = cache_from_obj(s, x);
2681         if (!s)
2682                 return;
2683         slab_free(s, virt_to_head_page(x), x, _RET_IP_);
2684         trace_kmem_cache_free(_RET_IP_, x);
2685 }
2686 EXPORT_SYMBOL(kmem_cache_free);
2687 
2688 /*
2689  * Object placement in a slab is made very easy because we always start at
2690  * offset 0. If we tune the size of the object to the alignment then we can
2691  * get the required alignment by putting one properly sized object after
2692  * another.
2693  *
2694  * Notice that the allocation order determines the sizes of the per cpu
2695  * caches. Each processor has always one slab available for allocations.
2696  * Increasing the allocation order reduces the number of times that slabs
2697  * must be moved on and off the partial lists and is therefore a factor in
2698  * locking overhead.
2699  */
2700 
2701 /*
2702  * Mininum / Maximum order of slab pages. This influences locking overhead
2703  * and slab fragmentation. A higher order reduces the number of partial slabs
2704  * and increases the number of allocations possible without having to
2705  * take the list_lock.
2706  */
2707 static int slub_min_order;
2708 static int slub_max_order = PAGE_ALLOC_COSTLY_ORDER;
2709 static int slub_min_objects;
2710 
2711 /*
2712  * Calculate the order of allocation given an slab object size.
2713  *
2714  * The order of allocation has significant impact on performance and other
2715  * system components. Generally order 0 allocations should be preferred since
2716  * order 0 does not cause fragmentation in the page allocator. Larger objects
2717  * be problematic to put into order 0 slabs because there may be too much
2718  * unused space left. We go to a higher order if more than 1/16th of the slab
2719  * would be wasted.
2720  *
2721  * In order to reach satisfactory performance we must ensure that a minimum
2722  * number of objects is in one slab. Otherwise we may generate too much
2723  * activity on the partial lists which requires taking the list_lock. This is
2724  * less a concern for large slabs though which are rarely used.
2725  *
2726  * slub_max_order specifies the order where we begin to stop considering the
2727  * number of objects in a slab as critical. If we reach slub_max_order then
2728  * we try to keep the page order as low as possible. So we accept more waste
2729  * of space in favor of a small page order.
2730  *
2731  * Higher order allocations also allow the placement of more objects in a
2732  * slab and thereby reduce object handling overhead. If the user has
2733  * requested a higher mininum order then we start with that one instead of
2734  * the smallest order which will fit the object.
2735  */
2736 static inline int slab_order(int size, int min_objects,
2737                                 int max_order, int fract_leftover, int reserved)
2738 {
2739         int order;
2740         int rem;
2741         int min_order = slub_min_order;
2742 
2743         if (order_objects(min_order, size, reserved) > MAX_OBJS_PER_PAGE)
2744                 return get_order(size * MAX_OBJS_PER_PAGE) - 1;
2745 
2746         for (order = max(min_order,
2747                                 fls(min_objects * size - 1) - PAGE_SHIFT);
2748                         order <= max_order; order++) {
2749 
2750                 unsigned long slab_size = PAGE_SIZE << order;
2751 
2752                 if (slab_size < min_objects * size + reserved)
2753                         continue;
2754 
2755                 rem = (slab_size - reserved) % size;
2756 
2757                 if (rem <= slab_size / fract_leftover)
2758                         break;
2759 
2760         }
2761 
2762         return order;
2763 }
2764 
2765 static inline int calculate_order(int size, int reserved)
2766 {
2767         int order;
2768         int min_objects;
2769         int fraction;
2770         int max_objects;
2771 
2772         /*
2773          * Attempt to find best configuration for a slab. This
2774          * works by first attempting to generate a layout with
2775          * the best configuration and backing off gradually.
2776          *
2777          * First we reduce the acceptable waste in a slab. Then
2778          * we reduce the minimum objects required in a slab.
2779          */
2780         min_objects = slub_min_objects;
2781         if (!min_objects)
2782                 min_objects = 4 * (fls(nr_cpu_ids) + 1);
2783         max_objects = order_objects(slub_max_order, size, reserved);
2784         min_objects = min(min_objects, max_objects);
2785 
2786         while (min_objects > 1) {
2787                 fraction = 16;
2788                 while (fraction >= 4) {
2789                         order = slab_order(size, min_objects,
2790                                         slub_max_order, fraction, reserved);
2791                         if (order <= slub_max_order)
2792                                 return order;
2793                         fraction /= 2;
2794                 }
2795                 min_objects--;
2796         }
2797 
2798         /*
2799          * We were unable to place multiple objects in a slab. Now
2800          * lets see if we can place a single object there.
2801          */
2802         order = slab_order(size, 1, slub_max_order, 1, reserved);
2803         if (order <= slub_max_order)
2804                 return order;
2805 
2806         /*
2807          * Doh this slab cannot be placed using slub_max_order.
2808          */
2809         order = slab_order(size, 1, MAX_ORDER, 1, reserved);
2810         if (order < MAX_ORDER)
2811                 return order;
2812         return -ENOSYS;
2813 }
2814 
2815 static void
2816 init_kmem_cache_node(struct kmem_cache_node *n)
2817 {
2818         n->nr_partial = 0;
2819         spin_lock_init(&n->list_lock);
2820         INIT_LIST_HEAD(&n->partial);
2821 #ifdef CONFIG_SLUB_DEBUG
2822         atomic_long_set(&n->nr_slabs, 0);
2823         atomic_long_set(&n->total_objects, 0);
2824         INIT_LIST_HEAD(&n->full);
2825 #endif
2826 }
2827 
2828 static inline int alloc_kmem_cache_cpus(struct kmem_cache *s)
2829 {
2830         BUILD_BUG_ON(PERCPU_DYNAMIC_EARLY_SIZE <
2831                         KMALLOC_SHIFT_HIGH * sizeof(struct kmem_cache_cpu));
2832 
2833         /*
2834          * Must align to double word boundary for the double cmpxchg
2835          * instructions to work; see __pcpu_double_call_return_bool().
2836          */
2837         s->cpu_slab = __alloc_percpu(sizeof(struct kmem_cache_cpu),
2838                                      2 * sizeof(void *));
2839 
2840         if (!s->cpu_slab)
2841                 return 0;
2842 
2843         init_kmem_cache_cpus(s);
2844 
2845         return 1;
2846 }
2847 
2848 static struct kmem_cache *kmem_cache_node;
2849 
2850 /*
2851  * No kmalloc_node yet so do it by hand. We know that this is the first
2852  * slab on the node for this slabcache. There are no concurrent accesses
2853  * possible.
2854  *
2855  * Note that this function only works on the kmem_cache_node
2856  * when allocating for the kmem_cache_node. This is used for bootstrapping
2857  * memory on a fresh node that has no slab structures yet.
2858  */
2859 static void early_kmem_cache_node_alloc(int node)
2860 {
2861         struct page *page;
2862         struct kmem_cache_node *n;
2863 
2864         BUG_ON(kmem_cache_node->size < sizeof(struct kmem_cache_node));
2865 
2866         page = new_slab(kmem_cache_node, GFP_NOWAIT, node);
2867 
2868         BUG_ON(!page);
2869         if (page_to_nid(page) != node) {
2870                 pr_err("SLUB: Unable to allocate memory from node %d\n", node);
2871                 pr_err("SLUB: Allocating a useless per node structure in order to be able to continue\n");
2872         }
2873 
2874         n = page->freelist;
2875         BUG_ON(!n);
2876         page->freelist = get_freepointer(kmem_cache_node, n);
2877         page->inuse = 1;
2878         page->frozen = 0;
2879         kmem_cache_node->node[node] = n;
2880 #ifdef CONFIG_SLUB_DEBUG
2881         init_object(kmem_cache_node, n, SLUB_RED_ACTIVE);
2882         init_tracking(kmem_cache_node, n);
2883 #endif
2884         init_kmem_cache_node(n);
2885         inc_slabs_node(kmem_cache_node, node, page->objects);
2886 
2887         /*
2888          * No locks need to be taken here as it has just been
2889          * initialized and there is no concurrent access.
2890          */
2891         __add_partial(n, page, DEACTIVATE_TO_HEAD);
2892 }
2893 
2894 static void free_kmem_cache_nodes(struct kmem_cache *s)
2895 {
2896         int node;
2897         struct kmem_cache_node *n;
2898 
2899         for_each_kmem_cache_node(s, node, n) {
2900                 kmem_cache_free(kmem_cache_node, n);
2901                 s->node[node] = NULL;
2902         }
2903 }
2904 
2905 static int init_kmem_cache_nodes(struct kmem_cache *s)
2906 {
2907         int node;
2908 
2909         for_each_node_state(node, N_NORMAL_MEMORY) {
2910                 struct kmem_cache_node *n;
2911 
2912                 if (slab_state == DOWN) {
2913                         early_kmem_cache_node_alloc(node);
2914                         continue;
2915                 }
2916                 n = kmem_cache_alloc_node(kmem_cache_node,
2917                                                 GFP_KERNEL, node);
2918 
2919                 if (!n) {
2920                         free_kmem_cache_nodes(s);
2921                         return 0;
2922                 }
2923 
2924                 s->node[node] = n;
2925                 init_kmem_cache_node(n);
2926         }
2927         return 1;
2928 }
2929 
2930 static void set_min_partial(struct kmem_cache *s, unsigned long min)
2931 {
2932         if (min < MIN_PARTIAL)
2933                 min = MIN_PARTIAL;
2934         else if (min > MAX_PARTIAL)
2935                 min = MAX_PARTIAL;
2936         s->min_partial = min;
2937 }
2938 
2939 /*
2940  * calculate_sizes() determines the order and the distribution of data within
2941  * a slab object.
2942  */
2943 static int calculate_sizes(struct kmem_cache *s, int forced_order)
2944 {
2945         unsigned long flags = s->flags;
2946         unsigned long size = s->object_size;
2947         int order;
2948 
2949         /*
2950          * Round up object size to the next word boundary. We can only
2951          * place the free pointer at word boundaries and this determines
2952          * the possible location of the free pointer.
2953          */
2954         size = ALIGN(size, sizeof(void *));
2955 
2956 #ifdef CONFIG_SLUB_DEBUG
2957         /*
2958          * Determine if we can poison the object itself. If the user of
2959          * the slab may touch the object after free or before allocation
2960          * then we should never poison the object itself.
2961          */
2962         if ((flags & SLAB_POISON) && !(flags & SLAB_DESTROY_BY_RCU) &&
2963                         !s->ctor)
2964                 s->flags |= __OBJECT_POISON;
2965         else
2966                 s->flags &= ~__OBJECT_POISON;
2967 
2968 
2969         /*
2970          * If we are Redzoning then check if there is some space between the
2971          * end of the object and the free pointer. If not then add an
2972          * additional word to have some bytes to store Redzone information.
2973          */
2974         if ((flags & SLAB_RED_ZONE) && size == s->object_size)
2975                 size += sizeof(void *);
2976 #endif
2977 
2978         /*
2979          * With that we have determined the number of bytes in actual use
2980          * by the object. This is the potential offset to the free pointer.
2981          */
2982         s->inuse = size;
2983 
2984         if (((flags & (SLAB_DESTROY_BY_RCU | SLAB_POISON)) ||
2985                 s->ctor)) {
2986                 /*
2987                  * Relocate free pointer after the object if it is not
2988                  * permitted to overwrite the first word of the object on
2989                  * kmem_cache_free.
2990                  *
2991                  * This is the case if we do RCU, have a constructor or
2992                  * destructor or are poisoning the objects.
2993                  */
2994                 s->offset = size;
2995                 size += sizeof(void *);
2996         }
2997 
2998 #ifdef CONFIG_SLUB_DEBUG
2999         if (flags & SLAB_STORE_USER)
3000                 /*
3001                  * Need to store information about allocs and frees after
3002                  * the object.
3003                  */
3004                 size += 2 * sizeof(struct track);
3005 
3006         if (flags & SLAB_RED_ZONE)
3007                 /*
3008                  * Add some empty padding so that we can catch
3009                  * overwrites from earlier objects rather than let
3010                  * tracking information or the free pointer be
3011                  * corrupted if a user writes before the start
3012                  * of the object.
3013                  */
3014                 size += sizeof(void *);
3015 #endif
3016 
3017         /*
3018          * SLUB stores one object immediately after another beginning from
3019          * offset 0. In order to align the objects we have to simply size
3020          * each object to conform to the alignment.
3021          */
3022         size = ALIGN(size, s->align);
3023         s->size = size;
3024         if (forced_order >= 0)
3025                 order = forced_order;
3026         else
3027                 order = calculate_order(size, s->reserved);
3028 
3029         if (order < 0)
3030                 return 0;
3031 
3032         s->allocflags = 0;
3033         if (order)
3034                 s->allocflags |= __GFP_COMP;
3035 
3036         if (s->flags & SLAB_CACHE_DMA)
3037                 s->allocflags |= GFP_DMA;
3038 
3039         if (s->flags & SLAB_RECLAIM_ACCOUNT)
3040                 s->allocflags |= __GFP_RECLAIMABLE;
3041 
3042         /*
3043          * Determine the number of objects per slab
3044          */
3045         s->oo = oo_make(order, size, s->reserved);
3046         s->min = oo_make(get_order(size), size, s->reserved);
3047         if (oo_objects(s->oo) > oo_objects(s->max))
3048                 s->max = s->oo;
3049 
3050         return !!oo_objects(s->oo);
3051 }
3052 
3053 static int kmem_cache_open(struct kmem_cache *s, unsigned long flags)
3054 {
3055         s->flags = kmem_cache_flags(s->size, flags, s->name, s->ctor);
3056         s->reserved = 0;
3057 
3058         if (need_reserve_slab_rcu && (s->flags & SLAB_DESTROY_BY_RCU))
3059                 s->reserved = sizeof(struct rcu_head);
3060 
3061         if (!calculate_sizes(s, -1))
3062                 goto error;
3063         if (disable_higher_order_debug) {
3064                 /*
3065                  * Disable debugging flags that store metadata if the min slab
3066                  * order increased.
3067                  */
3068                 if (get_order(s->size) > get_order(s->object_size)) {
3069                         s->flags &= ~DEBUG_METADATA_FLAGS;
3070                         s->offset = 0;
3071                         if (!calculate_sizes(s, -1))
3072                                 goto error;
3073                 }
3074         }
3075 
3076 #if defined(CONFIG_HAVE_CMPXCHG_DOUBLE) && \
3077     defined(CONFIG_HAVE_ALIGNED_STRUCT_PAGE)
3078         if (system_has_cmpxchg_double() && (s->flags & SLAB_DEBUG_FLAGS) == 0)
3079                 /* Enable fast mode */
3080                 s->flags |= __CMPXCHG_DOUBLE;
3081 #endif
3082 
3083         /*
3084          * The larger the object size is, the more pages we want on the partial
3085          * list to avoid pounding the page allocator excessively.
3086          */
3087         set_min_partial(s, ilog2(s->size) / 2);
3088 
3089         /*
3090          * cpu_partial determined the maximum number of objects kept in the
3091          * per cpu partial lists of a processor.
3092          *
3093          * Per cpu partial lists mainly contain slabs that just have one
3094          * object freed. If they are used for allocation then they can be
3095          * filled up again with minimal effort. The slab will never hit the
3096          * per node partial lists and therefore no locking will be required.
3097          *
3098          * This setting also determines
3099          *
3100          * A) The number of objects from per cpu partial slabs dumped to the
3101          *    per node list when we reach the limit.
3102          * B) The number of objects in cpu partial slabs to extract from the
3103          *    per node list when we run out of per cpu objects. We only fetch
3104          *    50% to keep some capacity around for frees.
3105          */
3106         if (!kmem_cache_has_cpu_partial(s))
3107                 s->cpu_partial = 0;
3108         else if (s->size >= PAGE_SIZE)
3109                 s->cpu_partial = 2;
3110         else if (s->size >= 1024)
3111                 s->cpu_partial = 6;
3112         else if (s->size >= 256)
3113                 s->cpu_partial = 13;
3114         else
3115                 s->cpu_partial = 30;
3116 
3117 #ifdef CONFIG_NUMA
3118         s->remote_node_defrag_ratio = 1000;
3119 #endif
3120         if (!init_kmem_cache_nodes(s))
3121                 goto error;
3122 
3123         if (alloc_kmem_cache_cpus(s))
3124                 return 0;
3125 
3126         free_kmem_cache_nodes(s);
3127 error:
3128         if (flags & SLAB_PANIC)
3129                 panic("Cannot create slab %s size=%lu realsize=%u "
3130                         "order=%u offset=%u flags=%lx\n",
3131                         s->name, (unsigned long)s->size, s->size,
3132                         oo_order(s->oo), s->offset, flags);
3133         return -EINVAL;
3134 }
3135 
3136 static void list_slab_objects(struct kmem_cache *s, struct page *page,
3137                                                         const char *text)
3138 {
3139 #ifdef CONFIG_SLUB_DEBUG
3140         void *addr = page_address(page);
3141         void *p;
3142         unsigned long *map = kzalloc(BITS_TO_LONGS(page->objects) *
3143                                      sizeof(long), GFP_ATOMIC);
3144         if (!map)
3145                 return;
3146         slab_err(s, page, text, s->name);
3147         slab_lock(page);
3148 
3149         get_map(s, page, map);
3150         for_each_object(p, s, addr, page->objects) {
3151 
3152                 if (!test_bit(slab_index(p, s, addr), map)) {
3153                         pr_err("INFO: Object 0x%p @offset=%tu\n", p, p - addr);
3154                         print_tracking(s, p);
3155                 }
3156         }
3157         slab_unlock(page);
3158         kfree(map);
3159 #endif
3160 }
3161 
3162 /*
3163  * Attempt to free all partial slabs on a node.
3164  * This is called from kmem_cache_close(). We must be the last thread
3165  * using the cache and therefore we do not need to lock anymore.
3166  */
3167 static void free_partial(struct kmem_cache *s, struct kmem_cache_node *n)
3168 {
3169         struct page *page, *h;
3170 
3171         list_for_each_entry_safe(page, h, &n->partial, lru) {
3172                 if (!page->inuse) {
3173                         __remove_partial(n, page);
3174                         discard_slab(s, page);
3175                 } else {
3176                         list_slab_objects(s, page,
3177                         "Objects remaining in %s on kmem_cache_close()");
3178                 }
3179         }
3180 }
3181 
3182 /*
3183  * Release all resources used by a slab cache.
3184  */
3185 static inline int kmem_cache_close(struct kmem_cache *s)
3186 {
3187         int node;
3188         struct kmem_cache_node *n;
3189 
3190         flush_all(s);
3191         /* Attempt to free all objects */
3192         for_each_kmem_cache_node(s, node, n) {
3193                 free_partial(s, n);
3194                 if (n->nr_partial || slabs_node(s, node))
3195                         return 1;
3196         }
3197         free_percpu(s->cpu_slab);
3198         free_kmem_cache_nodes(s);
3199         return 0;
3200 }
3201 
3202 int __kmem_cache_shutdown(struct kmem_cache *s)
3203 {
3204         return kmem_cache_close(s);
3205 }
3206 
3207 /********************************************************************
3208  *              Kmalloc subsystem
3209  *******************************************************************/
3210 
3211 static int __init setup_slub_min_order(char *str)
3212 {
3213         get_option(&str, &slub_min_order);
3214 
3215         return 1;
3216 }
3217 
3218 __setup("slub_min_order=", setup_slub_min_order);
3219 
3220 static int __init setup_slub_max_order(char *str)
3221 {
3222         get_option(&str, &slub_max_order);
3223         slub_max_order = min(slub_max_order, MAX_ORDER - 1);
3224 
3225         return 1;
3226 }
3227 
3228 __setup("slub_max_order=", setup_slub_max_order);
3229 
3230 static int __init setup_slub_min_objects(char *str)
3231 {
3232         get_option(&str, &slub_min_objects);
3233 
3234         return 1;
3235 }
3236 
3237 __setup("slub_min_objects=", setup_slub_min_objects);
3238 
3239 void *__kmalloc(size_t size, gfp_t flags)
3240 {
3241         struct kmem_cache *s;
3242         void *ret;
3243 
3244         if (unlikely(size > KMALLOC_MAX_CACHE_SIZE))
3245                 return kmalloc_large(size, flags);
3246 
3247         s = kmalloc_slab(size, flags);
3248 
3249         if (unlikely(ZERO_OR_NULL_PTR(s)))
3250                 return s;
3251 
3252         ret = slab_alloc(s, flags, _RET_IP_);
3253 
3254         trace_kmalloc(_RET_IP_, ret, size, s->size, flags);
3255 
3256         return ret;
3257 }
3258 EXPORT_SYMBOL(__kmalloc);
3259 
3260 #ifdef CONFIG_NUMA
3261 static void *kmalloc_large_node(size_t size, gfp_t flags, int node)
3262 {
3263         struct page *page;
3264         void *ptr = NULL;
3265 
3266         flags |= __GFP_COMP | __GFP_NOTRACK;
3267         page = alloc_kmem_pages_node(node, flags, get_order(size));
3268         if (page)
3269                 ptr = page_address(page);
3270 
3271         kmalloc_large_node_hook(ptr, size, flags);
3272         return ptr;
3273 }
3274 
3275 void *__kmalloc_node(size_t size, gfp_t flags, int node)
3276 {
3277         struct kmem_cache *s;
3278         void *ret;
3279 
3280         if (unlikely(size > KMALLOC_MAX_CACHE_SIZE)) {
3281                 ret = kmalloc_large_node(size, flags, node);
3282 
3283                 trace_kmalloc_node(_RET_IP_, ret,
3284                                    size, PAGE_SIZE << get_order(size),
3285                                    flags, node);
3286 
3287                 return ret;
3288         }
3289 
3290         s = kmalloc_slab(size, flags);
3291 
3292         if (unlikely(ZERO_OR_NULL_PTR(s)))
3293                 return s;
3294 
3295         ret = slab_alloc_node(s, flags, node, _RET_IP_);
3296 
3297         trace_kmalloc_node(_RET_IP_, ret, size, s->size, flags, node);
3298 
3299         return ret;
3300 }
3301 EXPORT_SYMBOL(__kmalloc_node);
3302 #endif
3303 
3304 size_t ksize(const void *object)
3305 {
3306         struct page *page;
3307 
3308         if (unlikely(object == ZERO_SIZE_PTR))
3309                 return 0;
3310 
3311         page = virt_to_head_page(object);
3312 
3313         if (unlikely(!PageSlab(page))) {
3314                 WARN_ON(!PageCompound(page));
3315                 return PAGE_SIZE << compound_order(page);
3316         }
3317 
3318         return slab_ksize(page->slab_cache);
3319 }
3320 EXPORT_SYMBOL(ksize);
3321 
3322 void kfree(const void *x)
3323 {
3324         struct page *page;
3325         void *object = (void *)x;
3326 
3327         trace_kfree(_RET_IP_, x);
3328 
3329         if (unlikely(ZERO_OR_NULL_PTR(x)))
3330                 return;
3331 
3332         page = virt_to_head_page(x);
3333         if (unlikely(!PageSlab(page))) {
3334                 BUG_ON(!PageCompound(page));
3335                 kfree_hook(x);
3336                 __free_kmem_pages(page, compound_order(page));
3337                 return;
3338         }
3339         slab_free(page->slab_cache, page, object, _RET_IP_);
3340 }
3341 EXPORT_SYMBOL(kfree);
3342 
3343 /*
3344  * kmem_cache_shrink removes empty slabs from the partial lists and sorts
3345  * the remaining slabs by the number of items in use. The slabs with the
3346  * most items in use come first. New allocations will then fill those up
3347  * and thus they can be removed from the partial lists.
3348  *
3349  * The slabs with the least items are placed last. This results in them
3350  * being allocated from last increasing the chance that the last objects
3351  * are freed in them.
3352  */
3353 int __kmem_cache_shrink(struct kmem_cache *s)
3354 {
3355         int node;
3356         int i;
3357         struct kmem_cache_node *n;
3358         struct page *page;
3359         struct page *t;
3360         int objects = oo_objects(s->max);
3361         struct list_head *slabs_by_inuse =
3362                 kmalloc(sizeof(struct list_head) * objects, GFP_KERNEL);
3363         unsigned long flags;
3364 
3365         if (!slabs_by_inuse)
3366                 return -ENOMEM;
3367 
3368         flush_all(s);
3369         for_each_kmem_cache_node(s, node, n) {
3370                 if (!n->nr_partial)
3371                         continue;
3372 
3373                 for (i = 0; i < objects; i++)
3374                         INIT_LIST_HEAD(slabs_by_inuse + i);
3375 
3376                 spin_lock_irqsave(&n->list_lock, flags);
3377 
3378                 /*
3379                  * Build lists indexed by the items in use in each slab.
3380                  *
3381                  * Note that concurrent frees may occur while we hold the
3382                  * list_lock. page->inuse here is the upper limit.
3383                  */
3384                 list_for_each_entry_safe(page, t, &n->partial, lru) {
3385                         list_move(&page->lru, slabs_by_inuse + page->inuse);
3386                         if (!page->inuse)
3387                                 n->nr_partial--;
3388                 }
3389 
3390                 /*
3391                  * Rebuild the partial list with the slabs filled up most
3392                  * first and the least used slabs at the end.
3393                  */
3394                 for (i = objects - 1; i > 0; i--)
3395                         list_splice(slabs_by_inuse + i, n->partial.prev);
3396 
3397                 spin_unlock_irqrestore(&n->list_lock, flags);
3398 
3399                 /* Release empty slabs */
3400                 list_for_each_entry_safe(page, t, slabs_by_inuse, lru)
3401                         discard_slab(s, page);
3402         }
3403 
3404         kfree(slabs_by_inuse);
3405         return 0;
3406 }
3407 
3408 static int slab_mem_going_offline_callback(void *arg)
3409 {
3410         struct kmem_cache *s;
3411 
3412         mutex_lock(&slab_mutex);
3413         list_for_each_entry(s, &slab_caches, list)
3414                 __kmem_cache_shrink(s);
3415         mutex_unlock(&slab_mutex);
3416 
3417         return 0;
3418 }
3419 
3420 static void slab_mem_offline_callback(void *arg)
3421 {
3422         struct kmem_cache_node *n;
3423         struct kmem_cache *s;
3424         struct memory_notify *marg = arg;
3425         int offline_node;
3426 
3427         offline_node = marg->status_change_nid_normal;
3428 
3429         /*
3430          * If the node still has available memory. we need kmem_cache_node
3431          * for it yet.
3432          */
3433         if (offline_node < 0)
3434                 return;
3435 
3436         mutex_lock(&slab_mutex);
3437         list_for_each_entry(s, &slab_caches, list) {
3438                 n = get_node(s, offline_node);
3439                 if (n) {
3440                         /*
3441                          * if n->nr_slabs > 0, slabs still exist on the node
3442                          * that is going down. We were unable to free them,
3443                          * and offline_pages() function shouldn't call this
3444                          * callback. So, we must fail.
3445                          */
3446                         BUG_ON(slabs_node(s, offline_node));
3447 
3448                         s->node[offline_node] = NULL;
3449                         kmem_cache_free(kmem_cache_node, n);
3450                 }
3451         }
3452         mutex_unlock(&slab_mutex);
3453 }
3454 
3455 static int slab_mem_going_online_callback(void *arg)
3456 {
3457         struct kmem_cache_node *n;
3458         struct kmem_cache *s;
3459         struct memory_notify *marg = arg;
3460         int nid = marg->status_change_nid_normal;
3461         int ret = 0;
3462 
3463         /*
3464          * If the node's memory is already available, then kmem_cache_node is
3465          * already created. Nothing to do.
3466          */
3467         if (nid < 0)
3468                 return 0;
3469 
3470         /*
3471          * We are bringing a node online. No memory is available yet. We must
3472          * allocate a kmem_cache_node structure in order to bring the node
3473          * online.
3474          */
3475         mutex_lock(&slab_mutex);
3476         list_for_each_entry(s, &slab_caches, list) {
3477                 /*
3478                  * XXX: kmem_cache_alloc_node will fallback to other nodes
3479                  *      since memory is not yet available from the node that
3480                  *      is brought up.
3481                  */
3482                 n = kmem_cache_alloc(kmem_cache_node, GFP_KERNEL);
3483                 if (!n) {
3484                         ret = -ENOMEM;
3485                         goto out;
3486                 }
3487                 init_kmem_cache_node(n);
3488                 s->node[nid] = n;
3489         }
3490 out:
3491         mutex_unlock(&slab_mutex);
3492         return ret;
3493 }
3494 
3495 static int slab_memory_callback(struct notifier_block *self,
3496                                 unsigned long action, void *arg)
3497 {
3498         int ret = 0;
3499 
3500         switch (action) {
3501         case MEM_GOING_ONLINE:
3502                 ret = slab_mem_going_online_callback(arg);
3503                 break;
3504         case MEM_GOING_OFFLINE:
3505                 ret = slab_mem_going_offline_callback(arg);
3506                 break;
3507         case MEM_OFFLINE:
3508         case MEM_CANCEL_ONLINE:
3509                 slab_mem_offline_callback(arg);
3510                 break;
3511         case MEM_ONLINE:
3512         case MEM_CANCEL_OFFLINE:
3513                 break;
3514         }
3515         if (ret)
3516                 ret = notifier_from_errno(ret);
3517         else
3518                 ret = NOTIFY_OK;
3519         return ret;
3520 }
3521 
3522 static struct notifier_block slab_memory_callback_nb = {
3523         .notifier_call = slab_memory_callback,
3524         .priority = SLAB_CALLBACK_PRI,
3525 };
3526 
3527 /********************************************************************
3528  *                      Basic setup of slabs
3529  *******************************************************************/
3530 
3531 /*
3532  * Used for early kmem_cache structures that were allocated using
3533  * the page allocator. Allocate them properly then fix up the pointers
3534  * that may be pointing to the wrong kmem_cache structure.
3535  */
3536 
3537 static struct kmem_cache * __init bootstrap(struct kmem_cache *static_cache)
3538 {
3539         int node;
3540         struct kmem_cache *s = kmem_cache_zalloc(kmem_cache, GFP_NOWAIT);
3541         struct kmem_cache_node *n;
3542 
3543         memcpy(s, static_cache, kmem_cache->object_size);
3544 
3545         /*
3546          * This runs very early, and only the boot processor is supposed to be
3547          * up.  Even if it weren't true, IRQs are not up so we couldn't fire
3548          * IPIs around.
3549          */
3550         __flush_cpu_slab(s, smp_processor_id());
3551         for_each_kmem_cache_node(s, node, n) {
3552                 struct page *p;
3553 
3554                 list_for_each_entry(p, &n->partial, lru)
3555                         p->slab_cache = s;
3556 
3557 #ifdef CONFIG_SLUB_DEBUG
3558                 list_for_each_entry(p, &n->full, lru)
3559                         p->slab_cache = s;
3560 #endif
3561         }
3562         list_add(&s->list, &slab_caches);
3563         return s;
3564 }
3565 
3566 void __init kmem_cache_init(void)
3567 {
3568         static __initdata struct kmem_cache boot_kmem_cache,
3569                 boot_kmem_cache_node;
3570 
3571         if (debug_guardpage_minorder())
3572                 slub_max_order = 0;
3573 
3574         kmem_cache_node = &boot_kmem_cache_node;
3575         kmem_cache = &boot_kmem_cache;
3576 
3577         create_boot_cache(kmem_cache_node, "kmem_cache_node",
3578                 sizeof(struct kmem_cache_node), SLAB_HWCACHE_ALIGN);
3579 
3580         register_hotmemory_notifier(&slab_memory_callback_nb);
3581 
3582         /* Able to allocate the per node structures */
3583         slab_state = PARTIAL;
3584 
3585         create_boot_cache(kmem_cache, "kmem_cache",
3586                         offsetof(struct kmem_cache, node) +
3587                                 nr_node_ids * sizeof(struct kmem_cache_node *),
3588                        SLAB_HWCACHE_ALIGN);
3589 
3590         kmem_cache = bootstrap(&boot_kmem_cache);
3591 
3592         /*
3593          * Allocate kmem_cache_node properly from the kmem_cache slab.
3594          * kmem_cache_node is separately allocated so no need to
3595          * update any list pointers.
3596          */
3597         kmem_cache_node = bootstrap(&boot_kmem_cache_node);
3598 
3599         /* Now we can use the kmem_cache to allocate kmalloc slabs */
3600         create_kmalloc_caches(0);
3601 
3602 #ifdef CONFIG_SMP
3603         register_cpu_notifier(&slab_notifier);
3604 #endif
3605 
3606         pr_info("SLUB: HWalign=%d, Order=%d-%d, MinObjects=%d, CPUs=%d, Nodes=%d\n",
3607                 cache_line_size(),
3608                 slub_min_order, slub_max_order, slub_min_objects,
3609                 nr_cpu_ids, nr_node_ids);
3610 }
3611 
3612 void __init kmem_cache_init_late(void)
3613 {
3614 }
3615 
3616 struct kmem_cache *
3617 __kmem_cache_alias(const char *name, size_t size, size_t align,
3618                    unsigned long flags, void (*ctor)(void *))
3619 {
3620         struct kmem_cache *s;
3621 
3622         s = find_mergeable(size, align, flags, name, ctor);
3623         if (s) {
3624                 int i;
3625                 struct kmem_cache *c;
3626 
3627                 s->refcount++;
3628 
3629                 /*
3630                  * Adjust the object sizes so that we clear
3631                  * the complete object on kzalloc.
3632                  */
3633                 s->object_size = max(s->object_size, (int)size);
3634                 s->inuse = max_t(int, s->inuse, ALIGN(size, sizeof(void *)));
3635 
3636                 for_each_memcg_cache_index(i) {
3637                         c = cache_from_memcg_idx(s, i);
3638                         if (!c)
3639                                 continue;
3640                         c->object_size = s->object_size;
3641                         c->inuse = max_t(int, c->inuse,
3642                                          ALIGN(size, sizeof(void *)));
3643                 }
3644 
3645                 if (sysfs_slab_alias(s, name)) {
3646                         s->refcount--;
3647                         s = NULL;
3648                 }
3649         }
3650 
3651         return s;
3652 }
3653 
3654 int __kmem_cache_create(struct kmem_cache *s, unsigned long flags)
3655 {
3656         int err;
3657 
3658         err = kmem_cache_open(s, flags);
3659         if (err)
3660                 return err;
3661 
3662         /* Mutex is not taken during early boot */
3663         if (slab_state <= UP)
3664                 return 0;
3665 
3666         memcg_propagate_slab_attrs(s);
3667         err = sysfs_slab_add(s);
3668         if (err)
3669                 kmem_cache_close(s);
3670 
3671         return err;
3672 }
3673 
3674 #ifdef CONFIG_SMP
3675 /*
3676  * Use the cpu notifier to insure that the cpu slabs are flushed when
3677  * necessary.
3678  */
3679 static int slab_cpuup_callback(struct notifier_block *nfb,
3680                 unsigned long action, void *hcpu)
3681 {
3682         long cpu = (long)hcpu;
3683         struct kmem_cache *s;
3684         unsigned long flags;
3685 
3686         switch (action) {
3687         case CPU_UP_CANCELED:
3688         case CPU_UP_CANCELED_FROZEN:
3689         case CPU_DEAD:
3690         case CPU_DEAD_FROZEN:
3691                 mutex_lock(&slab_mutex);
3692                 list_for_each_entry(s, &slab_caches, list) {
3693                         local_irq_save(flags);
3694                         __flush_cpu_slab(s, cpu);
3695                         local_irq_restore(flags);
3696                 }
3697                 mutex_unlock(&slab_mutex);
3698                 break;
3699         default:
3700                 break;
3701         }
3702         return NOTIFY_OK;
3703 }
3704 
3705 static struct notifier_block slab_notifier = {
3706         .notifier_call = slab_cpuup_callback
3707 };
3708 
3709 #endif
3710 
3711 void *__kmalloc_track_caller(size_t size, gfp_t gfpflags, unsigned long caller)
3712 {
3713         struct kmem_cache *s;
3714         void *ret;
3715 
3716         if (unlikely(size > KMALLOC_MAX_CACHE_SIZE))
3717                 return kmalloc_large(size, gfpflags);
3718 
3719         s = kmalloc_slab(size, gfpflags);
3720 
3721         if (unlikely(ZERO_OR_NULL_PTR(s)))
3722                 return s;
3723 
3724         ret = slab_alloc(s, gfpflags, caller);
3725 
3726         /* Honor the call site pointer we received. */
3727         trace_kmalloc(caller, ret, size, s->size, gfpflags);
3728 
3729         return ret;
3730 }
3731 
3732 #ifdef CONFIG_NUMA
3733 void *__kmalloc_node_track_caller(size_t size, gfp_t gfpflags,
3734                                         int node, unsigned long caller)
3735 {
3736         struct kmem_cache *s;
3737         void *ret;
3738 
3739         if (unlikely(size > KMALLOC_MAX_CACHE_SIZE)) {
3740                 ret = kmalloc_large_node(size, gfpflags, node);
3741 
3742                 trace_kmalloc_node(caller, ret,
3743                                    size, PAGE_SIZE << get_order(size),
3744                                    gfpflags, node);
3745 
3746                 return ret;
3747         }
3748 
3749         s = kmalloc_slab(size, gfpflags);
3750 
3751         if (unlikely(ZERO_OR_NULL_PTR(s)))
3752                 return s;
3753 
3754         ret = slab_alloc_node(s, gfpflags, node, caller);
3755 
3756         /* Honor the call site pointer we received. */
3757         trace_kmalloc_node(caller, ret, size, s->size, gfpflags, node);
3758 
3759         return ret;
3760 }
3761 #endif
3762 
3763 #ifdef CONFIG_SYSFS
3764 static int count_inuse(struct page *page)
3765 {
3766         return page->inuse;
3767 }
3768 
3769 static int count_total(struct page *page)
3770 {
3771         return page->objects;
3772 }
3773 #endif
3774 
3775 #ifdef CONFIG_SLUB_DEBUG
3776 static int validate_slab(struct kmem_cache *s, struct page *page,
3777                                                 unsigned long *map)
3778 {
3779         void *p;
3780         void *addr = page_address(page);
3781 
3782         if (!check_slab(s, page) ||
3783                         !on_freelist(s, page, NULL))
3784                 return 0;
3785 
3786         /* Now we know that a valid freelist exists */
3787         bitmap_zero(map, page->objects);
3788 
3789         get_map(s, page, map);
3790         for_each_object(p, s, addr, page->objects) {
3791                 if (test_bit(slab_index(p, s, addr), map))
3792                         if (!check_object(s, page, p, SLUB_RED_INACTIVE))
3793                                 return 0;
3794         }
3795 
3796         for_each_object(p, s, addr, page->objects)
3797                 if (!test_bit(slab_index(p, s, addr), map))
3798                         if (!check_object(s, page, p, SLUB_RED_ACTIVE))
3799                                 return 0;
3800         return 1;
3801 }
3802 
3803 static void validate_slab_slab(struct kmem_cache *s, struct page *page,
3804                                                 unsigned long *map)
3805 {
3806         slab_lock(page);
3807         validate_slab(s, page, map);
3808         slab_unlock(page);
3809 }
3810 
3811 static int validate_slab_node(struct kmem_cache *s,
3812                 struct kmem_cache_node *n, unsigned long *map)
3813 {
3814         unsigned long count = 0;
3815         struct page *page;
3816         unsigned long flags;
3817 
3818         spin_lock_irqsave(&n->list_lock, flags);
3819 
3820         list_for_each_entry(page, &n->partial, lru) {
3821                 validate_slab_slab(s, page, map);
3822                 count++;
3823         }
3824         if (count != n->nr_partial)
3825                 pr_err("SLUB %s: %ld partial slabs counted but counter=%ld\n",
3826                        s->name, count, n->nr_partial);
3827 
3828         if (!(s->flags & SLAB_STORE_USER))
3829                 goto out;
3830 
3831         list_for_each_entry(page, &n->full, lru) {
3832                 validate_slab_slab(s, page, map);
3833                 count++;
3834         }
3835         if (count != atomic_long_read(&n->nr_slabs))
3836                 pr_err("SLUB: %s %ld slabs counted but counter=%ld\n",
3837                        s->name, count, atomic_long_read(&n->nr_slabs));
3838 
3839 out:
3840         spin_unlock_irqrestore(&n->list_lock, flags);
3841         return count;
3842 }
3843 
3844 static long validate_slab_cache(struct kmem_cache *s)
3845 {
3846         int node;
3847         unsigned long count = 0;
3848         unsigned long *map = kmalloc(BITS_TO_LONGS(oo_objects(s->max)) *
3849                                 sizeof(unsigned long), GFP_KERNEL);
3850         struct kmem_cache_node *n;
3851 
3852         if (!map)
3853                 return -ENOMEM;
3854 
3855         flush_all(s);
3856         for_each_kmem_cache_node(s, node, n)
3857                 count += validate_slab_node(s, n, map);
3858         kfree(map);
3859         return count;
3860 }
3861 /*
3862  * Generate lists of code addresses where slabcache objects are allocated
3863  * and freed.
3864  */
3865 
3866 struct location {
3867         unsigned long count;
3868         unsigned long addr;
3869         long long sum_time;
3870         long min_time;
3871         long max_time;
3872         long min_pid;
3873         long max_pid;
3874         DECLARE_BITMAP(cpus, NR_CPUS);
3875         nodemask_t nodes;
3876 };
3877 
3878 struct loc_track {
3879         unsigned long max;
3880         unsigned long count;
3881         struct location *loc;
3882 };
3883 
3884 static void free_loc_track(struct loc_track *t)
3885 {
3886         if (t->max)
3887                 free_pages((unsigned long)t->loc,
3888                         get_order(sizeof(struct location) * t->max));
3889 }
3890 
3891 static int alloc_loc_track(struct loc_track *t, unsigned long max, gfp_t flags)
3892 {
3893         struct location *l;
3894         int order;
3895 
3896         order = get_order(sizeof(struct location) * max);
3897 
3898         l = (void *)__get_free_pages(flags, order);
3899         if (!l)
3900                 return 0;
3901 
3902         if (t->count) {
3903                 memcpy(l, t->loc, sizeof(struct location) * t->count);
3904                 free_loc_track(t);
3905         }
3906         t->max = max;
3907         t->loc = l;
3908         return 1;
3909 }
3910 
3911 static int add_location(struct loc_track *t, struct kmem_cache *s,
3912                                 const struct track *track)
3913 {
3914         long start, end, pos;
3915         struct location *l;
3916         unsigned long caddr;
3917         unsigned long age = jiffies - track->when;
3918 
3919         start = -1;
3920         end = t->count;
3921 
3922         for ( ; ; ) {
3923                 pos = start + (end - start + 1) / 2;
3924 
3925                 /*
3926                  * There is nothing at "end". If we end up there
3927                  * we need to add something to before end.
3928                  */
3929                 if (pos == end)
3930                         break;
3931 
3932                 caddr = t->loc[pos].addr;
3933                 if (track->addr == caddr) {
3934 
3935                         l = &t->loc[pos];
3936                         l->count++;
3937                         if (track->when) {
3938                                 l->sum_time += age;
3939                                 if (age < l->min_time)
3940                                         l->min_time = age;
3941                                 if (age > l->max_time)
3942                                         l->max_time = age;
3943 
3944                                 if (track->pid < l->min_pid)
3945                                         l->min_pid = track->pid;
3946                                 if (track->pid > l->max_pid)
3947                                         l->max_pid = track->pid;
3948 
3949                                 cpumask_set_cpu(track->cpu,
3950                                                 to_cpumask(l->cpus));
3951                         }
3952                         node_set(page_to_nid(virt_to_page(track)), l->nodes);
3953                         return 1;
3954                 }
3955 
3956                 if (track->addr < caddr)
3957                         end = pos;
3958                 else
3959                         start = pos;
3960         }
3961 
3962         /*
3963          * Not found. Insert new tracking element.
3964          */
3965         if (t->count >= t->max && !alloc_loc_track(t, 2 * t->max, GFP_ATOMIC))
3966                 return 0;
3967 
3968         l = t->loc + pos;
3969         if (pos < t->count)
3970                 memmove(l + 1, l,
3971                         (t->count - pos) * sizeof(struct location));
3972         t->count++;
3973         l->count = 1;
3974         l->addr = track->addr;
3975         l->sum_time = age;
3976         l->min_time = age;
3977         l->max_time = age;
3978         l->min_pid = track->pid;
3979         l->max_pid = track->pid;
3980         cpumask_clear(to_cpumask(l->cpus));
3981         cpumask_set_cpu(track->cpu, to_cpumask(l->cpus));
3982         nodes_clear(l->nodes);
3983         node_set(page_to_nid(virt_to_page(track)), l->nodes);
3984         return 1;
3985 }
3986 
3987 static void process_slab(struct loc_track *t, struct kmem_cache *s,
3988                 struct page *page, enum track_item alloc,
3989                 unsigned long *map)
3990 {
3991         void *addr = page_address(page);
3992         void *p;
3993 
3994         bitmap_zero(map, page->objects);
3995         get_map(s, page, map);
3996 
3997         for_each_object(p, s, addr, page->objects)
3998                 if (!test_bit(slab_index(p, s, addr), map))
3999                         add_location(t, s, get_track(s, p, alloc));
4000 }
4001 
4002 static int list_locations(struct kmem_cache *s, char *buf,
4003                                         enum track_item alloc)
4004 {
4005         int len = 0;
4006         unsigned long i;
4007         struct loc_track t = { 0, 0, NULL };
4008         int node;
4009         unsigned long *map = kmalloc(BITS_TO_LONGS(oo_objects(s->max)) *
4010                                      sizeof(unsigned long), GFP_KERNEL);
4011         struct kmem_cache_node *n;
4012 
4013         if (!map || !alloc_loc_track(&t, PAGE_SIZE / sizeof(struct location),
4014                                      GFP_TEMPORARY)) {
4015                 kfree(map);
4016                 return sprintf(buf, "Out of memory\n");
4017         }
4018         /* Push back cpu slabs */
4019         flush_all(s);
4020 
4021         for_each_kmem_cache_node(s, node, n) {
4022                 unsigned long flags;
4023                 struct page *page;
4024 
4025                 if (!atomic_long_read(&n->nr_slabs))
4026                         continue;
4027 
4028                 spin_lock_irqsave(&n->list_lock, flags);
4029                 list_for_each_entry(page, &n->partial, lru)
4030                         process_slab(&t, s, page, alloc, map);
4031                 list_for_each_entry(page, &n->full, lru)
4032                         process_slab(&t, s, page, alloc, map);
4033                 spin_unlock_irqrestore(&n->list_lock, flags);
4034         }
4035 
4036         for (i = 0; i < t.count; i++) {
4037                 struct location *l = &t.loc[i];
4038 
4039                 if (len > PAGE_SIZE - KSYM_SYMBOL_LEN - 100)
4040                         break;
4041                 len += sprintf(buf + len, "%7ld ", l->count);
4042 
4043                 if (l->addr)
4044                         len += sprintf(buf + len, "%pS", (void *)l->addr);
4045                 else
4046                         len += sprintf(buf + len, "<not-available>");
4047 
4048                 if (l->sum_time != l->min_time) {
4049                         len += sprintf(buf + len, " age=%ld/%ld/%ld",
4050                                 l->min_time,
4051                                 (long)div_u64(l->sum_time, l->count),
4052                                 l->max_time);
4053                 } else
4054                         len += sprintf(buf + len, " age=%ld",
4055                                 l->min_time);
4056 
4057                 if (l->min_pid != l->max_pid)
4058                         len += sprintf(buf + len, " pid=%ld-%ld",
4059                                 l->min_pid, l->max_pid);
4060                 else
4061                         len += sprintf(buf + len, " pid=%ld",
4062                                 l->min_pid);
4063 
4064                 if (num_online_cpus() > 1 &&
4065                                 !cpumask_empty(to_cpumask(l->cpus)) &&
4066                                 len < PAGE_SIZE - 60) {
4067                         len += sprintf(buf + len, " cpus=");
4068                         len += cpulist_scnprintf(buf + len,
4069                                                  PAGE_SIZE - len - 50,
4070                                                  to_cpumask(l->cpus));
4071                 }
4072 
4073                 if (nr_online_nodes > 1 && !nodes_empty(l->nodes) &&
4074                                 len < PAGE_SIZE - 60) {
4075                         len += sprintf(buf + len, " nodes=");
4076                         len += nodelist_scnprintf(buf + len,
4077                                                   PAGE_SIZE - len - 50,
4078                                                   l->nodes);
4079                 }
4080 
4081                 len += sprintf(buf + len, "\n");
4082         }
4083 
4084         free_loc_track(&t);
4085         kfree(map);
4086         if (!t.count)
4087                 len += sprintf(buf, "No data\n");
4088         return len;
4089 }
4090 #endif
4091 
4092 #ifdef SLUB_RESILIENCY_TEST
4093 static void __init resiliency_test(void)
4094 {
4095         u8 *p;
4096 
4097         BUILD_BUG_ON(KMALLOC_MIN_SIZE > 16 || KMALLOC_SHIFT_HIGH < 10);
4098 
4099         pr_err("SLUB resiliency testing\n");
4100         pr_err("-----------------------\n");
4101         pr_err("A. Corruption after allocation\n");
4102 
4103         p = kzalloc(16, GFP_KERNEL);
4104         p[16] = 0x12;
4105         pr_err("\n1. kmalloc-16: Clobber Redzone/next pointer 0x12->0x%p\n\n",
4106                p + 16);
4107 
4108         validate_slab_cache(kmalloc_caches[4]);
4109 
4110         /* Hmmm... The next two are dangerous */
4111         p = kzalloc(32, GFP_KERNEL);
4112         p[32 + sizeof(void *)] = 0x34;
4113         pr_err("\n2. kmalloc-32: Clobber next pointer/next slab 0x34 -> -0x%p\n",
4114                p);
4115         pr_err("If allocated object is overwritten then not detectable\n\n");
4116 
4117         validate_slab_cache(kmalloc_caches[5]);
4118         p = kzalloc(64, GFP_KERNEL);
4119         p += 64 + (get_cycles() & 0xff) * sizeof(void *);
4120         *p = 0x56;
4121         pr_err("\n3. kmalloc-64: corrupting random byte 0x56->0x%p\n",
4122                p);
4123         pr_err("If allocated object is overwritten then not detectable\n\n");
4124         validate_slab_cache(kmalloc_caches[6]);
4125 
4126         pr_err("\nB. Corruption after free\n");
4127         p = kzalloc(128, GFP_KERNEL);
4128         kfree(p);
4129         *p = 0x78;
4130         pr_err("1. kmalloc-128: Clobber first word 0x78->0x%p\n\n", p);
4131         validate_slab_cache(kmalloc_caches[7]);
4132 
4133         p = kzalloc(256, GFP_KERNEL);
4134         kfree(p);
4135         p[50] = 0x9a;
4136         pr_err("\n2. kmalloc-256: Clobber 50th byte 0x9a->0x%p\n\n", p);
4137         validate_slab_cache(kmalloc_caches[8]);
4138 
4139         p = kzalloc(512, GFP_KERNEL);
4140         kfree(p);
4141         p[512] = 0xab;
4142         pr_err("\n3. kmalloc-512: Clobber redzone 0xab->0x%p\n\n", p);
4143         validate_slab_cache(kmalloc_caches[9]);
4144 }
4145 #else
4146 #ifdef CONFIG_SYSFS
4147 static void resiliency_test(void) {};
4148 #endif
4149 #endif
4150 
4151 #ifdef CONFIG_SYSFS
4152 enum slab_stat_type {
4153         SL_ALL,                 /* All slabs */
4154         SL_PARTIAL,             /* Only partially allocated slabs */
4155         SL_CPU,                 /* Only slabs used for cpu caches */
4156         SL_OBJECTS,             /* Determine allocated objects not slabs */
4157         SL_TOTAL                /* Determine object capacity not slabs */
4158 };
4159 
4160 #define SO_ALL          (1 << SL_ALL)
4161 #define SO_PARTIAL      (1 << SL_PARTIAL)
4162 #define SO_CPU          (1 << SL_CPU)
4163 #define SO_OBJECTS      (1 << SL_OBJECTS)
4164 #define SO_TOTAL        (1 << SL_TOTAL)
4165 
4166 static ssize_t show_slab_objects(struct kmem_cache *s,
4167                             char *buf, unsigned long flags)
4168 {
4169         unsigned long total = 0;
4170         int node;
4171         int x;
4172         unsigned long *nodes;
4173 
4174         nodes = kzalloc(sizeof(unsigned long) * nr_node_ids, GFP_KERNEL);
4175         if (!nodes)
4176                 return -ENOMEM;
4177 
4178         if (flags & SO_CPU) {
4179                 int cpu;
4180 
4181                 for_each_possible_cpu(cpu) {
4182                         struct kmem_cache_cpu *c = per_cpu_ptr(s->cpu_slab,
4183                                                                cpu);
4184                         int node;
4185                         struct page *page;
4186 
4187                         page = ACCESS_ONCE(c->page);
4188                         if (!page)
4189                                 continue;
4190 
4191                         node = page_to_nid(page);
4192                         if (flags & SO_TOTAL)
4193                                 x = page->objects;
4194                         else if (flags & SO_OBJECTS)
4195                                 x = page->inuse;
4196                         else
4197                                 x = 1;
4198 
4199                         total += x;
4200                         nodes[node] += x;
4201 
4202                         page = ACCESS_ONCE(c->partial);
4203                         if (page) {
4204                                 node = page_to_nid(page);
4205                                 if (flags & SO_TOTAL)
4206                                         WARN_ON_ONCE(1);
4207                                 else if (flags & SO_OBJECTS)
4208                                         WARN_ON_ONCE(1);
4209                                 else
4210                                         x = page->pages;
4211                                 total += x;
4212                                 nodes[node] += x;
4213                         }
4214                 }
4215         }
4216 
4217         get_online_mems();
4218 #ifdef CONFIG_SLUB_DEBUG
4219         if (flags & SO_ALL) {
4220                 struct kmem_cache_node *n;
4221 
4222                 for_each_kmem_cache_node(s, node, n) {
4223 
4224                         if (flags & SO_TOTAL)
4225                                 x = atomic_long_read(&n->total_objects);
4226                         else if (flags & SO_OBJECTS)
4227                                 x = atomic_long_read(&n->total_objects) -
4228                                         count_partial(n, count_free);
4229                         else
4230                                 x = atomic_long_read(&n->nr_slabs);
4231                         total += x;
4232                         nodes[node] += x;
4233                 }
4234 
4235         } else
4236 #endif
4237         if (flags & SO_PARTIAL) {
4238                 struct kmem_cache_node *n;
4239 
4240                 for_each_kmem_cache_node(s, node, n) {
4241                         if (flags & SO_TOTAL)
4242                                 x = count_partial(n, count_total);
4243                         else if (flags & SO_OBJECTS)
4244                                 x = count_partial(n, count_inuse);
4245                         else
4246                                 x = n->nr_partial;
4247                         total += x;
4248                         nodes[node] += x;
4249                 }
4250         }
4251         x = sprintf(buf, "%lu", total);
4252 #ifdef CONFIG_NUMA
4253         for (node = 0; node < nr_node_ids; node++)
4254                 if (nodes[node])
4255                         x += sprintf(buf + x, " N%d=%lu",
4256                                         node, nodes[node]);
4257 #endif
4258         put_online_mems();
4259         kfree(nodes);
4260         return x + sprintf(buf + x, "\n");
4261 }
4262 
4263 #ifdef CONFIG_SLUB_DEBUG
4264 static int any_slab_objects(struct kmem_cache *s)
4265 {
4266         int node;
4267         struct kmem_cache_node *n;
4268 
4269         for_each_kmem_cache_node(s, node, n)
4270                 if (atomic_long_read(&n->total_objects))
4271                         return 1;
4272 
4273         return 0;
4274 }
4275 #endif
4276 
4277 #define to_slab_attr(n) container_of(n, struct slab_attribute, attr)
4278 #define to_slab(n) container_of(n, struct kmem_cache, kobj)
4279 
4280 struct slab_attribute {
4281         struct attribute attr;
4282         ssize_t (*show)(struct kmem_cache *s, char *buf);
4283         ssize_t (*store)(struct kmem_cache *s, const char *x, size_t count);
4284 };
4285 
4286 #define SLAB_ATTR_RO(_name) \
4287         static struct slab_attribute _name##_attr = \
4288         __ATTR(_name, 0400, _name##_show, NULL)
4289 
4290 #define SLAB_ATTR(_name) \
4291         static struct slab_attribute _name##_attr =  \
4292         __ATTR(_name, 0600, _name##_show, _name##_store)
4293 
4294 static ssize_t slab_size_show(struct kmem_cache *s, char *buf)
4295 {
4296         return sprintf(buf, "%d\n", s->size);
4297 }
4298 SLAB_ATTR_RO(slab_size);
4299 
4300 static ssize_t align_show(struct kmem_cache *s, char *buf)
4301 {
4302         return sprintf(buf, "%d\n", s->align);
4303 }
4304 SLAB_ATTR_RO(align);
4305 
4306 static ssize_t object_size_show(struct kmem_cache *s, char *buf)
4307 {
4308         return sprintf(buf, "%d\n", s->object_size);
4309 }
4310 SLAB_ATTR_RO(object_size);
4311 
4312 static ssize_t objs_per_slab_show(struct kmem_cache *s, char *buf)
4313 {
4314         return sprintf(buf, "%d\n", oo_objects(s->oo));
4315 }
4316 SLAB_ATTR_RO(objs_per_slab);
4317 
4318 static ssize_t order_store(struct kmem_cache *s,
4319                                 const char *buf, size_t length)
4320 {
4321         unsigned long order;
4322         int err;
4323 
4324         err = kstrtoul(buf, 10, &order);
4325         if (err)
4326                 return err;
4327 
4328         if (order > slub_max_order || order < slub_min_order)
4329                 return -EINVAL;
4330 
4331         calculate_sizes(s, order);
4332         return length;
4333 }
4334 
4335 static ssize_t order_show(struct kmem_cache *s, char *buf)
4336 {
4337         return sprintf(buf, "%d\n", oo_order(s->oo));
4338 }
4339 SLAB_ATTR(order);
4340 
4341 static ssize_t min_partial_show(struct kmem_cache *s, char *buf)
4342 {
4343         return sprintf(buf, "%lu\n", s->min_partial);
4344 }
4345 
4346 static ssize_t min_partial_store(struct kmem_cache *s, const char *buf,
4347                                  size_t length)
4348 {
4349         unsigned long min;
4350         int err;
4351 
4352         err = kstrtoul(buf, 10, &min);
4353         if (err)
4354                 return err;
4355 
4356         set_min_partial(s, min);
4357         return length;
4358 }
4359 SLAB_ATTR(min_partial);
4360 
4361 static ssize_t cpu_partial_show(struct kmem_cache *s, char *buf)
4362 {
4363         return sprintf(buf, "%u\n", s->cpu_partial);
4364 }
4365 
4366 static ssize_t cpu_partial_store(struct kmem_cache *s, const char *buf,
4367                                  size_t length)
4368 {
4369         unsigned long objects;
4370         int err;
4371 
4372         err = kstrtoul(buf, 10, &objects);
4373         if (err)
4374                 return err;
4375         if (objects && !kmem_cache_has_cpu_partial(s))
4376                 return -EINVAL;
4377 
4378         s->cpu_partial = objects;
4379         flush_all(s);
4380         return length;
4381 }
4382 SLAB_ATTR(cpu_partial);
4383 
4384 static ssize_t ctor_show(struct kmem_cache *s, char *buf)
4385 {
4386         if (!s->ctor)
4387                 return 0;
4388         return sprintf(buf, "%pS\n", s->ctor);
4389 }
4390 SLAB_ATTR_RO(ctor);
4391 
4392 static ssize_t aliases_show(struct kmem_cache *s, char *buf)
4393 {
4394         return sprintf(buf, "%d\n", s->refcount < 0 ? 0 : s->refcount - 1);
4395 }
4396 SLAB_ATTR_RO(aliases);
4397 
4398 static ssize_t partial_show(struct kmem_cache *s, char *buf)
4399 {
4400         return show_slab_objects(s, buf, SO_PARTIAL);
4401 }
4402 SLAB_ATTR_RO(partial);
4403 
4404 static ssize_t cpu_slabs_show(struct kmem_cache *s, char *buf)
4405 {
4406         return show_slab_objects(s, buf, SO_CPU);
4407 }
4408 SLAB_ATTR_RO(cpu_slabs);
4409 
4410 static ssize_t objects_show(struct kmem_cache *s, char *buf)
4411 {
4412         return show_slab_objects(s, buf, SO_ALL|SO_OBJECTS);
4413 }
4414 SLAB_ATTR_RO(objects);
4415 
4416 static ssize_t objects_partial_show(struct kmem_cache *s, char *buf)
4417 {
4418         return show_slab_objects(s, buf, SO_PARTIAL|SO_OBJECTS);
4419 }
4420 SLAB_ATTR_RO(objects_partial);
4421 
4422 static ssize_t slabs_cpu_partial_show(struct kmem_cache *s, char *buf)
4423 {
4424         int objects = 0;
4425         int pages = 0;
4426         int cpu;
4427         int len;
4428 
4429         for_each_online_cpu(cpu) {
4430                 struct page *page = per_cpu_ptr(s->cpu_slab, cpu)->partial;
4431 
4432                 if (page) {
4433                         pages += page->pages;
4434                         objects += page->pobjects;
4435                 }
4436         }
4437 
4438         len = sprintf(buf, "%d(%d)", objects, pages);
4439 
4440 #ifdef CONFIG_SMP
4441         for_each_online_cpu(cpu) {
4442                 struct page *page = per_cpu_ptr(s->cpu_slab, cpu) ->partial;
4443 
4444                 if (page && len < PAGE_SIZE - 20)
4445                         len += sprintf(buf + len, " C%d=%d(%d)", cpu,
4446                                 page->pobjects, page->pages);
4447         }
4448 #endif
4449         return len + sprintf(buf + len, "\n");
4450 }
4451 SLAB_ATTR_RO(slabs_cpu_partial);
4452 
4453 static ssize_t reclaim_account_show(struct kmem_cache *s, char *buf)
4454 {
4455         return sprintf(buf, "%d\n", !!(s->flags & SLAB_RECLAIM_ACCOUNT));
4456 }
4457 
4458 static ssize_t reclaim_account_store(struct kmem_cache *s,
4459                                 const char *buf, size_t length)
4460 {
4461         s->flags &= ~SLAB_RECLAIM_ACCOUNT;
4462         if (buf[0] == '1')
4463                 s->flags |= SLAB_RECLAIM_ACCOUNT;
4464         return length;
4465 }
4466 SLAB_ATTR(reclaim_account);
4467 
4468 static ssize_t hwcache_align_show(struct kmem_cache *s, char *buf)
4469 {
4470         return sprintf(buf, "%d\n", !!(s->flags & SLAB_HWCACHE_ALIGN));
4471 }
4472 SLAB_ATTR_RO(hwcache_align);
4473 
4474 #ifdef CONFIG_ZONE_DMA
4475 static ssize_t cache_dma_show(struct kmem_cache *s, char *buf)
4476 {
4477         return sprintf(buf, "%d\n", !!(s->flags & SLAB_CACHE_DMA));
4478 }
4479 SLAB_ATTR_RO(cache_dma);
4480 #endif
4481 
4482 static ssize_t destroy_by_rcu_show(struct kmem_cache *s, char *buf)
4483 {
4484         return sprintf(buf, "%d\n", !!(s->flags & SLAB_DESTROY_BY_RCU));
4485 }
4486 SLAB_ATTR_RO(destroy_by_rcu);
4487 
4488 static ssize_t reserved_show(struct kmem_cache *s, char *buf)
4489 {
4490         return sprintf(buf, "%d\n", s->reserved);
4491 }
4492 SLAB_ATTR_RO(reserved);
4493 
4494 #ifdef CONFIG_SLUB_DEBUG
4495 static ssize_t slabs_show(struct kmem_cache *s, char *buf)
4496 {
4497         return show_slab_objects(s, buf, SO_ALL);
4498 }
4499 SLAB_ATTR_RO(slabs);
4500 
4501 static ssize_t total_objects_show(struct kmem_cache *s, char *buf)
4502 {
4503         return show_slab_objects(s, buf, SO_ALL|SO_TOTAL);
4504 }
4505 SLAB_ATTR_RO(total_objects);
4506 
4507 static ssize_t sanity_checks_show(struct kmem_cache *s, char *buf)
4508 {
4509         return sprintf(buf, "%d\n", !!(s->flags & SLAB_DEBUG_FREE));
4510 }
4511 
4512 static ssize_t sanity_checks_store(struct kmem_cache *s,
4513                                 const char *buf, size_t length)
4514 {
4515         s->flags &= ~SLAB_DEBUG_FREE;
4516         if (buf[0] == '1') {
4517                 s->flags &= ~__CMPXCHG_DOUBLE;
4518                 s->flags |= SLAB_DEBUG_FREE;
4519         }
4520         return length;
4521 }
4522 SLAB_ATTR(sanity_checks);
4523 
4524 static ssize_t trace_show(struct kmem_cache *s, char *buf)
4525 {
4526         return sprintf(buf, "%d\n", !!(s->flags & SLAB_TRACE));
4527 }
4528 
4529 static ssize_t trace_store(struct kmem_cache *s, const char *buf,
4530                                                         size_t length)
4531 {
4532         /*
4533          * Tracing a merged cache is going to give confusing results
4534          * as well as cause other issues like converting a mergeable
4535          * cache into an umergeable one.
4536          */
4537         if (s->refcount > 1)
4538                 return -EINVAL;
4539 
4540         s->flags &= ~SLAB_TRACE;
4541         if (buf[0] == '1') {
4542                 s->flags &= ~__CMPXCHG_DOUBLE;
4543                 s->flags |= SLAB_TRACE;
4544         }
4545         return length;
4546 }
4547 SLAB_ATTR(trace);
4548 
4549 static ssize_t red_zone_show(struct kmem_cache *s, char *buf)
4550 {
4551         return sprintf(buf, "%d\n", !!(s->flags & SLAB_RED_ZONE));
4552 }
4553 
4554 static ssize_t red_zone_store(struct kmem_cache *s,
4555                                 const char *buf, size_t length)
4556 {
4557         if (any_slab_objects(s))
4558                 return -EBUSY;
4559 
4560         s->flags &= ~SLAB_RED_ZONE;
4561         if (buf[0] == '1') {
4562                 s->flags &= ~__CMPXCHG_DOUBLE;
4563                 s->flags |= SLAB_RED_ZONE;
4564         }
4565         calculate_sizes(s, -1);
4566         return length;
4567 }
4568 SLAB_ATTR(red_zone);
4569 
4570 static ssize_t poison_show(struct kmem_cache *s, char *buf)
4571 {
4572         return sprintf(buf, "%d\n", !!(s->flags & SLAB_POISON));
4573 }
4574 
4575 static ssize_t poison_store(struct kmem_cache *s,
4576                                 const char *buf, size_t length)
4577 {
4578         if (any_slab_objects(s))
4579                 return -EBUSY;
4580 
4581         s->flags &= ~SLAB_POISON;
4582         if (buf[0] == '1') {
4583                 s->flags &= ~__CMPXCHG_DOUBLE;
4584                 s->flags |= SLAB_POISON;
4585         }
4586         calculate_sizes(s, -1);
4587         return length;
4588 }
4589 SLAB_ATTR(poison);
4590 
4591 static ssize_t store_user_show(struct kmem_cache *s, char *buf)
4592 {
4593         return sprintf(buf, "%d\n", !!(s->flags & SLAB_STORE_USER));
4594 }
4595 
4596 static ssize_t store_user_store(struct kmem_cache *s,
4597                                 const char *buf, size_t length)
4598 {
4599         if (any_slab_objects(s))
4600                 return -EBUSY;
4601 
4602         s->flags &= ~SLAB_STORE_USER;
4603         if (buf[0] == '1') {
4604                 s->flags &= ~__CMPXCHG_DOUBLE;
4605                 s->flags |= SLAB_STORE_USER;
4606         }
4607         calculate_sizes(s, -1);
4608         return length;
4609 }
4610 SLAB_ATTR(store_user);
4611 
4612 static ssize_t validate_show(struct kmem_cache *s, char *buf)
4613 {
4614         return 0;
4615 }
4616 
4617 static ssize_t validate_store(struct kmem_cache *s,
4618                         const char *buf, size_t length)
4619 {
4620         int ret = -EINVAL;
4621 
4622         if (buf[0] == '1') {
4623                 ret = validate_slab_cache(s);
4624                 if (ret >= 0)
4625                         ret = length;
4626         }
4627         return ret;
4628 }
4629 SLAB_ATTR(validate);
4630 
4631 static ssize_t alloc_calls_show(struct kmem_cache *s, char *buf)
4632 {
4633         if (!(s->flags & SLAB_STORE_USER))
4634                 return -ENOSYS;
4635         return list_locations(s, buf, TRACK_ALLOC);
4636 }
4637 SLAB_ATTR_RO(alloc_calls);
4638 
4639 static ssize_t free_calls_show(struct kmem_cache *s, char *buf)
4640 {
4641         if (!(s->flags & SLAB_STORE_USER))
4642                 return -ENOSYS;
4643         return list_locations(s, buf, TRACK_FREE);
4644 }
4645 SLAB_ATTR_RO(free_calls);
4646 #endif /* CONFIG_SLUB_DEBUG */
4647 
4648 #ifdef CONFIG_FAILSLAB
4649 static ssize_t failslab_show(struct kmem_cache *s, char *buf)
4650 {
4651         return sprintf(buf, "%d\n", !!(s->flags & SLAB_FAILSLAB));
4652 }
4653 
4654 static ssize_t failslab_store(struct kmem_cache *s, const char *buf,
4655                                                         size_t length)
4656 {
4657         if (s->refcount > 1)
4658                 return -EINVAL;
4659 
4660         s->flags &= ~SLAB_FAILSLAB;
4661         if (buf[0] == '1')
4662                 s->flags |= SLAB_FAILSLAB;
4663         return length;
4664 }
4665 SLAB_ATTR(failslab);
4666 #endif
4667 
4668 static ssize_t shrink_show(struct kmem_cache *s, char *buf)
4669 {
4670         return 0;
4671 }
4672 
4673 static ssize_t shrink_store(struct kmem_cache *s,
4674                         const char *buf, size_t length)
4675 {
4676         if (buf[0] == '1') {
4677                 int rc = kmem_cache_shrink(s);
4678 
4679                 if (rc)
4680                         return rc;
4681         } else
4682                 return -EINVAL;
4683         return length;
4684 }
4685 SLAB_ATTR(shrink);
4686 
4687 #ifdef CONFIG_NUMA
4688 static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *s, char *buf)
4689 {
4690         return sprintf(buf, "%d\n", s->remote_node_defrag_ratio / 10);
4691 }
4692 
4693 static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *s,
4694                                 const char *buf, size_t length)
4695 {
4696         unsigned long ratio;
4697         int err;
4698 
4699         err = kstrtoul(buf, 10, &ratio);
4700         if (err)
4701                 return err;
4702 
4703         if (ratio <= 100)
4704                 s->remote_node_defrag_ratio = ratio * 10;
4705 
4706         return length;
4707 }
4708 SLAB_ATTR(remote_node_defrag_ratio);
4709 #endif
4710 
4711 #ifdef CONFIG_SLUB_STATS
4712 static int show_stat(struct kmem_cache *s, char *buf, enum stat_item si)
4713 {
4714         unsigned long sum  = 0;
4715         int cpu;
4716         int len;
4717         int *data = kmalloc(nr_cpu_ids * sizeof(int), GFP_KERNEL);
4718 
4719         if (!data)
4720                 return -ENOMEM;
4721 
4722         for_each_online_cpu(cpu) {
4723                 unsigned x = per_cpu_ptr(s->cpu_slab, cpu)->stat[si];
4724 
4725                 data[cpu] = x;
4726                 sum += x;
4727         }
4728 
4729         len = sprintf(buf, "%lu", sum);
4730 
4731 #ifdef CONFIG_SMP
4732         for_each_online_cpu(cpu) {
4733                 if (data[cpu] && len < PAGE_SIZE - 20)
4734                         len += sprintf(buf + len, " C%d=%u", cpu, data[cpu]);
4735         }
4736 #endif
4737         kfree(data);
4738         return len + sprintf(buf + len, "\n");
4739 }
4740 
4741 static void clear_stat(struct kmem_cache *s, enum stat_item si)
4742 {
4743         int cpu;
4744 
4745         for_each_online_cpu(cpu)
4746                 per_cpu_ptr(s->cpu_slab, cpu)->stat[si] = 0;
4747 }
4748 
4749 #define STAT_ATTR(si, text)                                     \
4750 static ssize_t text##_show(struct kmem_cache *s, char *buf)     \
4751 {                                                               \
4752         return show_stat(s, buf, si);                           \
4753 }                                                               \
4754 static ssize_t text##_store(struct kmem_cache *s,               \
4755                                 const char *buf, size_t length) \
4756 {                                                               \
4757         if (buf[0] != '')                                      \
4758                 return -EINVAL;                                 \
4759         clear_stat(s, si);                                      \
4760         return length;                                          \
4761 }                                                               \
4762 SLAB_ATTR(text);                                                \
4763 
4764 STAT_ATTR(ALLOC_FASTPATH, alloc_fastpath);
4765 STAT_ATTR(ALLOC_SLOWPATH, alloc_slowpath);
4766 STAT_ATTR(FREE_FASTPATH, free_fastpath);
4767 STAT_ATTR(FREE_SLOWPATH, free_slowpath);
4768 STAT_ATTR(FREE_FROZEN, free_frozen);
4769 STAT_ATTR(FREE_ADD_PARTIAL, free_add_partial);
4770 STAT_ATTR(FREE_REMOVE_PARTIAL, free_remove_partial);
4771 STAT_ATTR(ALLOC_FROM_PARTIAL, alloc_from_partial);
4772 STAT_ATTR(ALLOC_SLAB, alloc_slab);
4773 STAT_ATTR(ALLOC_REFILL, alloc_refill);
4774 STAT_ATTR(ALLOC_NODE_MISMATCH, alloc_node_mismatch);
4775 STAT_ATTR(FREE_SLAB, free_slab);
4776 STAT_ATTR(CPUSLAB_FLUSH, cpuslab_flush);
4777 STAT_ATTR(DEACTIVATE_FULL, deactivate_full);
4778 STAT_ATTR(DEACTIVATE_EMPTY, deactivate_empty);
4779 STAT_ATTR(DEACTIVATE_TO_HEAD, deactivate_to_head);
4780 STAT_ATTR(DEACTIVATE_TO_TAIL, deactivate_to_tail);
4781 STAT_ATTR(DEACTIVATE_REMOTE_FREES, deactivate_remote_frees);
4782 STAT_ATTR(DEACTIVATE_BYPASS, deactivate_bypass);
4783 STAT_ATTR(ORDER_FALLBACK, order_fallback);
4784 STAT_ATTR(CMPXCHG_DOUBLE_CPU_FAIL, cmpxchg_double_cpu_fail);
4785 STAT_ATTR(CMPXCHG_DOUBLE_FAIL, cmpxchg_double_fail);
4786 STAT_ATTR(CPU_PARTIAL_ALLOC, cpu_partial_alloc);
4787 STAT_ATTR(CPU_PARTIAL_FREE, cpu_partial_free);
4788 STAT_ATTR(CPU_PARTIAL_NODE, cpu_partial_node);
4789 STAT_ATTR(CPU_PARTIAL_DRAIN, cpu_partial_drain);
4790 #endif
4791 
4792 static struct attribute *slab_attrs[] = {
4793         &slab_size_attr.attr,
4794         &object_size_attr.attr,
4795         &objs_per_slab_attr.attr,
4796         &order_attr.attr,
4797         &min_partial_attr.attr,
4798         &cpu_partial_attr.attr,
4799         &objects_attr.attr,
4800         &objects_partial_attr.attr,
4801         &partial_attr.attr,
4802         &cpu_slabs_attr.attr,
4803         &ctor_attr.attr,
4804         &aliases_attr.attr,
4805         &align_attr.attr,
4806         &hwcache_align_attr.attr,
4807         &reclaim_account_attr.attr,
4808         &destroy_by_rcu_attr.attr,
4809         &shrink_attr.attr,
4810         &reserved_attr.attr,
4811         &slabs_cpu_partial_attr.attr,
4812 #ifdef CONFIG_SLUB_DEBUG
4813         &total_objects_attr.attr,
4814         &slabs_attr.attr,
4815         &sanity_checks_attr.attr,
4816         &trace_attr.attr,
4817         &red_zone_attr.attr,
4818         &poison_attr.attr,
4819         &store_user_attr.attr,
4820         &validate_attr.attr,
4821         &alloc_calls_attr.attr,
4822         &free_calls_attr.attr,
4823 #endif
4824 #ifdef CONFIG_ZONE_DMA
4825         &cache_dma_attr.attr,
4826 #endif
4827 #ifdef CONFIG_NUMA
4828         &remote_node_defrag_ratio_attr.attr,
4829 #endif
4830 #ifdef CONFIG_SLUB_STATS
4831         &alloc_fastpath_attr.attr,
4832         &alloc_slowpath_attr.attr,
4833         &free_fastpath_attr.attr,
4834         &free_slowpath_attr.attr,
4835         &free_frozen_attr.attr,
4836         &free_add_partial_attr.attr,
4837         &free_remove_partial_attr.attr,
4838         &alloc_from_partial_attr.attr,
4839         &alloc_slab_attr.attr,
4840         &alloc_refill_attr.attr,
4841         &alloc_node_mismatch_attr.attr,
4842         &free_slab_attr.attr,
4843         &cpuslab_flush_attr.attr,
4844         &deactivate_full_attr.attr,
4845         &deactivate_empty_attr.attr,
4846         &deactivate_to_head_attr.attr,
4847         &deactivate_to_tail_attr.attr,
4848         &deactivate_remote_frees_attr.attr,
4849         &deactivate_bypass_attr.attr,
4850         &order_fallback_attr.attr,
4851         &cmpxchg_double_fail_attr.attr,
4852         &cmpxchg_double_cpu_fail_attr.attr,
4853         &cpu_partial_alloc_attr.attr,
4854         &cpu_partial_free_attr.attr,
4855         &cpu_partial_node_attr.attr,
4856         &cpu_partial_drain_attr.attr,
4857 #endif
4858 #ifdef CONFIG_FAILSLAB
4859         &failslab_attr.attr,
4860 #endif
4861 
4862         NULL
4863 };
4864 
4865 static struct attribute_group slab_attr_group = {
4866         .attrs = slab_attrs,
4867 };
4868 
4869 static ssize_t slab_attr_show(struct kobject *kobj,
4870                                 struct attribute *attr,
4871                                 char *buf)
4872 {
4873         struct slab_attribute *attribute;
4874         struct kmem_cache *s;
4875         int err;
4876 
4877         attribute = to_slab_attr(attr);
4878         s = to_slab(kobj);
4879 
4880         if (!attribute->show)
4881                 return -EIO;
4882 
4883         err = attribute->show(s, buf);
4884 
4885         return err;
4886 }
4887 
4888 static ssize_t slab_attr_store(struct kobject *kobj,
4889                                 struct attribute *attr,
4890                                 const char *buf, size_t len)
4891 {
4892         struct slab_attribute *attribute;
4893         struct kmem_cache *s;
4894         int err;
4895 
4896         attribute = to_slab_attr(attr);
4897         s = to_slab(kobj);
4898 
4899         if (!attribute->store)
4900                 return -EIO;
4901 
4902         err = attribute->store(s, buf, len);
4903 #ifdef CONFIG_MEMCG_KMEM
4904         if (slab_state >= FULL && err >= 0 && is_root_cache(s)) {
4905                 int i;
4906 
4907                 mutex_lock(&slab_mutex);
4908                 if (s->max_attr_size < len)
4909                         s->max_attr_size = len;
4910 
4911                 /*
4912                  * This is a best effort propagation, so this function's return
4913                  * value will be determined by the parent cache only. This is
4914                  * basically because not all attributes will have a well
4915                  * defined semantics for rollbacks - most of the actions will
4916                  * have permanent effects.
4917                  *
4918                  * Returning the error value of any of the children that fail
4919                  * is not 100 % defined, in the sense that users seeing the
4920                  * error code won't be able to know anything about the state of
4921                  * the cache.
4922                  *
4923                  * Only returning the error code for the parent cache at least
4924                  * has well defined semantics. The cache being written to
4925                  * directly either failed or succeeded, in which case we loop
4926                  * through the descendants with best-effort propagation.
4927                  */
4928                 for_each_memcg_cache_index(i) {
4929                         struct kmem_cache *c = cache_from_memcg_idx(s, i);
4930                         if (c)
4931                                 attribute->store(c, buf, len);
4932                 }
4933                 mutex_unlock(&slab_mutex);
4934         }
4935 #endif
4936         return err;
4937 }
4938 
4939 static void memcg_propagate_slab_attrs(struct kmem_cache *s)
4940 {
4941 #ifdef CONFIG_MEMCG_KMEM
4942         int i;
4943         char *buffer = NULL;
4944         struct kmem_cache *root_cache;
4945 
4946         if (is_root_cache(s))
4947                 return;
4948 
4949         root_cache = s->memcg_params->root_cache;
4950 
4951         /*
4952          * This mean this cache had no attribute written. Therefore, no point
4953          * in copying default values around
4954          */
4955         if (!root_cache->max_attr_size)
4956                 return;
4957 
4958         for (i = 0; i < ARRAY_SIZE(slab_attrs); i++) {
4959                 char mbuf[64];
4960                 char *buf;
4961                 struct slab_attribute *attr = to_slab_attr(slab_attrs[i]);
4962 
4963                 if (!attr || !attr->store || !attr->show)
4964                         continue;
4965 
4966                 /*
4967                  * It is really bad that we have to allocate here, so we will
4968                  * do it only as a fallback. If we actually allocate, though,
4969                  * we can just use the allocated buffer until the end.
4970                  *
4971                  * Most of the slub attributes will tend to be very small in
4972                  * size, but sysfs allows buffers up to a page, so they can
4973                  * theoretically happen.
4974                  */
4975                 if (buffer)
4976                         buf = buffer;
4977                 else if (root_cache->max_attr_size < ARRAY_SIZE(mbuf))
4978                         buf = mbuf;
4979                 else {
4980                         buffer = (char *) get_zeroed_page(GFP_KERNEL);
4981                         if (WARN_ON(!buffer))
4982                                 continue;
4983                         buf = buffer;
4984                 }
4985 
4986                 attr->show(root_cache, buf);
4987                 attr->store(s, buf, strlen(buf));
4988         }
4989 
4990         if (buffer)
4991                 free_page((unsigned long)buffer);
4992 #endif
4993 }
4994 
4995 static void kmem_cache_release(struct kobject *k)
4996 {
4997         slab_kmem_cache_release(to_slab(k));
4998 }
4999 
5000 static const struct sysfs_ops slab_sysfs_ops = {
5001         .show = slab_attr_show,
5002         .store = slab_attr_store,
5003 };
5004 
5005 static struct kobj_type slab_ktype = {
5006         .sysfs_ops = &slab_sysfs_ops,
5007         .release = kmem_cache_release,
5008 };
5009 
5010 static int uevent_filter(struct kset *kset, struct kobject *kobj)
5011 {
5012         struct kobj_type *ktype = get_ktype(kobj);
5013 
5014         if (ktype == &slab_ktype)
5015                 return 1;
5016         return 0;
5017 }
5018 
5019 static const struct kset_uevent_ops slab_uevent_ops = {
5020         .filter = uevent_filter,
5021 };
5022 
5023 static struct kset *slab_kset;
5024 
5025 static inline struct kset *cache_kset(struct kmem_cache *s)
5026 {
5027 #ifdef CONFIG_MEMCG_KMEM
5028         if (!is_root_cache(s))
5029                 return s->memcg_params->root_cache->memcg_kset;
5030 #endif
5031         return slab_kset;
5032 }
5033 
5034 #define ID_STR_LENGTH 64
5035 
5036 /* Create a unique string id for a slab cache:
5037  *
5038  * Format       :[flags-]size
5039  */
5040 static char *create_unique_id(struct kmem_cache *s)
5041 {
5042         char *name = kmalloc(ID_STR_LENGTH, GFP_KERNEL);
5043         char *p = name;
5044 
5045         BUG_ON(!name);
5046 
5047         *p++ = ':';
5048         /*
5049          * First flags affecting slabcache operations. We will only
5050          * get here for aliasable slabs so we do not need to support
5051          * too many flags. The flags here must cover all flags that
5052          * are matched during merging to guarantee that the id is
5053          * unique.
5054          */
5055         if (s->flags & SLAB_CACHE_DMA)
5056                 *p++ = 'd';
5057         if (s->flags & SLAB_RECLAIM_ACCOUNT)
5058                 *p++ = 'a';
5059         if (s->flags & SLAB_DEBUG_FREE)
5060                 *p++ = 'F';
5061         if (!(s->flags & SLAB_NOTRACK))
5062                 *p++ = 't';
5063         if (p != name + 1)
5064                 *p++ = '-';
5065         p += sprintf(p, "%07d", s->size);
5066 
5067         BUG_ON(p > name + ID_STR_LENGTH - 1);
5068         return name;
5069 }
5070 
5071 static int sysfs_slab_add(struct kmem_cache *s)
5072 {
5073         int err;
5074         const char *name;
5075         int unmergeable = slab_unmergeable(s);
5076 
5077         if (unmergeable) {
5078                 /*
5079                  * Slabcache can never be merged so we can use the name proper.
5080                  * This is typically the case for debug situations. In that
5081                  * case we can catch duplicate names easily.
5082                  */
5083                 sysfs_remove_link(&slab_kset->kobj, s->name);
5084                 name = s->name;
5085         } else {
5086                 /*
5087                  * Create a unique name for the slab as a target
5088                  * for the symlinks.
5089                  */
5090                 name = create_unique_id(s);
5091         }
5092 
5093         s->kobj.kset = cache_kset(s);
5094         err = kobject_init_and_add(&s->kobj, &slab_ktype, NULL, "%s", name);
5095         if (err)
5096                 goto out_put_kobj;
5097 
5098         err = sysfs_create_group(&s->kobj, &slab_attr_group);
5099         if (err)
5100                 goto out_del_kobj;
5101 
5102 #ifdef CONFIG_MEMCG_KMEM
5103         if (is_root_cache(s)) {
5104                 s->memcg_kset = kset_create_and_add("cgroup", NULL, &s->kobj);
5105                 if (!s->memcg_kset) {
5106                         err = -ENOMEM;
5107                         goto out_del_kobj;
5108                 }
5109         }
5110 #endif
5111 
5112         kobject_uevent(&s->kobj, KOBJ_ADD);
5113         if (!unmergeable) {
5114                 /* Setup first alias */
5115                 sysfs_slab_alias(s, s->name);
5116         }
5117 out:
5118         if (!unmergeable)
5119                 kfree(name);
5120         return err;
5121 out_del_kobj:
5122         kobject_del(&s->kobj);
5123 out_put_kobj:
5124         kobject_put(&s->kobj);
5125         goto out;
5126 }
5127 
5128 void sysfs_slab_remove(struct kmem_cache *s)
5129 {
5130         if (slab_state < FULL)
5131                 /*
5132                  * Sysfs has not been setup yet so no need to remove the
5133                  * cache from sysfs.
5134                  */
5135                 return;
5136 
5137 #ifdef CONFIG_MEMCG_KMEM
5138         kset_unregister(s->memcg_kset);
5139 #endif
5140         kobject_uevent(&s->kobj, KOBJ_REMOVE);
5141         kobject_del(&s->kobj);
5142         kobject_put(&s->kobj);
5143 }
5144 
5145 /*
5146  * Need to buffer aliases during bootup until sysfs becomes
5147  * available lest we lose that information.
5148  */
5149 struct saved_alias {
5150         struct kmem_cache *s;
5151         const char *name;
5152         struct saved_alias *next;
5153 };
5154 
5155 static struct saved_alias *alias_list;
5156 
5157 static int sysfs_slab_alias(struct kmem_cache *s, const char *name)
5158 {
5159         struct saved_alias *al;
5160 
5161         if (slab_state == FULL) {
5162                 /*
5163                  * If we have a leftover link then remove it.
5164                  */
5165                 sysfs_remove_link(&slab_kset->kobj, name);
5166                 return sysfs_create_link(&slab_kset->kobj, &s->kobj, name);
5167         }
5168 
5169         al = kmalloc(sizeof(struct saved_alias), GFP_KERNEL);
5170         if (!al)
5171                 return -ENOMEM;
5172 
5173         al->s = s;
5174         al->name = name;
5175         al->next = alias_list;
5176         alias_list = al;
5177         return 0;
5178 }
5179 
5180 static int __init slab_sysfs_init(void)
5181 {
5182         struct kmem_cache *s;
5183         int err;
5184 
5185         mutex_lock(&slab_mutex);
5186 
5187         slab_kset = kset_create_and_add("slab", &slab_uevent_ops, kernel_kobj);
5188         if (!slab_kset) {
5189                 mutex_unlock(&slab_mutex);
5190                 pr_err("Cannot register slab subsystem.\n");
5191                 return -ENOSYS;
5192         }
5193 
5194         slab_state = FULL;
5195 
5196         list_for_each_entry(s, &slab_caches, list) {
5197                 err = sysfs_slab_add(s);
5198                 if (err)
5199                         pr_err("SLUB: Unable to add boot slab %s to sysfs\n",
5200                                s->name);
5201         }
5202 
5203         while (alias_list) {
5204                 struct saved_alias *al = alias_list;
5205 
5206                 alias_list = alias_list->next;
5207                 err = sysfs_slab_alias(al->s, al->name);
5208                 if (err)
5209                         pr_err("SLUB: Unable to add boot slab alias %s to sysfs\n",
5210                                al->name);
5211                 kfree(al);
5212         }
5213 
5214         mutex_unlock(&slab_mutex);
5215         resiliency_test();
5216         return 0;
5217 }
5218 
5219 __initcall(slab_sysfs_init);
5220 #endif /* CONFIG_SYSFS */
5221 
5222 /*
5223  * The /proc/slabinfo ABI
5224  */
5225 #ifdef CONFIG_SLABINFO
5226 void get_slabinfo(struct kmem_cache *s, struct slabinfo *sinfo)
5227 {
5228         unsigned long nr_slabs = 0;
5229         unsigned long nr_objs = 0;
5230         unsigned long nr_free = 0;
5231         int node;
5232         struct kmem_cache_node *n;
5233 
5234         for_each_kmem_cache_node(s, node, n) {
5235                 nr_slabs += node_nr_slabs(n);
5236                 nr_objs += node_nr_objs(n);
5237                 nr_free += count_partial(n, count_free);
5238         }
5239 
5240         sinfo->active_objs = nr_objs - nr_free;
5241         sinfo->num_objs = nr_objs;
5242         sinfo->active_slabs = nr_slabs;
5243         sinfo->num_slabs = nr_slabs;
5244         sinfo->objects_per_slab = oo_objects(s->oo);
5245         sinfo->cache_order = oo_order(s->oo);
5246 }
5247 
5248 void slabinfo_show_stats(struct seq_file *m, struct kmem_cache *s)
5249 {
5250 }
5251 
5252 ssize_t slabinfo_write(struct file *file, const char __user *buffer,
5253                        size_t count, loff_t *ppos)
5254 {
5255         return -EIO;
5256 }
5257 #endif /* CONFIG_SLABINFO */
5258 