Linux/fs/exec.c

  1 /*
  2  *  linux/fs/exec.c
  3  *
  4  *  Copyright (C) 1991, 1992  Linus Torvalds
  5  */
  6 
  7 /*
  8  * #!-checking implemented by tytso.
  9  */
 10 /*
 11  * Demand-loading implemented 01.12.91 - no need to read anything but
 12  * the header into memory. The inode of the executable is put into
 13  * "current->executable", and page faults do the actual loading. Clean.
 14  *
 15  * Once more I can proudly say that linux stood up to being changed: it
 16  * was less than 2 hours work to get demand-loading completely implemented.
 17  *
 18  * Demand loading changed July 1993 by Eric Youngdale.   Use mmap instead,
 19  * current->executable is only used by the procfs.  This allows a dispatch
 20  * table to check for several different types  of binary formats.  We keep
 21  * trying until we recognize the file or we run out of supported binary
 22  * formats. 
 23  */
 24 
 25 #include <linux/slab.h>
 26 #include <linux/file.h>
 27 #include <linux/fdtable.h>
 28 #include <linux/mm.h>
 29 #include <linux/vmacache.h>
 30 #include <linux/stat.h>
 31 #include <linux/fcntl.h>
 32 #include <linux/swap.h>
 33 #include <linux/string.h>
 34 #include <linux/init.h>
 35 #include <linux/pagemap.h>
 36 #include <linux/perf_event.h>
 37 #include <linux/highmem.h>
 38 #include <linux/spinlock.h>
 39 #include <linux/key.h>
 40 #include <linux/personality.h>
 41 #include <linux/binfmts.h>
 42 #include <linux/utsname.h>
 43 #include <linux/pid_namespace.h>
 44 #include <linux/module.h>
 45 #include <linux/namei.h>
 46 #include <linux/mount.h>
 47 #include <linux/security.h>
 48 #include <linux/syscalls.h>
 49 #include <linux/tsacct_kern.h>
 50 #include <linux/cn_proc.h>
 51 #include <linux/audit.h>
 52 #include <linux/tracehook.h>
 53 #include <linux/kmod.h>
 54 #include <linux/fsnotify.h>
 55 #include <linux/fs_struct.h>
 56 #include <linux/pipe_fs_i.h>
 57 #include <linux/oom.h>
 58 #include <linux/compat.h>
 59 #include <linux/vmalloc.h>
 60 
 61 #include <asm/uaccess.h>
 62 #include <asm/mmu_context.h>
 63 #include <asm/tlb.h>
 64 
 65 #include <trace/events/task.h>
 66 #include "internal.h"
 67 
 68 #include <trace/events/sched.h>
 69 
 70 int suid_dumpable = 0;
 71 
 72 static LIST_HEAD(formats);
 73 static DEFINE_RWLOCK(binfmt_lock);
 74 
 75 void __register_binfmt(struct linux_binfmt * fmt, int insert)
 76 {
 77         BUG_ON(!fmt);
 78         if (WARN_ON(!fmt->load_binary))
 79                 return;
 80         write_lock(&binfmt_lock);
 81         insert ? list_add(&fmt->lh, &formats) :
 82                  list_add_tail(&fmt->lh, &formats);
 83         write_unlock(&binfmt_lock);
 84 }
 85 
 86 EXPORT_SYMBOL(__register_binfmt);
 87 
 88 void unregister_binfmt(struct linux_binfmt * fmt)
 89 {
 90         write_lock(&binfmt_lock);
 91         list_del(&fmt->lh);
 92         write_unlock(&binfmt_lock);
 93 }
 94 
 95 EXPORT_SYMBOL(unregister_binfmt);
 96 
 97 static inline void put_binfmt(struct linux_binfmt * fmt)
 98 {
 99         module_put(fmt->module);
100 }
101 
102 bool path_noexec(const struct path *path)
103 {
104         return (path->mnt->mnt_flags & MNT_NOEXEC) ||
105                (path->mnt->mnt_sb->s_iflags & SB_I_NOEXEC);
106 }
107 
108 #ifdef CONFIG_USELIB
109 /*
110  * Note that a shared library must be both readable and executable due to
111  * security reasons.
112  *
113  * Also note that we take the address to load from from the file itself.
114  */
115 SYSCALL_DEFINE1(uselib, const char __user *, library)
116 {
117         struct linux_binfmt *fmt;
118         struct file *file;
119         struct filename *tmp = getname(library);
120         int error = PTR_ERR(tmp);
121         static const struct open_flags uselib_flags = {
122                 .open_flag = O_LARGEFILE | O_RDONLY | __FMODE_EXEC,
123                 .acc_mode = MAY_READ | MAY_EXEC,
124                 .intent = LOOKUP_OPEN,
125                 .lookup_flags = LOOKUP_FOLLOW,
126         };
127 
128         if (IS_ERR(tmp))
129                 goto out;
130 
131         file = do_filp_open(AT_FDCWD, tmp, &uselib_flags);
132         putname(tmp);
133         error = PTR_ERR(file);
134         if (IS_ERR(file))
135                 goto out;
136 
137         error = -EINVAL;
138         if (!S_ISREG(file_inode(file)->i_mode))
139                 goto exit;
140 
141         error = -EACCES;
142         if (path_noexec(&file->f_path))
143                 goto exit;
144 
145         fsnotify_open(file);
146 
147         error = -ENOEXEC;
148 
149         read_lock(&binfmt_lock);
150         list_for_each_entry(fmt, &formats, lh) {
151                 if (!fmt->load_shlib)
152                         continue;
153                 if (!try_module_get(fmt->module))
154                         continue;
155                 read_unlock(&binfmt_lock);
156                 error = fmt->load_shlib(file);
157                 read_lock(&binfmt_lock);
158                 put_binfmt(fmt);
159                 if (error != -ENOEXEC)
160                         break;
161         }
162         read_unlock(&binfmt_lock);
163 exit:
164         fput(file);
165 out:
166         return error;
167 }
168 #endif /* #ifdef CONFIG_USELIB */
169 
170 #ifdef CONFIG_MMU
171 /*
172  * The nascent bprm->mm is not visible until exec_mmap() but it can
173  * use a lot of memory, account these pages in current->mm temporary
174  * for oom_badness()->get_mm_rss(). Once exec succeeds or fails, we
175  * change the counter back via acct_arg_size(0).
176  */
177 static void acct_arg_size(struct linux_binprm *bprm, unsigned long pages)
178 {
179         struct mm_struct *mm = current->mm;
180         long diff = (long)(pages - bprm->vma_pages);
181 
182         if (!mm || !diff)
183                 return;
184 
185         bprm->vma_pages = pages;
186         add_mm_counter(mm, MM_ANONPAGES, diff);
187 }
188 
189 static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
190                 int write)
191 {
192         struct page *page;
193         int ret;
194 
195 #ifdef CONFIG_STACK_GROWSUP
196         if (write) {
197                 ret = expand_downwards(bprm->vma, pos);
198                 if (ret < 0)
199                         return NULL;
200         }
201 #endif
202         /*
203          * We are doing an exec().  'current' is the process
204          * doing the exec and bprm->mm is the new process's mm.
205          */
206         ret = get_user_pages_remote(current, bprm->mm, pos, 1, write,
207                         1, &page, NULL);
208         if (ret <= 0)
209                 return NULL;
210 
211         if (write) {
212                 unsigned long size = bprm->vma->vm_end - bprm->vma->vm_start;
213                 struct rlimit *rlim;
214 
215                 acct_arg_size(bprm, size / PAGE_SIZE);
216 
217                 /*
218                  * We've historically supported up to 32 pages (ARG_MAX)
219                  * of argument strings even with small stacks
220                  */
221                 if (size <= ARG_MAX)
222                         return page;
223 
224                 /*
225                  * Limit to 1/4-th the stack size for the argv+env strings.
226                  * This ensures that:
227                  *  - the remaining binfmt code will not run out of stack space,
228                  *  - the program will have a reasonable amount of stack left
229                  *    to work from.
230                  */
231                 rlim = current->signal->rlim;
232                 if (size > ACCESS_ONCE(rlim[RLIMIT_STACK].rlim_cur) / 4) {
233                         put_page(page);
234                         return NULL;
235                 }
236         }
237 
238         return page;
239 }
240 
241 static void put_arg_page(struct page *page)
242 {
243         put_page(page);
244 }
245 
246 static void free_arg_page(struct linux_binprm *bprm, int i)
247 {
248 }
249 
250 static void free_arg_pages(struct linux_binprm *bprm)
251 {
252 }
253 
254 static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,
255                 struct page *page)
256 {
257         flush_cache_page(bprm->vma, pos, page_to_pfn(page));
258 }
259 
260 static int __bprm_mm_init(struct linux_binprm *bprm)
261 {
262         int err;
263         struct vm_area_struct *vma = NULL;
264         struct mm_struct *mm = bprm->mm;
265 
266         bprm->vma = vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
267         if (!vma)
268                 return -ENOMEM;
269 
270         down_write(&mm->mmap_sem);
271         vma->vm_mm = mm;
272 
273         /*
274          * Place the stack at the largest stack address the architecture
275          * supports. Later, we'll move this to an appropriate place. We don't
276          * use STACK_TOP because that can depend on attributes which aren't
277          * configured yet.
278          */
279         BUILD_BUG_ON(VM_STACK_FLAGS & VM_STACK_INCOMPLETE_SETUP);
280         vma->vm_end = STACK_TOP_MAX;
281         vma->vm_start = vma->vm_end - PAGE_SIZE;
282         vma->vm_flags = VM_SOFTDIRTY | VM_STACK_FLAGS | VM_STACK_INCOMPLETE_SETUP;
283         vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
284         INIT_LIST_HEAD(&vma->anon_vma_chain);
285 
286         err = insert_vm_struct(mm, vma);
287         if (err)
288                 goto err;
289 
290         mm->stack_vm = mm->total_vm = 1;
291         arch_bprm_mm_init(mm, vma);
292         up_write(&mm->mmap_sem);
293         bprm->p = vma->vm_end - sizeof(void *);
294         return 0;
295 err:
296         up_write(&mm->mmap_sem);
297         bprm->vma = NULL;
298         kmem_cache_free(vm_area_cachep, vma);
299         return err;
300 }
301 
302 static bool valid_arg_len(struct linux_binprm *bprm, long len)
303 {
304         return len <= MAX_ARG_STRLEN;
305 }
306 
307 #else
308 
309 static inline void acct_arg_size(struct linux_binprm *bprm, unsigned long pages)
310 {
311 }
312 
313 static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
314                 int write)
315 {
316         struct page *page;
317 
318         page = bprm->page[pos / PAGE_SIZE];
319         if (!page && write) {
320                 page = alloc_page(GFP_HIGHUSER|__GFP_ZERO);
321                 if (!page)
322                         return NULL;
323                 bprm->page[pos / PAGE_SIZE] = page;
324         }
325 
326         return page;
327 }
328 
329 static void put_arg_page(struct page *page)
330 {
331 }
332 
333 static void free_arg_page(struct linux_binprm *bprm, int i)
334 {
335         if (bprm->page[i]) {
336                 __free_page(bprm->page[i]);
337                 bprm->page[i] = NULL;
338         }
339 }
340 
341 static void free_arg_pages(struct linux_binprm *bprm)
342 {
343         int i;
344 
345         for (i = 0; i < MAX_ARG_PAGES; i++)
346                 free_arg_page(bprm, i);
347 }
348 
349 static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,
350                 struct page *page)
351 {
352 }
353 
354 static int __bprm_mm_init(struct linux_binprm *bprm)
355 {
356         bprm->p = PAGE_SIZE * MAX_ARG_PAGES - sizeof(void *);
357         return 0;
358 }
359 
360 static bool valid_arg_len(struct linux_binprm *bprm, long len)
361 {
362         return len <= bprm->p;
363 }
364 
365 #endif /* CONFIG_MMU */
366 
367 /*
368  * Create a new mm_struct and populate it with a temporary stack
369  * vm_area_struct.  We don't have enough context at this point to set the stack
370  * flags, permissions, and offset, so we use temporary values.  We'll update
371  * them later in setup_arg_pages().
372  */
373 static int bprm_mm_init(struct linux_binprm *bprm)
374 {
375         int err;
376         struct mm_struct *mm = NULL;
377 
378         bprm->mm = mm = mm_alloc();
379         err = -ENOMEM;
380         if (!mm)
381                 goto err;
382 
383         err = __bprm_mm_init(bprm);
384         if (err)
385                 goto err;
386 
387         return 0;
388 
389 err:
390         if (mm) {
391                 bprm->mm = NULL;
392                 mmdrop(mm);
393         }
394 
395         return err;
396 }
397 
398 struct user_arg_ptr {
399 #ifdef CONFIG_COMPAT
400         bool is_compat;
401 #endif
402         union {
403                 const char __user *const __user *native;
404 #ifdef CONFIG_COMPAT
405                 const compat_uptr_t __user *compat;
406 #endif
407         } ptr;
408 };
409 
410 static const char __user *get_user_arg_ptr(struct user_arg_ptr argv, int nr)
411 {
412         const char __user *native;
413 
414 #ifdef CONFIG_COMPAT
415         if (unlikely(argv.is_compat)) {
416                 compat_uptr_t compat;
417 
418                 if (get_user(compat, argv.ptr.compat + nr))
419                         return ERR_PTR(-EFAULT);
420 
421                 return compat_ptr(compat);
422         }
423 #endif
424 
425         if (get_user(native, argv.ptr.native + nr))
426                 return ERR_PTR(-EFAULT);
427 
428         return native;
429 }
430 
431 /*
432  * count() counts the number of strings in array ARGV.
433  */
434 static int count(struct user_arg_ptr argv, int max)
435 {
436         int i = 0;
437 
438         if (argv.ptr.native != NULL) {
439                 for (;;) {
440                         const char __user *p = get_user_arg_ptr(argv, i);
441 
442                         if (!p)
443                                 break;
444 
445                         if (IS_ERR(p))
446                                 return -EFAULT;
447 
448                         if (i >= max)
449                                 return -E2BIG;
450                         ++i;
451 
452                         if (fatal_signal_pending(current))
453                                 return -ERESTARTNOHAND;
454                         cond_resched();
455                 }
456         }
457         return i;
458 }
459 
460 /*
461  * 'copy_strings()' copies argument/environment strings from the old
462  * processes's memory to the new process's stack.  The call to get_user_pages()
463  * ensures the destination page is created and not swapped out.
464  */
465 static int copy_strings(int argc, struct user_arg_ptr argv,
466                         struct linux_binprm *bprm)
467 {
468         struct page *kmapped_page = NULL;
469         char *kaddr = NULL;
470         unsigned long kpos = 0;
471         int ret;
472 
473         while (argc-- > 0) {
474                 const char __user *str;
475                 int len;
476                 unsigned long pos;
477 
478                 ret = -EFAULT;
479                 str = get_user_arg_ptr(argv, argc);
480                 if (IS_ERR(str))
481                         goto out;
482 
483                 len = strnlen_user(str, MAX_ARG_STRLEN);
484                 if (!len)
485                         goto out;
486 
487                 ret = -E2BIG;
488                 if (!valid_arg_len(bprm, len))
489                         goto out;
490 
491                 /* We're going to work our way backwords. */
492                 pos = bprm->p;
493                 str += len;
494                 bprm->p -= len;
495 
496                 while (len > 0) {
497                         int offset, bytes_to_copy;
498 
499                         if (fatal_signal_pending(current)) {
500                                 ret = -ERESTARTNOHAND;
501                                 goto out;
502                         }
503                         cond_resched();
504 
505                         offset = pos % PAGE_SIZE;
506                         if (offset == 0)
507                                 offset = PAGE_SIZE;
508 
509                         bytes_to_copy = offset;
510                         if (bytes_to_copy > len)
511                                 bytes_to_copy = len;
512 
513                         offset -= bytes_to_copy;
514                         pos -= bytes_to_copy;
515                         str -= bytes_to_copy;
516                         len -= bytes_to_copy;
517 
518                         if (!kmapped_page || kpos != (pos & PAGE_MASK)) {
519                                 struct page *page;
520 
521                                 page = get_arg_page(bprm, pos, 1);
522                                 if (!page) {
523                                         ret = -E2BIG;
524                                         goto out;
525                                 }
526 
527                                 if (kmapped_page) {
528                                         flush_kernel_dcache_page(kmapped_page);
529                                         kunmap(kmapped_page);
530                                         put_arg_page(kmapped_page);
531                                 }
532                                 kmapped_page = page;
533                                 kaddr = kmap(kmapped_page);
534                                 kpos = pos & PAGE_MASK;
535                                 flush_arg_page(bprm, kpos, kmapped_page);
536                         }
537                         if (copy_from_user(kaddr+offset, str, bytes_to_copy)) {
538                                 ret = -EFAULT;
539                                 goto out;
540                         }
541                 }
542         }
543         ret = 0;
544 out:
545         if (kmapped_page) {
546                 flush_kernel_dcache_page(kmapped_page);
547                 kunmap(kmapped_page);
548                 put_arg_page(kmapped_page);
549         }
550         return ret;
551 }
552 
553 /*
554  * Like copy_strings, but get argv and its values from kernel memory.
555  */
556 int copy_strings_kernel(int argc, const char *const *__argv,
557                         struct linux_binprm *bprm)
558 {
559         int r;
560         mm_segment_t oldfs = get_fs();
561         struct user_arg_ptr argv = {
562                 .ptr.native = (const char __user *const  __user *)__argv,
563         };
564 
565         set_fs(KERNEL_DS);
566         r = copy_strings(argc, argv, bprm);
567         set_fs(oldfs);
568 
569         return r;
570 }
571 EXPORT_SYMBOL(copy_strings_kernel);
572 
573 #ifdef CONFIG_MMU
574 
575 /*
576  * During bprm_mm_init(), we create a temporary stack at STACK_TOP_MAX.  Once
577  * the binfmt code determines where the new stack should reside, we shift it to
578  * its final location.  The process proceeds as follows:
579  *
580  * 1) Use shift to calculate the new vma endpoints.
581  * 2) Extend vma to cover both the old and new ranges.  This ensures the
582  *    arguments passed to subsequent functions are consistent.
583  * 3) Move vma's page tables to the new range.
584  * 4) Free up any cleared pgd range.
585  * 5) Shrink the vma to cover only the new range.
586  */
587 static int shift_arg_pages(struct vm_area_struct *vma, unsigned long shift)
588 {
589         struct mm_struct *mm = vma->vm_mm;
590         unsigned long old_start = vma->vm_start;
591         unsigned long old_end = vma->vm_end;
592         unsigned long length = old_end - old_start;
593         unsigned long new_start = old_start - shift;
594         unsigned long new_end = old_end - shift;
595         struct mmu_gather tlb;
596 
597         BUG_ON(new_start > new_end);
598 
599         /*
600          * ensure there are no vmas between where we want to go
601          * and where we are
602          */
603         if (vma != find_vma(mm, new_start))
604                 return -EFAULT;
605 
606         /*
607          * cover the whole range: [new_start, old_end)
608          */
609         if (vma_adjust(vma, new_start, old_end, vma->vm_pgoff, NULL))
610                 return -ENOMEM;
611 
612         /*
613          * move the page tables downwards, on failure we rely on
614          * process cleanup to remove whatever mess we made.
615          */
616         if (length != move_page_tables(vma, old_start,
617                                        vma, new_start, length, false))
618                 return -ENOMEM;
619 
620         lru_add_drain();
621         tlb_gather_mmu(&tlb, mm, old_start, old_end);
622         if (new_end > old_start) {
623                 /*
624                  * when the old and new regions overlap clear from new_end.
625                  */
626                 free_pgd_range(&tlb, new_end, old_end, new_end,
627                         vma->vm_next ? vma->vm_next->vm_start : USER_PGTABLES_CEILING);
628         } else {
629                 /*
630                  * otherwise, clean from old_start; this is done to not touch
631                  * the address space in [new_end, old_start) some architectures
632                  * have constraints on va-space that make this illegal (IA64) -
633                  * for the others its just a little faster.
634                  */
635                 free_pgd_range(&tlb, old_start, old_end, new_end,
636                         vma->vm_next ? vma->vm_next->vm_start : USER_PGTABLES_CEILING);
637         }
638         tlb_finish_mmu(&tlb, old_start, old_end);
639 
640         /*
641          * Shrink the vma to just the new range.  Always succeeds.
642          */
643         vma_adjust(vma, new_start, new_end, vma->vm_pgoff, NULL);
644 
645         return 0;
646 }
647 
648 /*
649  * Finalizes the stack vm_area_struct. The flags and permissions are updated,
650  * the stack is optionally relocated, and some extra space is added.
651  */
652 int setup_arg_pages(struct linux_binprm *bprm,
653                     unsigned long stack_top,
654                     int executable_stack)
655 {
656         unsigned long ret;
657         unsigned long stack_shift;
658         struct mm_struct *mm = current->mm;
659         struct vm_area_struct *vma = bprm->vma;
660         struct vm_area_struct *prev = NULL;
661         unsigned long vm_flags;
662         unsigned long stack_base;
663         unsigned long stack_size;
664         unsigned long stack_expand;
665         unsigned long rlim_stack;
666 
667 #ifdef CONFIG_STACK_GROWSUP
668         /* Limit stack size */
669         stack_base = rlimit_max(RLIMIT_STACK);
670         if (stack_base > STACK_SIZE_MAX)
671                 stack_base = STACK_SIZE_MAX;
672 
673         /* Add space for stack randomization. */
674         stack_base += (STACK_RND_MASK << PAGE_SHIFT);
675 
676         /* Make sure we didn't let the argument array grow too large. */
677         if (vma->vm_end - vma->vm_start > stack_base)
678                 return -ENOMEM;
679 
680         stack_base = PAGE_ALIGN(stack_top - stack_base);
681 
682         stack_shift = vma->vm_start - stack_base;
683         mm->arg_start = bprm->p - stack_shift;
684         bprm->p = vma->vm_end - stack_shift;
685 #else
686         stack_top = arch_align_stack(stack_top);
687         stack_top = PAGE_ALIGN(stack_top);
688 
689         if (unlikely(stack_top < mmap_min_addr) ||
690             unlikely(vma->vm_end - vma->vm_start >= stack_top - mmap_min_addr))
691                 return -ENOMEM;
692 
693         stack_shift = vma->vm_end - stack_top;
694 
695         bprm->p -= stack_shift;
696         mm->arg_start = bprm->p;
697 #endif
698 
699         if (bprm->loader)
700                 bprm->loader -= stack_shift;
701         bprm->exec -= stack_shift;
702 
703         down_write(&mm->mmap_sem);
704         vm_flags = VM_STACK_FLAGS;
705 
706         /*
707          * Adjust stack execute permissions; explicitly enable for
708          * EXSTACK_ENABLE_X, disable for EXSTACK_DISABLE_X and leave alone
709          * (arch default) otherwise.
710          */
711         if (unlikely(executable_stack == EXSTACK_ENABLE_X))
712                 vm_flags |= VM_EXEC;
713         else if (executable_stack == EXSTACK_DISABLE_X)
714                 vm_flags &= ~VM_EXEC;
715         vm_flags |= mm->def_flags;
716         vm_flags |= VM_STACK_INCOMPLETE_SETUP;
717 
718         ret = mprotect_fixup(vma, &prev, vma->vm_start, vma->vm_end,
719                         vm_flags);
720         if (ret)
721                 goto out_unlock;
722         BUG_ON(prev != vma);
723 
724         /* Move stack pages down in memory. */
725         if (stack_shift) {
726                 ret = shift_arg_pages(vma, stack_shift);
727                 if (ret)
728                         goto out_unlock;
729         }
730 
731         /* mprotect_fixup is overkill to remove the temporary stack flags */
732         vma->vm_flags &= ~VM_STACK_INCOMPLETE_SETUP;
733 
734         stack_expand = 131072UL; /* randomly 32*4k (or 2*64k) pages */
735         stack_size = vma->vm_end - vma->vm_start;
736         /*
737          * Align this down to a page boundary as expand_stack
738          * will align it up.
739          */
740         rlim_stack = rlimit(RLIMIT_STACK) & PAGE_MASK;
741 #ifdef CONFIG_STACK_GROWSUP
742         if (stack_size + stack_expand > rlim_stack)
743                 stack_base = vma->vm_start + rlim_stack;
744         else
745                 stack_base = vma->vm_end + stack_expand;
746 #else
747         if (stack_size + stack_expand > rlim_stack)
748                 stack_base = vma->vm_end - rlim_stack;
749         else
750                 stack_base = vma->vm_start - stack_expand;
751 #endif
752         current->mm->start_stack = bprm->p;
753         ret = expand_stack(vma, stack_base);
754         if (ret)
755                 ret = -EFAULT;
756 
757 out_unlock:
758         up_write(&mm->mmap_sem);
759         return ret;
760 }
761 EXPORT_SYMBOL(setup_arg_pages);
762 
763 #endif /* CONFIG_MMU */
764 
765 static struct file *do_open_execat(int fd, struct filename *name, int flags)
766 {
767         struct file *file;
768         int err;
769         struct open_flags open_exec_flags = {
770                 .open_flag = O_LARGEFILE | O_RDONLY | __FMODE_EXEC,
771                 .acc_mode = MAY_EXEC,
772                 .intent = LOOKUP_OPEN,
773                 .lookup_flags = LOOKUP_FOLLOW,
774         };
775 
776         if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_EMPTY_PATH)) != 0)
777                 return ERR_PTR(-EINVAL);
778         if (flags & AT_SYMLINK_NOFOLLOW)
779                 open_exec_flags.lookup_flags &= ~LOOKUP_FOLLOW;
780         if (flags & AT_EMPTY_PATH)
781                 open_exec_flags.lookup_flags |= LOOKUP_EMPTY;
782 
783         file = do_filp_open(fd, name, &open_exec_flags);
784         if (IS_ERR(file))
785                 goto out;
786 
787         err = -EACCES;
788         if (!S_ISREG(file_inode(file)->i_mode))
789                 goto exit;
790 
791         if (path_noexec(&file->f_path))
792                 goto exit;
793 
794         err = deny_write_access(file);
795         if (err)
796                 goto exit;
797 
798         if (name->name[0] != '\0')
799                 fsnotify_open(file);
800 
801 out:
802         return file;
803 
804 exit:
805         fput(file);
806         return ERR_PTR(err);
807 }
808 
809 struct file *open_exec(const char *name)
810 {
811         struct filename *filename = getname_kernel(name);
812         struct file *f = ERR_CAST(filename);
813 
814         if (!IS_ERR(filename)) {
815                 f = do_open_execat(AT_FDCWD, filename, 0);
816                 putname(filename);
817         }
818         return f;
819 }
820 EXPORT_SYMBOL(open_exec);
821 
822 int kernel_read(struct file *file, loff_t offset,
823                 char *addr, unsigned long count)
824 {
825         mm_segment_t old_fs;
826         loff_t pos = offset;
827         int result;
828 
829         old_fs = get_fs();
830         set_fs(get_ds());
831         /* The cast to a user pointer is valid due to the set_fs() */
832         result = vfs_read(file, (void __user *)addr, count, &pos);
833         set_fs(old_fs);
834         return result;
835 }
836 
837 EXPORT_SYMBOL(kernel_read);
838 
839 int kernel_read_file(struct file *file, void **buf, loff_t *size,
840                      loff_t max_size, enum kernel_read_file_id id)
841 {
842         loff_t i_size, pos;
843         ssize_t bytes = 0;
844         int ret;
845 
846         if (!S_ISREG(file_inode(file)->i_mode) || max_size < 0)
847                 return -EINVAL;
848 
849         ret = security_kernel_read_file(file, id);
850         if (ret)
851                 return ret;
852 
853         i_size = i_size_read(file_inode(file));
854         if (max_size > 0 && i_size > max_size)
855                 return -EFBIG;
856         if (i_size <= 0)
857                 return -EINVAL;
858 
859         *buf = vmalloc(i_size);
860         if (!*buf)
861                 return -ENOMEM;
862 
863         pos = 0;
864         while (pos < i_size) {
865                 bytes = kernel_read(file, pos, (char *)(*buf) + pos,
866                                     i_size - pos);
867                 if (bytes < 0) {
868                         ret = bytes;
869                         goto out;
870                 }
871 
872                 if (bytes == 0)
873                         break;
874                 pos += bytes;
875         }
876 
877         if (pos != i_size) {
878                 ret = -EIO;
879                 goto out;
880         }
881 
882         ret = security_kernel_post_read_file(file, *buf, i_size, id);
883         if (!ret)
884                 *size = pos;
885 
886 out:
887         if (ret < 0) {
888                 vfree(*buf);
889                 *buf = NULL;
890         }
891         return ret;
892 }
893 EXPORT_SYMBOL_GPL(kernel_read_file);
894 
895 int kernel_read_file_from_path(char *path, void **buf, loff_t *size,
896                                loff_t max_size, enum kernel_read_file_id id)
897 {
898         struct file *file;
899         int ret;
900 
901         if (!path || !*path)
902                 return -EINVAL;
903 
904         file = filp_open(path, O_RDONLY, 0);
905         if (IS_ERR(file))
906                 return PTR_ERR(file);
907 
908         ret = kernel_read_file(file, buf, size, max_size, id);
909         fput(file);
910         return ret;
911 }
912 EXPORT_SYMBOL_GPL(kernel_read_file_from_path);
913 
914 int kernel_read_file_from_fd(int fd, void **buf, loff_t *size, loff_t max_size,
915                              enum kernel_read_file_id id)
916 {
917         struct fd f = fdget(fd);
918         int ret = -EBADF;
919 
920         if (!f.file)
921                 goto out;
922 
923         ret = kernel_read_file(f.file, buf, size, max_size, id);
924 out:
925         fdput(f);
926         return ret;
927 }
928 EXPORT_SYMBOL_GPL(kernel_read_file_from_fd);
929 
930 ssize_t read_code(struct file *file, unsigned long addr, loff_t pos, size_t len)
931 {
932         ssize_t res = vfs_read(file, (void __user *)addr, len, &pos);
933         if (res > 0)
934                 flush_icache_range(addr, addr + len);
935         return res;
936 }
937 EXPORT_SYMBOL(read_code);
938 
939 static int exec_mmap(struct mm_struct *mm)
940 {
941         struct task_struct *tsk;
942         struct mm_struct *old_mm, *active_mm;
943 
944         /* Notify parent that we're no longer interested in the old VM */
945         tsk = current;
946         old_mm = current->mm;
947         mm_release(tsk, old_mm);
948 
949         if (old_mm) {
950                 sync_mm_rss(old_mm);
951                 /*
952                  * Make sure that if there is a core dump in progress
953                  * for the old mm, we get out and die instead of going
954                  * through with the exec.  We must hold mmap_sem around
955                  * checking core_state and changing tsk->mm.
956                  */
957                 down_read(&old_mm->mmap_sem);
958                 if (unlikely(old_mm->core_state)) {
959                         up_read(&old_mm->mmap_sem);
960                         return -EINTR;
961                 }
962         }
963         task_lock(tsk);
964         active_mm = tsk->active_mm;
965         tsk->mm = mm;
966         tsk->active_mm = mm;
967         activate_mm(active_mm, mm);
968         tsk->mm->vmacache_seqnum = 0;
969         vmacache_flush(tsk);
970         task_unlock(tsk);
971         if (old_mm) {
972                 up_read(&old_mm->mmap_sem);
973                 BUG_ON(active_mm != old_mm);
974                 setmax_mm_hiwater_rss(&tsk->signal->maxrss, old_mm);
975                 mm_update_next_owner(old_mm);
976                 mmput(old_mm);
977                 return 0;
978         }
979         mmdrop(active_mm);
980         return 0;
981 }
982 
983 /*
984  * This function makes sure the current process has its own signal table,
985  * so that flush_signal_handlers can later reset the handlers without
986  * disturbing other processes.  (Other processes might share the signal
987  * table via the CLONE_SIGHAND option to clone().)
988  */
989 static int de_thread(struct task_struct *tsk)
990 {
991         struct signal_struct *sig = tsk->signal;
992         struct sighand_struct *oldsighand = tsk->sighand;
993         spinlock_t *lock = &oldsighand->siglock;
994 
995         if (thread_group_empty(tsk))
996                 goto no_thread_group;
997 
998         /*
999          * Kill all other threads in the thread group.
1000          */
1001         spin_lock_irq(lock);
1002         if (signal_group_exit(sig)) {
1003                 /*
1004                  * Another group action in progress, just
1005                  * return so that the signal is processed.
1006                  */
1007                 spin_unlock_irq(lock);
1008                 return -EAGAIN;
1009         }
1010 
1011         sig->group_exit_task = tsk;
1012         sig->notify_count = zap_other_threads(tsk);
1013         if (!thread_group_leader(tsk))
1014                 sig->notify_count--;
1015 
1016         while (sig->notify_count) {
1017                 __set_current_state(TASK_KILLABLE);
1018                 spin_unlock_irq(lock);
1019                 schedule();
1020                 if (unlikely(__fatal_signal_pending(tsk)))
1021                         goto killed;
1022                 spin_lock_irq(lock);
1023         }
1024         spin_unlock_irq(lock);
1025 
1026         /*
1027          * At this point all other threads have exited, all we have to
1028          * do is to wait for the thread group leader to become inactive,
1029          * and to assume its PID:
1030          */
1031         if (!thread_group_leader(tsk)) {
1032                 struct task_struct *leader = tsk->group_leader;
1033 
1034                 for (;;) {
1035                         threadgroup_change_begin(tsk);
1036                         write_lock_irq(&tasklist_lock);
1037                         /*
1038                          * Do this under tasklist_lock to ensure that
1039                          * exit_notify() can't miss ->group_exit_task
1040                          */
1041                         sig->notify_count = -1;
1042                         if (likely(leader->exit_state))
1043                                 break;
1044                         __set_current_state(TASK_KILLABLE);
1045                         write_unlock_irq(&tasklist_lock);
1046                         threadgroup_change_end(tsk);
1047                         schedule();
1048                         if (unlikely(__fatal_signal_pending(tsk)))
1049                                 goto killed;
1050                 }
1051 
1052                 /*
1053                  * The only record we have of the real-time age of a
1054                  * process, regardless of execs it's done, is start_time.
1055                  * All the past CPU time is accumulated in signal_struct
1056                  * from sister threads now dead.  But in this non-leader
1057                  * exec, nothing survives from the original leader thread,
1058                  * whose birth marks the true age of this process now.
1059                  * When we take on its identity by switching to its PID, we
1060                  * also take its birthdate (always earlier than our own).
1061                  */
1062                 tsk->start_time = leader->start_time;
1063                 tsk->real_start_time = leader->real_start_time;
1064 
1065                 BUG_ON(!same_thread_group(leader, tsk));
1066                 BUG_ON(has_group_leader_pid(tsk));
1067                 /*
1068                  * An exec() starts a new thread group with the
1069                  * TGID of the previous thread group. Rehash the
1070                  * two threads with a switched PID, and release
1071                  * the former thread group leader:
1072                  */
1073 
1074                 /* Become a process group leader with the old leader's pid.
1075                  * The old leader becomes a thread of the this thread group.
1076                  * Note: The old leader also uses this pid until release_task
1077                  *       is called.  Odd but simple and correct.
1078                  */
1079                 tsk->pid = leader->pid;
1080                 change_pid(tsk, PIDTYPE_PID, task_pid(leader));
1081                 transfer_pid(leader, tsk, PIDTYPE_PGID);
1082                 transfer_pid(leader, tsk, PIDTYPE_SID);
1083 
1084                 list_replace_rcu(&leader->tasks, &tsk->tasks);
1085                 list_replace_init(&leader->sibling, &tsk->sibling);
1086 
1087                 tsk->group_leader = tsk;
1088                 leader->group_leader = tsk;
1089 
1090                 tsk->exit_signal = SIGCHLD;
1091                 leader->exit_signal = -1;
1092 
1093                 BUG_ON(leader->exit_state != EXIT_ZOMBIE);
1094                 leader->exit_state = EXIT_DEAD;
1095 
1096                 /*
1097                  * We are going to release_task()->ptrace_unlink() silently,
1098                  * the tracer can sleep in do_wait(). EXIT_DEAD guarantees
1099                  * the tracer wont't block again waiting for this thread.
1100                  */
1101                 if (unlikely(leader->ptrace))
1102                         __wake_up_parent(leader, leader->parent);
1103                 write_unlock_irq(&tasklist_lock);
1104                 threadgroup_change_end(tsk);
1105 
1106                 release_task(leader);
1107         }
1108 
1109         sig->group_exit_task = NULL;
1110         sig->notify_count = 0;
1111 
1112 no_thread_group:
1113         /* we have changed execution domain */
1114         tsk->exit_signal = SIGCHLD;
1115 
1116         exit_itimers(sig);
1117         flush_itimer_signals();
1118 
1119         if (atomic_read(&oldsighand->count) != 1) {
1120                 struct sighand_struct *newsighand;
1121                 /*
1122                  * This ->sighand is shared with the CLONE_SIGHAND
1123                  * but not CLONE_THREAD task, switch to the new one.
1124                  */
1125                 newsighand = kmem_cache_alloc(sighand_cachep, GFP_KERNEL);
1126                 if (!newsighand)
1127                         return -ENOMEM;
1128 
1129                 atomic_set(&newsighand->count, 1);
1130                 memcpy(newsighand->action, oldsighand->action,
1131                        sizeof(newsighand->action));
1132 
1133                 write_lock_irq(&tasklist_lock);
1134                 spin_lock(&oldsighand->siglock);
1135                 rcu_assign_pointer(tsk->sighand, newsighand);
1136                 spin_unlock(&oldsighand->siglock);
1137                 write_unlock_irq(&tasklist_lock);
1138 
1139                 __cleanup_sighand(oldsighand);
1140         }
1141 
1142         BUG_ON(!thread_group_leader(tsk));
1143         return 0;
1144 
1145 killed:
1146         /* protects against exit_notify() and __exit_signal() */
1147         read_lock(&tasklist_lock);
1148         sig->group_exit_task = NULL;
1149         sig->notify_count = 0;
1150         read_unlock(&tasklist_lock);
1151         return -EAGAIN;
1152 }
1153 
1154 char *get_task_comm(char *buf, struct task_struct *tsk)
1155 {
1156         /* buf must be at least sizeof(tsk->comm) in size */
1157         task_lock(tsk);
1158         strncpy(buf, tsk->comm, sizeof(tsk->comm));
1159         task_unlock(tsk);
1160         return buf;
1161 }
1162 EXPORT_SYMBOL_GPL(get_task_comm);
1163 
1164 /*
1165  * These functions flushes out all traces of the currently running executable
1166  * so that a new one can be started
1167  */
1168 
1169 void __set_task_comm(struct task_struct *tsk, const char *buf, bool exec)
1170 {
1171         task_lock(tsk);
1172         trace_task_rename(tsk, buf);
1173         strlcpy(tsk->comm, buf, sizeof(tsk->comm));
1174         task_unlock(tsk);
1175         perf_event_comm(tsk, exec);
1176 }
1177 
1178 int flush_old_exec(struct linux_binprm * bprm)
1179 {
1180         int retval;
1181 
1182         /*
1183          * Make sure we have a private signal table and that
1184          * we are unassociated from the previous thread group.
1185          */
1186         retval = de_thread(current);
1187         if (retval)
1188                 goto out;
1189 
1190         /*
1191          * Must be called _before_ exec_mmap() as bprm->mm is
1192          * not visibile until then. This also enables the update
1193          * to be lockless.
1194          */
1195         set_mm_exe_file(bprm->mm, bprm->file);
1196 
1197         /*
1198          * Release all of the old mmap stuff
1199          */
1200         acct_arg_size(bprm, 0);
1201         retval = exec_mmap(bprm->mm);
1202         if (retval)
1203                 goto out;
1204 
1205         bprm->mm = NULL;                /* We're using it now */
1206 
1207         set_fs(USER_DS);
1208         current->flags &= ~(PF_RANDOMIZE | PF_FORKNOEXEC | PF_KTHREAD |
1209                                         PF_NOFREEZE | PF_NO_SETAFFINITY);
1210         flush_thread();
1211         current->personality &= ~bprm->per_clear;
1212 
1213         return 0;
1214 
1215 out:
1216         return retval;
1217 }
1218 EXPORT_SYMBOL(flush_old_exec);
1219 
1220 void would_dump(struct linux_binprm *bprm, struct file *file)
1221 {
1222         if (inode_permission(file_inode(file), MAY_READ) < 0)
1223                 bprm->interp_flags |= BINPRM_FLAGS_ENFORCE_NONDUMP;
1224 }
1225 EXPORT_SYMBOL(would_dump);
1226 
1227 void setup_new_exec(struct linux_binprm * bprm)
1228 {
1229         arch_pick_mmap_layout(current->mm);
1230 
1231         /* This is the point of no return */
1232         current->sas_ss_sp = current->sas_ss_size = 0;
1233 
1234         if (uid_eq(current_euid(), current_uid()) && gid_eq(current_egid(), current_gid()))
1235                 set_dumpable(current->mm, SUID_DUMP_USER);
1236         else
1237                 set_dumpable(current->mm, suid_dumpable);
1238 
1239         perf_event_exec();
1240         __set_task_comm(current, kbasename(bprm->filename), true);
1241 
1242         /* Set the new mm task size. We have to do that late because it may
1243          * depend on TIF_32BIT which is only updated in flush_thread() on
1244          * some architectures like powerpc
1245          */
1246         current->mm->task_size = TASK_SIZE;
1247 
1248         /* install the new credentials */
1249         if (!uid_eq(bprm->cred->uid, current_euid()) ||
1250             !gid_eq(bprm->cred->gid, current_egid())) {
1251                 current->pdeath_signal = 0;
1252         } else {
1253                 would_dump(bprm, bprm->file);
1254                 if (bprm->interp_flags & BINPRM_FLAGS_ENFORCE_NONDUMP)
1255                         set_dumpable(current->mm, suid_dumpable);
1256         }
1257 
1258         /* An exec changes our domain. We are no longer part of the thread
1259            group */
1260         current->self_exec_id++;
1261         flush_signal_handlers(current, 0);
1262         do_close_on_exec(current->files);
1263 }
1264 EXPORT_SYMBOL(setup_new_exec);
1265 
1266 /*
1267  * Prepare credentials and lock ->cred_guard_mutex.
1268  * install_exec_creds() commits the new creds and drops the lock.
1269  * Or, if exec fails before, free_bprm() should release ->cred and
1270  * and unlock.
1271  */
1272 int prepare_bprm_creds(struct linux_binprm *bprm)
1273 {
1274         if (mutex_lock_interruptible(&current->signal->cred_guard_mutex))
1275                 return -ERESTARTNOINTR;
1276 
1277         bprm->cred = prepare_exec_creds();
1278         if (likely(bprm->cred))
1279                 return 0;
1280 
1281         mutex_unlock(&current->signal->cred_guard_mutex);
1282         return -ENOMEM;
1283 }
1284 
1285 static void free_bprm(struct linux_binprm *bprm)
1286 {
1287         free_arg_pages(bprm);
1288         if (bprm->cred) {
1289                 mutex_unlock(&current->signal->cred_guard_mutex);
1290                 abort_creds(bprm->cred);
1291         }
1292         if (bprm->file) {
1293                 allow_write_access(bprm->file);
1294                 fput(bprm->file);
1295         }
1296         /* If a binfmt changed the interp, free it. */
1297         if (bprm->interp != bprm->filename)
1298                 kfree(bprm->interp);
1299         kfree(bprm);
1300 }
1301 
1302 int bprm_change_interp(char *interp, struct linux_binprm *bprm)
1303 {
1304         /* If a binfmt changed the interp, free it first. */
1305         if (bprm->interp != bprm->filename)
1306                 kfree(bprm->interp);
1307         bprm->interp = kstrdup(interp, GFP_KERNEL);
1308         if (!bprm->interp)
1309                 return -ENOMEM;
1310         return 0;
1311 }
1312 EXPORT_SYMBOL(bprm_change_interp);
1313 
1314 /*
1315  * install the new credentials for this executable
1316  */
1317 void install_exec_creds(struct linux_binprm *bprm)
1318 {
1319         security_bprm_committing_creds(bprm);
1320 
1321         commit_creds(bprm->cred);
1322         bprm->cred = NULL;
1323 
1324         /*
1325          * Disable monitoring for regular users
1326          * when executing setuid binaries. Must
1327          * wait until new credentials are committed
1328          * by commit_creds() above
1329          */
1330         if (get_dumpable(current->mm) != SUID_DUMP_USER)
1331                 perf_event_exit_task(current);
1332         /*
1333          * cred_guard_mutex must be held at least to this point to prevent
1334          * ptrace_attach() from altering our determination of the task's
1335          * credentials; any time after this it may be unlocked.
1336          */
1337         security_bprm_committed_creds(bprm);
1338         mutex_unlock(&current->signal->cred_guard_mutex);
1339 }
1340 EXPORT_SYMBOL(install_exec_creds);
1341 
1342 /*
1343  * determine how safe it is to execute the proposed program
1344  * - the caller must hold ->cred_guard_mutex to protect against
1345  *   PTRACE_ATTACH or seccomp thread-sync
1346  */
1347 static void check_unsafe_exec(struct linux_binprm *bprm)
1348 {
1349         struct task_struct *p = current, *t;
1350         unsigned n_fs;
1351 
1352         if (p->ptrace) {
1353                 if (p->ptrace & PT_PTRACE_CAP)
1354                         bprm->unsafe |= LSM_UNSAFE_PTRACE_CAP;
1355                 else
1356                         bprm->unsafe |= LSM_UNSAFE_PTRACE;
1357         }
1358 
1359         /*
1360          * This isn't strictly necessary, but it makes it harder for LSMs to
1361          * mess up.
1362          */
1363         if (task_no_new_privs(current))
1364                 bprm->unsafe |= LSM_UNSAFE_NO_NEW_PRIVS;
1365 
1366         t = p;
1367         n_fs = 1;
1368         spin_lock(&p->fs->lock);
1369         rcu_read_lock();
1370         while_each_thread(p, t) {
1371                 if (t->fs == p->fs)
1372                         n_fs++;
1373         }
1374         rcu_read_unlock();
1375 
1376         if (p->fs->users > n_fs)
1377                 bprm->unsafe |= LSM_UNSAFE_SHARE;
1378         else
1379                 p->fs->in_exec = 1;
1380         spin_unlock(&p->fs->lock);
1381 }
1382 
1383 static void bprm_fill_uid(struct linux_binprm *bprm)
1384 {
1385         struct inode *inode;
1386         unsigned int mode;
1387         kuid_t uid;
1388         kgid_t gid;
1389 
1390         /* clear any previous set[ug]id data from a previous binary */
1391         bprm->cred->euid = current_euid();
1392         bprm->cred->egid = current_egid();
1393 
1394         if (bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID)
1395                 return;
1396 
1397         if (task_no_new_privs(current))
1398                 return;
1399 
1400         inode = file_inode(bprm->file);
1401         mode = READ_ONCE(inode->i_mode);
1402         if (!(mode & (S_ISUID|S_ISGID)))
1403                 return;
1404 
1405         /* Be careful if suid/sgid is set */
1406         inode_lock(inode);
1407 
1408         /* reload atomically mode/uid/gid now that lock held */
1409         mode = inode->i_mode;
1410         uid = inode->i_uid;
1411         gid = inode->i_gid;
1412         inode_unlock(inode);
1413 
1414         /* We ignore suid/sgid if there are no mappings for them in the ns */
1415         if (!kuid_has_mapping(bprm->cred->user_ns, uid) ||
1416                  !kgid_has_mapping(bprm->cred->user_ns, gid))
1417                 return;
1418 
1419         if (mode & S_ISUID) {
1420                 bprm->per_clear |= PER_CLEAR_ON_SETID;
1421                 bprm->cred->euid = uid;
1422         }
1423 
1424         if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {
1425                 bprm->per_clear |= PER_CLEAR_ON_SETID;
1426                 bprm->cred->egid = gid;
1427         }
1428 }
1429 
1430 /*
1431  * Fill the binprm structure from the inode.
1432  * Check permissions, then read the first 128 (BINPRM_BUF_SIZE) bytes
1433  *
1434  * This may be called multiple times for binary chains (scripts for example).
1435  */
1436 int prepare_binprm(struct linux_binprm *bprm)
1437 {
1438         int retval;
1439 
1440         bprm_fill_uid(bprm);
1441 
1442         /* fill in binprm security blob */
1443         retval = security_bprm_set_creds(bprm);
1444         if (retval)
1445                 return retval;
1446         bprm->cred_prepared = 1;
1447 
1448         memset(bprm->buf, 0, BINPRM_BUF_SIZE);
1449         return kernel_read(bprm->file, 0, bprm->buf, BINPRM_BUF_SIZE);
1450 }
1451 
1452 EXPORT_SYMBOL(prepare_binprm);
1453 
1454 /*
1455  * Arguments are '\0' separated strings found at the location bprm->p
1456  * points to; chop off the first by relocating brpm->p to right after
1457  * the first '\0' encountered.
1458  */
1459 int remove_arg_zero(struct linux_binprm *bprm)
1460 {
1461         int ret = 0;
1462         unsigned long offset;
1463         char *kaddr;
1464         struct page *page;
1465 
1466         if (!bprm->argc)
1467                 return 0;
1468 
1469         do {
1470                 offset = bprm->p & ~PAGE_MASK;
1471                 page = get_arg_page(bprm, bprm->p, 0);
1472                 if (!page) {
1473                         ret = -EFAULT;
1474                         goto out;
1475                 }
1476                 kaddr = kmap_atomic(page);
1477 
1478                 for (; offset < PAGE_SIZE && kaddr[offset];
1479                                 offset++, bprm->p++)
1480                         ;
1481 
1482                 kunmap_atomic(kaddr);
1483                 put_arg_page(page);
1484 
1485                 if (offset == PAGE_SIZE)
1486                         free_arg_page(bprm, (bprm->p >> PAGE_SHIFT) - 1);
1487         } while (offset == PAGE_SIZE);
1488 
1489         bprm->p++;
1490         bprm->argc--;
1491         ret = 0;
1492 
1493 out:
1494         return ret;
1495 }
1496 EXPORT_SYMBOL(remove_arg_zero);
1497 
1498 #define printable(c) (((c)=='\t') || ((c)=='\n') || (0x20<=(c) && (c)<=0x7e))
1499 /*
1500  * cycle the list of binary formats handler, until one recognizes the image
1501  */
1502 int search_binary_handler(struct linux_binprm *bprm)
1503 {
1504         bool need_retry = IS_ENABLED(CONFIG_MODULES);
1505         struct linux_binfmt *fmt;
1506         int retval;
1507 
1508         /* This allows 4 levels of binfmt rewrites before failing hard. */
1509         if (bprm->recursion_depth > 5)
1510                 return -ELOOP;
1511 
1512         retval = security_bprm_check(bprm);
1513         if (retval)
1514                 return retval;
1515 
1516         retval = -ENOENT;
1517  retry:
1518         read_lock(&binfmt_lock);
1519         list_for_each_entry(fmt, &formats, lh) {
1520                 if (!try_module_get(fmt->module))
1521                         continue;
1522                 read_unlock(&binfmt_lock);
1523                 bprm->recursion_depth++;
1524                 retval = fmt->load_binary(bprm);
1525                 read_lock(&binfmt_lock);
1526                 put_binfmt(fmt);
1527                 bprm->recursion_depth--;
1528                 if (retval < 0 && !bprm->mm) {
1529                         /* we got to flush_old_exec() and failed after it */
1530                         read_unlock(&binfmt_lock);
1531                         force_sigsegv(SIGSEGV, current);
1532                         return retval;
1533                 }
1534                 if (retval != -ENOEXEC || !bprm->file) {
1535                         read_unlock(&binfmt_lock);
1536                         return retval;
1537                 }
1538         }
1539         read_unlock(&binfmt_lock);
1540 
1541         if (need_retry) {
1542                 if (printable(bprm->buf[0]) && printable(bprm->buf[1]) &&
1543                     printable(bprm->buf[2]) && printable(bprm->buf[3]))
1544                         return retval;
1545                 if (request_module("binfmt-%04x", *(ushort *)(bprm->buf + 2)) < 0)
1546                         return retval;
1547                 need_retry = false;
1548                 goto retry;
1549         }
1550 
1551         return retval;
1552 }
1553 EXPORT_SYMBOL(search_binary_handler);
1554 
1555 static int exec_binprm(struct linux_binprm *bprm)
1556 {
1557         pid_t old_pid, old_vpid;
1558         int ret;
1559 
1560         /* Need to fetch pid before load_binary changes it */
1561         old_pid = current->pid;
1562         rcu_read_lock();
1563         old_vpid = task_pid_nr_ns(current, task_active_pid_ns(current->parent));
1564         rcu_read_unlock();
1565 
1566         ret = search_binary_handler(bprm);
1567         if (ret >= 0) {
1568                 audit_bprm(bprm);
1569                 trace_sched_process_exec(current, old_pid, bprm);
1570                 ptrace_event(PTRACE_EVENT_EXEC, old_vpid);
1571                 proc_exec_connector(current);
1572         }
1573 
1574         return ret;
1575 }
1576 
1577 /*
1578  * sys_execve() executes a new program.
1579  */
1580 static int do_execveat_common(int fd, struct filename *filename,
1581                               struct user_arg_ptr argv,
1582                               struct user_arg_ptr envp,
1583                               int flags)
1584 {
1585         char *pathbuf = NULL;
1586         struct linux_binprm *bprm;
1587         struct file *file;
1588         struct files_struct *displaced;
1589         int retval;
1590 
1591         if (IS_ERR(filename))
1592                 return PTR_ERR(filename);
1593 
1594         /*
1595          * We move the actual failure in case of RLIMIT_NPROC excess from
1596          * set*uid() to execve() because too many poorly written programs
1597          * don't check setuid() return code.  Here we additionally recheck
1598          * whether NPROC limit is still exceeded.
1599          */
1600         if ((current->flags & PF_NPROC_EXCEEDED) &&
1601             atomic_read(&current_user()->processes) > rlimit(RLIMIT_NPROC)) {
1602                 retval = -EAGAIN;
1603                 goto out_ret;
1604         }
1605 
1606         /* We're below the limit (still or again), so we don't want to make
1607          * further execve() calls fail. */
1608         current->flags &= ~PF_NPROC_EXCEEDED;
1609 
1610         retval = unshare_files(&displaced);
1611         if (retval)
1612                 goto out_ret;
1613 
1614         retval = -ENOMEM;
1615         bprm = kzalloc(sizeof(*bprm), GFP_KERNEL);
1616         if (!bprm)
1617                 goto out_files;
1618 
1619         retval = prepare_bprm_creds(bprm);
1620         if (retval)
1621                 goto out_free;
1622 
1623         check_unsafe_exec(bprm);
1624         current->in_execve = 1;
1625 
1626         file = do_open_execat(fd, filename, flags);
1627         retval = PTR_ERR(file);
1628         if (IS_ERR(file))
1629                 goto out_unmark;
1630 
1631         sched_exec();
1632 
1633         bprm->file = file;
1634         if (fd == AT_FDCWD || filename->name[0] == '/') {
1635                 bprm->filename = filename->name;
1636         } else {
1637                 if (filename->name[0] == '\0')
1638                         pathbuf = kasprintf(GFP_TEMPORARY, "/dev/fd/%d", fd);
1639                 else
1640                         pathbuf = kasprintf(GFP_TEMPORARY, "/dev/fd/%d/%s",
1641                                             fd, filename->name);
1642                 if (!pathbuf) {
1643                         retval = -ENOMEM;
1644                         goto out_unmark;
1645                 }
1646                 /*
1647                  * Record that a name derived from an O_CLOEXEC fd will be
1648                  * inaccessible after exec. Relies on having exclusive access to
1649                  * current->files (due to unshare_files above).
1650                  */
1651                 if (close_on_exec(fd, rcu_dereference_raw(current->files->fdt)))
1652                         bprm->interp_flags |= BINPRM_FLAGS_PATH_INACCESSIBLE;
1653                 bprm->filename = pathbuf;
1654         }
1655         bprm->interp = bprm->filename;
1656 
1657         retval = bprm_mm_init(bprm);
1658         if (retval)
1659                 goto out_unmark;
1660 
1661         bprm->argc = count(argv, MAX_ARG_STRINGS);
1662         if ((retval = bprm->argc) < 0)
1663                 goto out;
1664 
1665         bprm->envc = count(envp, MAX_ARG_STRINGS);
1666         if ((retval = bprm->envc) < 0)
1667                 goto out;
1668 
1669         retval = prepare_binprm(bprm);
1670         if (retval < 0)
1671                 goto out;
1672 
1673         retval = copy_strings_kernel(1, &bprm->filename, bprm);
1674         if (retval < 0)
1675                 goto out;
1676 
1677         bprm->exec = bprm->p;
1678         retval = copy_strings(bprm->envc, envp, bprm);
1679         if (retval < 0)
1680                 goto out;
1681 
1682         retval = copy_strings(bprm->argc, argv, bprm);
1683         if (retval < 0)
1684                 goto out;
1685 
1686         retval = exec_binprm(bprm);
1687         if (retval < 0)
1688                 goto out;
1689 
1690         /* execve succeeded */
1691         current->fs->in_exec = 0;
1692         current->in_execve = 0;
1693         acct_update_integrals(current);
1694         task_numa_free(current);
1695         free_bprm(bprm);
1696         kfree(pathbuf);
1697         putname(filename);
1698         if (displaced)
1699                 put_files_struct(displaced);
1700         return retval;
1701 
1702 out:
1703         if (bprm->mm) {
1704                 acct_arg_size(bprm, 0);
1705                 mmput(bprm->mm);
1706         }
1707 
1708 out_unmark:
1709         current->fs->in_exec = 0;
1710         current->in_execve = 0;
1711 
1712 out_free:
1713         free_bprm(bprm);
1714         kfree(pathbuf);
1715 
1716 out_files:
1717         if (displaced)
1718                 reset_files_struct(displaced);
1719 out_ret:
1720         putname(filename);
1721         return retval;
1722 }
1723 
1724 int do_execve(struct filename *filename,
1725         const char __user *const __user *__argv,
1726         const char __user *const __user *__envp)
1727 {
1728         struct user_arg_ptr argv = { .ptr.native = __argv };
1729         struct user_arg_ptr envp = { .ptr.native = __envp };
1730         return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
1731 }
1732 
1733 int do_execveat(int fd, struct filename *filename,
1734                 const char __user *const __user *__argv,
1735                 const char __user *const __user *__envp,
1736                 int flags)
1737 {
1738         struct user_arg_ptr argv = { .ptr.native = __argv };
1739         struct user_arg_ptr envp = { .ptr.native = __envp };
1740 
1741         return do_execveat_common(fd, filename, argv, envp, flags);
1742 }
1743 
1744 #ifdef CONFIG_COMPAT
1745 static int compat_do_execve(struct filename *filename,
1746         const compat_uptr_t __user *__argv,
1747         const compat_uptr_t __user *__envp)
1748 {
1749         struct user_arg_ptr argv = {
1750                 .is_compat = true,
1751                 .ptr.compat = __argv,
1752         };
1753         struct user_arg_ptr envp = {
1754                 .is_compat = true,
1755                 .ptr.compat = __envp,
1756         };
1757         return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
1758 }
1759 
1760 static int compat_do_execveat(int fd, struct filename *filename,
1761                               const compat_uptr_t __user *__argv,
1762                               const compat_uptr_t __user *__envp,
1763                               int flags)
1764 {
1765         struct user_arg_ptr argv = {
1766                 .is_compat = true,
1767                 .ptr.compat = __argv,
1768         };
1769         struct user_arg_ptr envp = {
1770                 .is_compat = true,
1771                 .ptr.compat = __envp,
1772         };
1773         return do_execveat_common(fd, filename, argv, envp, flags);
1774 }
1775 #endif
1776 
1777 void set_binfmt(struct linux_binfmt *new)
1778 {
1779         struct mm_struct *mm = current->mm;
1780 
1781         if (mm->binfmt)
1782                 module_put(mm->binfmt->module);
1783 
1784         mm->binfmt = new;
1785         if (new)
1786                 __module_get(new->module);
1787 }
1788 EXPORT_SYMBOL(set_binfmt);
1789 
1790 /*
1791  * set_dumpable stores three-value SUID_DUMP_* into mm->flags.
1792  */
1793 void set_dumpable(struct mm_struct *mm, int value)
1794 {
1795         unsigned long old, new;
1796 
1797         if (WARN_ON((unsigned)value > SUID_DUMP_ROOT))
1798                 return;
1799 
1800         do {
1801                 old = ACCESS_ONCE(mm->flags);
1802                 new = (old & ~MMF_DUMPABLE_MASK) | value;
1803         } while (cmpxchg(&mm->flags, old, new) != old);
1804 }
1805 
1806 SYSCALL_DEFINE3(execve,
1807                 const char __user *, filename,
1808                 const char __user *const __user *, argv,
1809                 const char __user *const __user *, envp)
1810 {
1811         return do_execve(getname(filename), argv, envp);
1812 }
1813 
1814 SYSCALL_DEFINE5(execveat,
1815                 int, fd, const char __user *, filename,
1816                 const char __user *const __user *, argv,
1817                 const char __user *const __user *, envp,
1818                 int, flags)
1819 {
1820         int lookup_flags = (flags & AT_EMPTY_PATH) ? LOOKUP_EMPTY : 0;
1821 
1822         return do_execveat(fd,
1823                            getname_flags(filename, lookup_flags, NULL),
1824                            argv, envp, flags);
1825 }
1826 
1827 #ifdef CONFIG_COMPAT
1828 COMPAT_SYSCALL_DEFINE3(execve, const char __user *, filename,
1829         const compat_uptr_t __user *, argv,
1830         const compat_uptr_t __user *, envp)
1831 {
1832         return compat_do_execve(getname(filename), argv, envp);
1833 }
1834 
1835 COMPAT_SYSCALL_DEFINE5(execveat, int, fd,
1836                        const char __user *, filename,
1837                        const compat_uptr_t __user *, argv,
1838                        const compat_uptr_t __user *, envp,
1839                        int,  flags)
1840 {
1841         int lookup_flags = (flags & AT_EMPTY_PATH) ? LOOKUP_EMPTY : 0;
1842 
1843         return compat_do_execveat(fd,
1844                                   getname_flags(filename, lookup_flags, NULL),
1845                                   argv, envp, flags);
1846 }
1847 #endif
1848 